/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java_cup.runtime.*;
import java.io.Reader;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LexicoGxml</tt>
 */
public class LexicoGxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int Stado = 2;
  public static final int LLave = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\3\1\0\1\42\1\42\22\0\1\42\1\0\1\37"+
    "\1\2\1\4\10\0\1\36\1\0\1\7\12\1\2\0\1\5\1\10"+
    "\1\6\2\0\1\16\1\24\1\30\1\14\1\26\1\32\1\34\1\23"+
    "\1\13\2\0\1\22\1\17\1\25\1\21\1\20\1\0\1\27\1\35"+
    "\1\15\1\33\1\31\1\0\1\11\1\12\7\0\1\16\1\24\1\30"+
    "\1\14\1\26\1\32\1\34\1\23\1\13\2\0\1\22\1\17\1\25"+
    "\1\21\1\20\1\0\1\27\1\35\1\15\1\33\1\31\1\0\1\11"+
    "\1\12\1\0\1\40\1\42\1\41\262\0\2\13\115\0\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufe90\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\20\1\2\0\2\4\1\13\32\0"+
    "\1\14\1\0\1\14\1\4\4\0\1\15\25\0\1\16"+
    "\1\17\2\20\1\0\1\21\1\0\1\22\1\0\1\23"+
    "\6\0\1\24\16\0\1\25\1\26\6\0\1\27\1\30"+
    "\4\0\1\31\7\0\1\32\1\0\1\33\1\34\2\0"+
    "\1\35\1\0\1\36\5\0\1\37\1\0\1\40\5\0"+
    "\1\41\3\0\1\42\1\43\1\44\23\0\1\45\1\46"+
    "\1\47\1\50\2\0\1\51\1\0\1\52\2\0\1\53"+
    "\4\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\151\0\322"+
    "\0\365\0\u0118\0\151\0\151\0\151\0\151\0\151\0\u013b"+
    "\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d\0\u0230\0\u0253"+
    "\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b"+
    "\0\u038e\0\u03b1\0\u03d4\0\151\0\u03f7\0\u041a\0\u043d\0\u0460"+
    "\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578"+
    "\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690"+
    "\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\151\0\u0785"+
    "\0\322\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834\0\151\0\u0857"+
    "\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f"+
    "\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87"+
    "\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\151\0\151\0\151\0\322"+
    "\0\u0b36\0\151\0\u0b59\0\151\0\u0b7c\0\151\0\u0b9f\0\u0bc2"+
    "\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\151\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf"+
    "\0\u0df2\0\u0e15\0\u0e38\0\151\0\151\0\u0e5b\0\u0e7e\0\u0ea1"+
    "\0\u0ec4\0\u0ee7\0\u0f0a\0\151\0\151\0\u0f2d\0\u0f50\0\u0f73"+
    "\0\u0f96\0\151\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068"+
    "\0\u108b\0\u10ae\0\u10d1\0\151\0\151\0\u10f4\0\u1117\0\151"+
    "\0\u113a\0\151\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\151"+
    "\0\u120c\0\151\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb\0\151"+
    "\0\u12de\0\u1301\0\u1324\0\151\0\151\0\151\0\u1347\0\u136a"+
    "\0\u138d\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482"+
    "\0\u14a5\0\u14c8\0\u14eb\0\u150e\0\u1531\0\u1554\0\u1577\0\u159a"+
    "\0\u15bd\0\151\0\151\0\151\0\151\0\u15e0\0\u1603\0\151"+
    "\0\u1626\0\151\0\u1649\0\u166c\0\151\0\u168f\0\u16b2\0\u16d5"+
    "\0\u16f8\0\151";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\1\5\1\6\1\4\1\7\34\4\1\6\2\10"+
    "\1\11\2\10\1\7\1\4\34\10\1\4\1\12\1\5"+
    "\1\6\1\4\1\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\4\1\26"+
    "\1\4\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\4\4\1\36\1\37\1\4\1\6\45\0\1\40\1\0"+
    "\1\41\41\0\1\6\36\0\1\6\5\10\2\0\36\10"+
    "\1\42\1\10\1\43\2\0\34\10\1\0\1\12\55\0"+
    "\1\44\2\0\1\45\41\0\1\46\7\0\1\47\27\0"+
    "\1\50\2\0\1\51\7\0\1\52\36\0\1\53\2\0"+
    "\1\54\2\0\1\55\2\0\1\56\22\0\1\57\2\0"+
    "\1\60\14\0\1\61\25\0\1\62\37\0\1\63\50\0"+
    "\1\64\42\0\1\65\4\0\1\66\41\0\1\67\43\0"+
    "\1\70\35\0\1\71\11\0\1\72\35\0\1\73\47\0"+
    "\1\74\7\0\37\75\1\0\3\75\41\76\1\0\1\76"+
    "\3\40\1\77\37\40\2\41\1\0\1\41\1\100\36\41"+
    "\3\42\1\101\1\42\2\40\34\42\2\43\1\10\1\43"+
    "\1\102\2\41\34\43\20\0\1\103\37\0\1\104\57\0"+
    "\1\105\30\0\1\106\41\0\1\107\34\0\1\110\46\0"+
    "\1\111\55\0\1\112\42\0\1\113\27\0\1\114\52\0"+
    "\1\115\26\0\1\116\53\0\1\117\35\0\1\120\62\0"+
    "\1\121\22\0\1\122\11\0\1\123\32\0\1\124\57\0"+
    "\1\125\37\0\1\126\43\0\1\127\32\0\1\130\2\0"+
    "\1\131\44\0\1\132\40\0\1\133\43\0\1\134\14\0"+
    "\37\75\1\135\3\75\41\76\1\136\1\76\2\0\1\137"+
    "\40\0\2\10\1\140\2\10\2\0\34\10\21\0\1\141"+
    "\42\0\1\142\47\0\1\143\35\0\1\144\36\0\1\145"+
    "\46\0\1\146\44\0\1\147\32\0\1\150\50\0\1\151"+
    "\34\0\1\152\42\0\1\153\44\0\1\154\50\0\1\155"+
    "\34\0\1\156\46\0\1\157\35\0\1\160\52\0\1\161"+
    "\45\0\1\162\26\0\1\163\55\0\1\164\35\0\1\165"+
    "\36\0\1\166\62\0\1\167\22\0\1\170\52\0\1\171"+
    "\44\0\1\172\43\0\1\173\33\0\1\174\42\0\1\175"+
    "\42\0\1\176\57\0\1\177\23\0\1\200\42\0\1\201"+
    "\36\0\1\202\45\0\1\203\51\0\1\204\43\0\1\205"+
    "\43\0\1\206\26\0\1\207\45\0\1\210\53\0\1\211"+
    "\42\0\1\212\41\0\1\213\1\214\26\0\1\215\45\0"+
    "\1\216\41\0\1\217\42\0\1\220\42\0\1\221\52\0"+
    "\1\222\44\0\1\223\34\0\1\224\42\0\1\225\40\0"+
    "\1\226\37\0\1\227\54\0\1\230\31\0\1\231\54\0"+
    "\1\232\41\0\1\233\41\0\1\234\36\0\1\235\52\0"+
    "\1\236\36\0\1\237\43\0\1\240\32\0\1\241\45\0"+
    "\1\242\34\0\1\243\16\0\1\244\36\0\1\245\42\0"+
    "\1\246\32\0\1\247\42\0\1\250\51\0\1\251\43\0"+
    "\1\252\36\0\1\253\36\0\1\254\42\0\1\255\53\0"+
    "\1\256\40\0\1\257\30\0\1\260\47\0\1\261\36\0"+
    "\1\262\43\0\1\263\55\0\1\264\26\0\1\265\44\0"+
    "\1\266\37\0\1\267\54\0\1\270\44\0\1\271\26\0"+
    "\1\272\50\0\1\273\34\0\1\274\50\0\1\275\35\0"+
    "\1\276\56\0\1\277\30\0\1\300\45\0\1\301\37\0"+
    "\1\302\61\0\1\303\23\0\1\304\53\0\1\305\34\0"+
    "\1\306\34\0\1\307\51\0\1\310\34\0\1\311\55\0"+
    "\1\312\31\0\1\313\57\0\1\314\31\0\1\315\50\0"+
    "\1\316\42\0\1\317\25\0\1\320\50\0\1\321\46\0"+
    "\1\322\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5915];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\3\1\5\11\20\1\2\0"+
    "\2\1\1\11\32\0\1\11\1\0\2\1\4\0\1\11"+
    "\25\0\3\11\1\1\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\6\0\1\11\16\0\2\11\6\0\2\11\4\0"+
    "\1\11\7\0\1\1\1\0\2\11\2\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\0\1\11\5\0\1\11\3\0"+
    "\3\11\23\0\4\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    public static void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoGxml(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(Stado); return new Symbol(sym.TEXT,yyline,yycolumn,yytext());
            }
          case 45: break;
          case 2: 
            { /*Ignore*/
            }
          case 46: break;
          case 3: 
            { yybegin(LLave); return new Symbol(sym.MAY,yyline,yycolumn,yytext());
            }
          case 47: break;
          case 4: 
            { yybegin(YYINITIAL); return new Symbol(sym.TEXT,yyline,yycolumn,yytext());
            }
          case 48: break;
          case 5: 
            { return new Symbol(sym.NUM,yyline,yycolumn,yytext());
            }
          case 49: break;
          case 6: 
            { yybegin(YYINITIAL); return new Symbol(sym.MEN,yyline,yycolumn,yytext());
            }
          case 50: break;
          case 7: 
            { return new Symbol(sym.DIA,yyline,yycolumn,yytext());
            }
          case 51: break;
          case 8: 
            { return new Symbol(sym.IGU,yyline,yycolumn,yytext());
            }
          case 52: break;
          case 9: 
            { return new Symbol(sym.RX,yyline,yycolumn,yytext());
            }
          case 53: break;
          case 10: 
            { return new Symbol(sym.RY,yyline,yycolumn,yytext());
            }
          case 54: break;
          case 11: 
            { return new Symbol(sym.RID,yyline,yycolumn,yytext());
            }
          case 55: break;
          case 12: 
            { /*Ignorar Comentario Simple*/
            }
          case 56: break;
          case 13: 
            { return new Symbol(sym.RTAM,yyline,yycolumn,yytext());
            }
          case 57: break;
          case 14: 
            { return new Symbol(sym.CAD,yyline,yycolumn,yytext());
            }
          case 58: break;
          case 15: 
            { return new Symbol(sym.MORE,yyline,yycolumn,yytext());
            }
          case 59: break;
          case 16: 
            { /*Ignorar Comentario multiple*/
            }
          case 60: break;
          case 17: 
            { return new Symbol(sym.RDAT,yyline,yycolumn,yytext());
            }
          case 61: break;
          case 18: 
            { return new Symbol(sym.RTIP,yyline,yycolumn,yytext());
            }
          case 62: break;
          case 19: 
            { return new Symbol(sym.RALT,yyline,yycolumn,yytext());
            }
          case 63: break;
          case 20: 
            { return new Symbol(sym.RPAT,yyline,yycolumn,yytext());
            }
          case 64: break;
          case 21: 
            { return new Symbol(sym.RTEX,yyline,yycolumn,yytext());
            }
          case 65: break;
          case 22: 
            { return new Symbol(sym.RANC,yyline,yycolumn,yytext());
            }
          case 66: break;
          case 23: 
            { return new Symbol(sym.RBOT,yyline,yycolumn,yytext());
            }
          case 67: break;
          case 24: 
            { return new Symbol(sym.RBOR,yyline,yycolumn,yytext());
            }
          case 68: break;
          case 25: 
            { return new Symbol(sym.RCOL,yyline,yycolumn,yytext());
            }
          case 69: break;
          case 26: 
            { return new Symbol(sym.RACI,yyline,yycolumn,yytext());
            }
          case 70: break;
          case 27: 
            { return new Symbol(sym.RMIN,yyline,yycolumn,yytext());
            }
          case 71: break;
          case 28: 
            { return new Symbol(sym.RMAX,yyline,yycolumn,yytext());
            }
          case 72: break;
          case 29: 
            { return new Symbol(sym.RNOM,yyline,yycolumn,yytext());
            }
          case 73: break;
          case 30: 
            { return new Symbol(sym.RENV,yyline,yycolumn,yytext());
            }
          case 74: break;
          case 31: 
            { return new Symbol(sym.RFUE,yyline,yycolumn,yytext());
            }
          case 75: break;
          case 32: 
            { return new Symbol(sym.RDEF,yyline,yycolumn,yytext());
            }
          case 76: break;
          case 33: 
            { return new Symbol(sym.RNEG,yyline,yycolumn,yytext());
            }
          case 77: break;
          case 34: 
            { return new Symbol(sym.RCUR,yyline,yycolumn,yytext());
            }
          case 78: break;
          case 35: 
            { return new Symbol(sym.RVEN,yyline,yycolumn,yytext());
            }
          case 79: break;
          case 36: 
            { return new Symbol(sym.RIMP,yyline,yycolumn,yytext());
            }
          case 80: break;
          case 37: 
            { return new Symbol(sym.RMUL,yyline,yycolumn,yytext());
            }
          case 81: break;
          case 38: 
            { return new Symbol(sym.RLDA,yyline,yycolumn,yytext());
            }
          case 82: break;
          case 39: 
            { return new Symbol(sym.REFE,yyline,yycolumn,yytext());
            }
          case 83: break;
          case 40: 
            { return new Symbol(sym.RCON,yyline,yycolumn,yytext());
            }
          case 84: break;
          case 41: 
            { return new Symbol(sym.RAFI,yyline,yycolumn,yytext());
            }
          case 85: break;
          case 42: 
            { return new Symbol(sym.RCTR,yyline,yycolumn,yytext());
            }
          case 86: break;
          case 43: 
            { return new Symbol(sym.RAIN,yyline,yycolumn,yytext());
            }
          case 87: break;
          case 44: 
            { return new Symbol(sym.RAUT,yyline,yycolumn,yytext());
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
