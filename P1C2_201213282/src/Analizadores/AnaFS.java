/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java.io.Reader;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexicoFs</tt>
 */
public class AnaFS {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\40\1\42\1\3\1\43\1\42\1\42\16\40\4\0\1\42\1\0"+
    "\1\41\1\0\1\37\3\0\1\26\1\27\1\4\3\0\1\25\1\2"+
    "\12\1\7\0\1\6\1\33\1\23\1\11\1\10\1\13\1\34\1\31"+
    "\1\16\1\36\1\37\1\14\1\17\1\22\1\12\1\20\1\35\1\7"+
    "\1\15\1\21\1\24\1\5\1\37\1\32\1\30\1\37\4\0\1\37"+
    "\1\0\1\6\1\33\1\23\1\11\1\10\1\13\1\34\1\31\1\16"+
    "\1\36\1\37\1\14\1\17\1\22\1\12\1\20\1\35\1\7\1\15"+
    "\1\21\1\24\1\5\1\37\1\32\1\30\1\37\1\0\1\42\2\0"+
    "\6\40\1\44\32\40\2\0\4\37\4\0\1\37\2\0\1\40\7\0"+
    "\1\37\4\0\1\37\5\0\27\37\1\0\37\37\1\0\70\37\2\16"+
    "\115\37\1\15\u0142\37\4\0\14\37\16\0\5\37\7\0\1\37\1\0"+
    "\1\37\21\0\160\40\5\37\1\0\2\37\2\0\4\37\10\0\1\37"+
    "\1\0\3\37\1\0\1\37\1\0\24\37\1\0\123\37\1\0\213\37"+
    "\1\0\5\40\2\0\236\37\11\0\46\37\2\0\1\37\7\0\47\37"+
    "\7\0\1\37\1\0\55\40\1\0\1\40\1\0\2\40\1\0\2\40"+
    "\1\0\1\40\10\0\33\37\5\0\3\37\15\0\5\40\6\0\1\37"+
    "\4\0\13\40\5\0\53\37\37\40\4\0\2\37\1\40\143\37\1\0"+
    "\1\37\10\40\1\0\6\40\2\37\2\40\1\0\4\40\2\37\12\40"+
    "\3\37\2\0\1\37\17\0\1\40\1\37\1\40\36\37\33\40\2\0"+
    "\131\37\13\40\1\37\16\0\12\40\41\37\11\40\2\37\4\0\1\37"+
    "\5\0\26\37\4\40\1\37\11\40\1\37\3\40\1\37\5\40\22\0"+
    "\31\37\3\40\104\0\1\37\1\0\13\37\67\0\33\40\1\0\4\40"+
    "\66\37\3\40\1\37\22\40\1\37\7\40\12\37\2\40\2\0\12\40"+
    "\1\0\7\37\1\0\7\37\1\0\3\40\1\0\10\37\2\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\40"+
    "\1\37\7\40\2\0\2\40\2\0\3\40\1\37\10\0\1\40\4\0"+
    "\2\37\1\0\3\37\2\40\2\0\12\40\4\37\7\0\1\37\5\0"+
    "\3\40\1\0\6\37\4\0\2\37\2\0\26\37\1\0\7\37\1\0"+
    "\2\37\1\0\2\37\1\0\2\37\2\0\1\40\1\0\5\40\4\0"+
    "\2\40\2\0\3\40\3\0\1\40\7\0\4\37\1\0\1\37\7\0"+
    "\14\40\3\37\1\40\13\0\3\40\1\0\11\37\1\0\3\37\1\0"+
    "\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\40\1\37"+
    "\10\40\1\0\3\40\1\0\3\40\2\0\1\37\17\0\2\37\2\40"+
    "\2\0\12\40\1\0\1\37\17\0\3\40\1\0\10\37\2\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\40"+
    "\1\37\7\40\2\0\2\40\2\0\3\40\10\0\2\40\4\0\2\37"+
    "\1\0\3\37\2\40\2\0\12\40\1\0\1\37\20\0\1\40\1\37"+
    "\1\0\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37"+
    "\1\0\2\37\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\40"+
    "\3\0\3\40\1\0\4\40\2\0\1\37\6\0\1\40\16\0\12\40"+
    "\11\0\1\37\7\0\3\40\1\0\10\37\1\0\3\37\1\0\27\37"+
    "\1\0\12\37\1\0\5\37\3\0\1\37\7\40\1\0\3\40\1\0"+
    "\4\40\7\0\2\40\1\0\2\37\6\0\2\37\2\40\2\0\12\40"+
    "\22\0\2\40\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37"+
    "\1\0\5\37\2\0\1\40\1\37\7\40\1\0\3\40\1\0\4\40"+
    "\7\0\2\40\7\0\1\37\1\0\2\37\2\40\2\0\12\40\1\0"+
    "\2\37\17\0\2\40\1\0\10\37\1\0\3\37\1\0\51\37\2\0"+
    "\1\37\7\40\1\0\3\40\1\0\4\40\1\37\10\0\1\40\10\0"+
    "\2\37\2\40\2\0\12\40\12\0\6\37\2\0\2\40\1\0\22\37"+
    "\3\0\30\37\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\40"+
    "\4\0\6\40\1\0\1\40\1\0\10\40\22\0\2\40\15\0\60\37"+
    "\1\40\2\37\7\40\4\0\10\37\10\40\1\0\12\40\47\0\2\37"+
    "\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37"+
    "\1\0\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37"+
    "\1\0\4\37\1\40\2\37\6\40\1\0\2\40\1\37\2\0\5\37"+
    "\1\0\1\37\1\0\6\40\2\0\12\40\2\0\4\37\40\0\1\37"+
    "\27\0\2\40\6\0\12\40\13\0\1\40\1\0\1\40\1\0\1\40"+
    "\4\0\2\40\10\37\1\0\44\37\4\0\24\40\1\0\2\40\5\37"+
    "\13\40\1\0\44\40\11\0\1\40\71\0\53\37\24\40\1\37\12\40"+
    "\6\0\6\37\4\40\4\37\3\40\1\37\3\40\2\37\7\40\3\37"+
    "\4\40\15\37\14\40\1\37\17\40\2\0\46\37\1\0\1\37\5\0"+
    "\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37\1\0"+
    "\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37\1\0"+
    "\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37\1\0"+
    "\71\37\1\0\4\37\2\0\103\37\2\0\3\40\40\0\20\37\20\0"+
    "\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37\3\0"+
    "\3\37\17\0\15\37\1\0\4\37\3\40\13\0\22\37\3\40\13\0"+
    "\22\37\2\40\14\0\15\37\1\0\3\37\1\0\2\40\14\0\64\37"+
    "\40\40\3\0\1\37\3\0\2\37\1\40\2\0\12\40\41\0\3\40"+
    "\2\0\12\40\6\0\130\37\10\0\51\37\1\40\1\37\5\0\106\37"+
    "\12\0\35\37\3\0\14\40\4\0\14\40\12\0\12\40\36\37\2\0"+
    "\5\37\13\0\54\37\4\0\21\40\7\37\2\40\6\0\12\40\46\0"+
    "\27\37\5\40\4\0\65\37\12\40\1\0\35\40\2\0\13\40\6\0"+
    "\12\40\15\0\1\37\130\0\5\40\57\37\21\40\7\37\4\0\12\40"+
    "\21\0\11\40\14\0\3\40\36\37\15\40\2\37\12\40\54\37\16\40"+
    "\14\0\44\37\24\40\10\0\12\40\3\0\3\37\12\40\44\37\122\0"+
    "\3\40\1\0\25\40\4\37\1\40\4\37\3\40\2\37\11\0\300\37"+
    "\47\40\25\0\4\40\u0116\37\2\0\6\37\2\0\46\37\2\0\6\37"+
    "\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0\37\37"+
    "\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37\1\0\7\37"+
    "\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37\1\0\7\37"+
    "\16\0\5\40\30\0\1\43\1\43\5\40\20\0\2\37\23\0\1\37"+
    "\13\0\5\40\5\0\6\40\1\0\1\37\15\0\1\37\20\0\15\37"+
    "\3\0\33\37\25\0\15\40\4\0\1\40\3\0\14\40\21\0\1\37"+
    "\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37\6\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37\2\0\4\37"+
    "\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\57\37\1\0\57\37"+
    "\1\0\205\37\6\0\4\37\3\40\2\37\14\0\46\37\1\0\1\37"+
    "\5\0\1\37\2\0\70\37\7\0\1\37\17\0\1\40\27\37\11\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\40\40\57\0\1\37\u01d5\0"+
    "\3\37\31\0\11\37\6\40\1\0\5\37\2\0\5\37\4\0\126\37"+
    "\2\0\2\40\2\0\3\37\1\0\132\37\1\0\4\37\5\0\51\37"+
    "\3\0\136\37\21\0\33\37\65\0\20\37\u0200\0\u19b6\37\112\0\u51cd\37"+
    "\63\0\u048d\37\103\0\56\37\2\0\u010d\37\3\0\20\37\12\40\2\37"+
    "\24\0\57\37\1\40\4\0\12\40\1\0\31\37\7\0\1\40\120\37"+
    "\2\40\45\0\11\37\2\0\147\37\2\0\4\37\1\0\4\37\14\0"+
    "\13\37\115\0\12\37\1\40\3\37\1\40\4\37\1\40\27\37\5\40"+
    "\20\0\1\37\7\0\64\37\14\0\2\40\62\37\21\40\13\0\12\40"+
    "\6\0\22\40\6\37\3\0\1\37\4\0\12\40\34\37\10\40\2\0"+
    "\27\37\15\40\14\0\35\37\3\0\4\40\57\37\16\40\16\0\1\37"+
    "\12\40\46\0\51\37\16\40\11\0\3\37\1\40\10\37\2\40\2\0"+
    "\12\40\6\0\27\37\3\0\1\37\1\40\4\0\60\37\1\40\1\37"+
    "\3\40\2\37\2\40\5\37\2\40\1\37\1\40\1\37\30\0\3\37"+
    "\2\0\13\37\5\40\2\0\3\37\2\40\12\0\6\37\2\0\6\37"+
    "\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37\10\40\1\0"+
    "\2\40\2\0\12\40\6\0\u2ba4\37\14\0\27\37\4\0\61\37\u2104\0"+
    "\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37\5\0\1\37\1\40"+
    "\12\37\1\0\15\37\1\0\5\37\1\0\1\37\1\0\2\37\1\0"+
    "\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37\2\0\66\37\50\0"+
    "\15\37\3\0\20\40\20\0\7\40\14\0\2\37\30\0\3\37\31\0"+
    "\1\37\6\0\5\37\1\0\207\37\2\0\1\40\4\0\1\37\13\0"+
    "\12\40\7\0\32\37\4\0\1\37\1\0\32\37\13\0\131\37\3\0"+
    "\6\37\2\0\6\37\2\0\6\37\2\0\3\37\3\0\2\37\3\0"+
    "\2\37\22\0\3\40\4\0\14\37\1\0\32\37\1\0\23\37\1\0"+
    "\2\37\1\0\17\37\2\0\16\37\42\0\173\37\105\0\65\37\210\0"+
    "\1\40\202\0\35\37\3\0\61\37\57\0\37\37\21\0\33\37\65\0"+
    "\36\37\2\0\44\37\4\0\10\37\1\0\5\37\52\0\236\37\2\0"+
    "\12\40\u0356\0\6\37\2\0\1\37\1\0\54\37\1\0\2\37\3\0"+
    "\1\37\2\0\27\37\252\0\26\37\12\0\32\37\106\0\70\37\6\0"+
    "\2\37\100\0\1\37\3\40\1\0\2\40\5\0\4\40\4\37\1\0"+
    "\3\37\1\0\33\37\4\0\3\40\4\0\1\40\40\0\35\37\203\0"+
    "\66\37\12\0\26\37\12\0\23\37\215\0\111\37\u03b7\0\3\40\65\37"+
    "\17\40\37\0\12\40\20\0\3\40\55\37\13\40\2\0\1\40\22\0"+
    "\31\37\7\0\12\40\6\0\3\40\44\37\16\40\1\0\12\40\100\0"+
    "\3\40\60\37\16\40\4\37\13\0\12\40\u04a6\0\53\37\15\40\10\0"+
    "\12\40\u0936\0\u036f\37\221\0\143\37\u0b9d\0\u042f\37\u33d1\0\u0239\37\u04c7\0"+
    "\105\37\13\0\1\37\56\40\20\0\4\40\15\37\u4060\0\2\37\u2163\0"+
    "\5\40\3\0\26\40\2\0\7\40\36\0\4\40\224\0\3\40\u01bb\0"+
    "\125\37\1\0\107\37\1\0\2\37\2\0\1\37\2\0\2\37\2\0"+
    "\4\37\1\0\14\37\1\0\1\37\1\0\7\37\1\0\101\37\1\0"+
    "\4\37\2\0\10\37\1\0\7\37\1\0\34\37\1\0\4\37\1\0"+
    "\5\37\1\0\1\37\3\0\7\37\1\0\u0154\37\2\0\31\37\1\0"+
    "\31\37\1\0\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0"+
    "\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0\10\37\2\0"+
    "\62\40\u1600\0\4\37\1\0\33\37\1\0\2\37\1\0\1\37\2\0"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37\6\0"+
    "\1\37\4\0\1\37\1\0\1\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\2\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\0\1\37\2\0\4\37\1\0"+
    "\7\37\1\0\4\37\1\0\4\37\1\0\1\37\1\0\12\37\1\0"+
    "\21\37\5\0\3\37\1\0\5\37\1\0\21\37\u1144\0\ua6d7\37\51\0"+
    "\u1035\37\13\0\336\37\u3fe2\0\u021e\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\40\36\0\140\40\200\0\360\40\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\15\1\3\0\10\1"+
    "\1\4\16\1\1\0\1\5\1\2\1\6\1\0\1\4"+
    "\26\1\1\0\122\1\1\0\16\1\1\4\72\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\45\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456"+
    "\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e"+
    "\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u022b\0\45\0\u0275\0\45"+
    "\0\u0637\0\271\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715"+
    "\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d"+
    "\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965"+
    "\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d"+
    "\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5"+
    "\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd"+
    "\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05"+
    "\0\u0e2a\0\u0e4f\0\u0e74\0\u040c\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08"+
    "\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030"+
    "\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158"+
    "\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280"+
    "\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8"+
    "\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0"+
    "\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8"+
    "\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720"+
    "\0\u1745\0\u176a\0\45\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823"+
    "\0\u1848\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926\0\u194b"+
    "\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u1a29\0\u1a4e\0\u1a73"+
    "\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b"+
    "\0\u1bc0\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3"+
    "\0\u1ce8\0\u1d0d\0\u1d32\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb"+
    "\0\u1e10\0\u1e35\0\u1e5a\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13"+
    "\0\u1f38\0\u1f5d\0\u1f82\0\u1fa7\0\u1fcc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\7\1\11\1\7\1\12\1\13\1\14\1\15\3\7"+
    "\1\16\1\17\1\7\1\20\2\2\10\7\1\2\1\21"+
    "\1\22\50\0\1\3\23\0\1\23\21\0\1\24\1\0"+
    "\1\25\41\0\1\7\3\0\1\7\1\26\1\7\1\27"+
    "\14\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\20\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\3\7\1\30\14\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\3\7\1\31\14\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\1\7\1\32\15\7\1\33"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\3\7"+
    "\1\34\14\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\3\7\1\35\5\7\1\36\6\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\12\7\1\37\5\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\17\7"+
    "\1\40\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\1\7\1\41\1\42\15\7\3\0\11\7\3\0\1\7"+
    "\5\0\1\7\1\43\1\44\1\7\1\45\1\46\1\47"+
    "\2\7\1\50\1\51\1\7\1\52\1\7\1\53\1\7"+
    "\3\0\3\7\1\54\4\7\5\0\41\55\1\56\3\55"+
    "\42\0\1\22\3\0\1\57\43\0\3\24\1\60\41\24"+
    "\2\61\1\0\1\61\1\0\40\61\1\0\1\7\3\0"+
    "\2\7\1\62\15\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\2\7\1\63\15\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\14\7\1\64\3\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\6\7\1\65"+
    "\5\7\1\66\3\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\7\7\1\41\10\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\15\7\1\67\2\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\3\7\1\70"+
    "\14\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\7\7\1\71\10\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\15\7\1\72\2\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\13\7\1\73\4\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\7\7\1\72"+
    "\10\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\10\7\1\72\7\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\3\7\1\74\14\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\7\7\1\75\1\76\7\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\3\7"+
    "\1\77\14\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\3\7\1\100\14\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\20\7\3\0\3\7\1\101\5\7"+
    "\3\0\1\7\1\0\1\7\3\0\11\7\1\102\6\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\15\7"+
    "\1\103\2\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\1\7\1\104\7\7\1\105\6\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\5\7\1\106\12\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\2\7"+
    "\1\107\15\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\17\7\1\110\3\0\11\7\3\0\1\7\2\61"+
    "\1\0\1\61\1\111\40\61\1\0\1\7\3\0\4\7"+
    "\1\112\13\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\5\7\1\113\12\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\3\7\1\114\14\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\3\7\1\115\14\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\16\7"+
    "\1\116\1\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\2\7\1\117\15\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\3\7\1\120\14\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\5\7\1\62\12\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\2\7"+
    "\1\121\2\7\1\122\12\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\1\7\1\123\16\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\16\7\1\124\1\7"+
    "\3\0\4\7\1\125\4\7\3\0\1\7\1\0\1\7"+
    "\3\0\16\7\1\126\1\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\4\7\1\127\13\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\10\7\1\76\7\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\14\7"+
    "\1\130\3\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\7\7\1\131\10\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\1\132\17\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\13\7\1\62\4\7\3\0"+
    "\2\7\1\133\6\7\3\0\1\7\1\0\1\7\3\0"+
    "\15\7\1\133\2\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\4\7\1\134\13\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\3\7\1\135\14\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\10\7\1\136"+
    "\7\7\3\0\11\7\3\0\1\7\2\0\1\60\43\0"+
    "\1\7\3\0\1\7\1\137\16\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\2\7\1\140\15\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\16\7\1\141"+
    "\1\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\15\7\1\142\2\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\11\7\1\143\6\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\20\7\3\0\4\7\1\144"+
    "\4\7\3\0\1\7\1\0\1\7\3\0\16\7\1\145"+
    "\1\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\11\7\1\146\6\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\2\7\1\147\15\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\2\7\1\150\15\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\1\7\1\151"+
    "\1\7\1\152\3\7\1\153\10\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\17\7\1\154\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\3\7\1\155\14\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\17\7"+
    "\1\156\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\3\7\1\157\14\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\14\7\1\160\3\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\3\7\1\161\14\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\11\7\1\162"+
    "\6\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\5\7\1\163\12\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\1\7\1\164\16\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\16\7\1\165\1\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\4\7\1\166"+
    "\13\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\15\7\1\165\2\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\14\7\1\72\3\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\3\7\1\26\14\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\5\7\1\167"+
    "\12\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\20\7\3\0\2\7\1\170\6\7\3\0\1\7\1\0"+
    "\1\7\3\0\16\7\1\171\1\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\12\7\1\172\5\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\14\7\1\165"+
    "\3\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\1\173\1\174\16\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\2\7\1\175\15\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\2\7\1\160\15\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\11\7\1\176"+
    "\6\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\15\7\1\177\2\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\16\7\1\200\1\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\15\7\1\201\2\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\2\7\1\165"+
    "\15\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\2\7\1\202\15\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\12\7\1\203\5\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\10\7\1\62\7\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\2\7\1\204"+
    "\15\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\1\7\1\26\16\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\3\7\1\205\14\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\15\7\1\62\2\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\12\7\1\206"+
    "\5\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\11\7\1\207\6\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\11\7\1\26\6\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\3\7\1\210\14\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\2\7\1\211"+
    "\15\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\20\7\3\0\4\7\1\165\4\7\3\0\1\7\1\0"+
    "\1\7\3\0\16\7\1\62\1\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\4\7\1\212\13\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\3\7\1\62"+
    "\14\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\3\7\1\213\14\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\14\7\1\214\3\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\5\7\1\215\12\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\1\216\1\217"+
    "\1\220\1\7\1\221\4\7\1\222\2\7\1\223\1\7"+
    "\1\224\1\7\3\0\3\7\1\225\5\7\3\0\1\7"+
    "\1\0\1\7\3\0\2\7\1\72\15\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\7\7\1\62\10\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\5\7"+
    "\1\226\12\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\15\7\1\227\2\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\2\7\1\230\15\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\3\7\1\231\14\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\2\7"+
    "\1\232\15\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\11\7\1\233\6\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\20\7\1\0\1\234\1\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\11\7\1\235\6\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\2\7"+
    "\1\236\15\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\3\7\1\237\14\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\3\7\1\240\14\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\12\7\1\241\5\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\3\7"+
    "\1\242\14\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\1\7\1\243\3\7\1\244\12\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\5\7\1\245\12\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\15\7"+
    "\1\246\2\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\14\7\1\247\3\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\1\7\1\250\16\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\15\7\1\251\2\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\13\7"+
    "\1\252\4\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\2\7\1\215\15\7\3\0\11\7\3\0\1\7"+
    "\27\0\1\253\16\0\1\7\3\0\4\7\1\254\13\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\3\7"+
    "\1\255\14\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\13\7\1\256\4\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\10\7\1\257\7\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\1\7\1\260\16\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\20\7"+
    "\3\0\2\7\1\141\6\7\3\0\1\7\1\0\1\7"+
    "\3\0\20\7\3\0\6\7\1\255\2\7\3\0\1\7"+
    "\1\0\1\7\3\0\15\7\1\261\2\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\14\7\1\143\3\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\1\7"+
    "\1\62\16\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\1\7\1\226\16\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\20\7\3\0\1\262\10\7\3\0"+
    "\1\7\1\0\1\7\3\0\14\7\1\263\3\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\5\7\1\264"+
    "\12\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\3\7\1\72\14\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\1\7\1\265\16\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\2\7\1\266\15\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\13\7\1\267"+
    "\4\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\20\7\3\0\4\7\1\270\4\7\3\0\1\7\1\0"+
    "\1\7\3\0\14\7\1\271\3\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\4\7\1\272\13\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\3\7\1\215"+
    "\14\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\2\7\1\273\15\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\14\7\1\223\3\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\5\7\1\274\12\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\7\7\1\275"+
    "\10\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\3\7\1\167\14\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\2\7\1\276\1\277\14\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\3\7\1\300\14\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\3\7"+
    "\1\301\5\7\1\302\3\7\1\303\2\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\4\7\1\304\13\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\3\7"+
    "\1\305\14\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\5\7\1\306\12\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\15\7\1\307\2\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\10\7\1\310\7\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\14\7"+
    "\1\311\3\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\4\7\1\62\13\7\3\0\11\7\3\0\1\7"+
    "\1\0\1\7\3\0\5\7\1\312\12\7\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\17\7\1\313\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\20\7\3\0"+
    "\4\7\1\314\4\7\3\0\1\7\1\0\1\7\3\0"+
    "\7\7\1\315\10\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\3\7\1\316\14\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\4\7\1\317\13\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\11\7\1\320"+
    "\6\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\12\7\1\321\5\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\16\7\1\322\1\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\1\7\1\323\16\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\15\7\1\324"+
    "\2\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\4\7\1\325\13\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\3\7\1\326\14\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\20\7\3\0\5\7\1\327"+
    "\3\7\3\0\1\7\1\0\1\7\3\0\20\7\3\0"+
    "\3\7\1\330\5\7\3\0\1\7\1\0\1\7\3\0"+
    "\14\7\1\325\3\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\20\7\3\0\3\7\1\331\5\7\3\0"+
    "\1\7\1\0\1\7\3\0\17\7\1\332\3\0\11\7"+
    "\3\0\1\7\1\0\1\7\3\0\5\7\1\26\12\7"+
    "\3\0\11\7\3\0\1\7\1\0\1\7\3\0\1\7"+
    "\1\333\16\7\3\0\11\7\3\0\1\7\1\0\1\7"+
    "\3\0\17\7\1\334\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\2\7\1\200\15\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\7\7\1\200\10\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\12\7\1\335"+
    "\5\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\2\7\1\336\15\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\3\7\1\337\14\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\3\7\1\340\14\7\3\0"+
    "\11\7\3\0\1\7\1\0\1\7\3\0\16\7\1\341"+
    "\1\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\14\7\1\246\3\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\2\7\1\342\15\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\20\7\3\0\1\7\1\343"+
    "\7\7\3\0\1\7\1\0\1\7\3\0\11\7\1\344"+
    "\6\7\3\0\11\7\3\0\1\7\1\0\1\7\3\0"+
    "\11\7\1\345\6\7\3\0\11\7\3\0\1\7\1\0"+
    "\1\7\3\0\16\7\1\72\1\7\3\0\11\7\3\0"+
    "\1\7\1\0\1\7\3\0\1\72\17\7\3\0\11\7"+
    "\3\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8177];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\15\1\3\0\27\1\1\0"+
    "\1\11\1\1\1\11\1\0\27\1\1\0\122\1\1\0"+
    "\16\1\1\11\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
 public ArrayList<String> Elista = new ArrayList();
    private void Tipo(String dato,Object value){
        switch(dato){
			case "reservada":  Elista.add("<font color=\"blue\">"+value.toString()+"</font>"); break;
			case "comentario": Elista.add("<font color=\"gray\">"+value.toString()+"</font>"); break;
			case "cadena": Elista.add("<font color=\"orange\">"+value.toString()+"</font>"); break;
			case "numero": Elista.add("<font color=\"purple\">"+value.toString()+"</font>"); break;
			default:  Elista.add(value.toString()); break;
		}
    }

class Yytoken {
Yytoken () {}
}	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnaFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2890) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Tipo("otro",yytext());
            } 
            // fall through
          case 7: break;
          case 2: 
            { Tipo("numero",yytext());
            } 
            // fall through
          case 8: break;
          case 3: 
            { Tipo("otro","\n <br>");
            } 
            // fall through
          case 9: break;
          case 4: 
            { Tipo("reservada",yytext());
            } 
            // fall through
          case 10: break;
          case 5: 
            { Tipo("cadena",yytext());
            } 
            // fall through
          case 11: break;
          case 6: 
            { Tipo("comentario",yytext());
            } 
            // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
