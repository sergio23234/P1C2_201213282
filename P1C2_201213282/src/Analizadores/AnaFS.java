/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java.io.Reader;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexicoFs</tt>
 */
public class AnaFS {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\42\1\44\1\3\1\45\1\44\1\44\16\42\4\0\1\44\1\0"+
    "\1\43\1\0\1\41\3\0\1\30\1\31\1\4\3\0\1\27\1\2"+
    "\12\1\2\0\1\6\1\0\1\5\2\0\1\10\1\35\1\25\1\13"+
    "\1\12\1\15\1\36\1\33\1\20\1\40\1\41\1\16\1\21\1\24"+
    "\1\14\1\22\1\37\1\11\1\17\1\23\1\26\1\7\1\41\1\34"+
    "\1\32\1\41\4\0\1\41\1\0\1\10\1\35\1\25\1\13\1\12"+
    "\1\15\1\36\1\33\1\20\1\40\1\41\1\16\1\21\1\24\1\14"+
    "\1\22\1\37\1\11\1\17\1\23\1\26\1\7\1\41\1\34\1\32"+
    "\1\41\1\0\1\44\2\0\6\42\1\46\32\42\2\0\4\41\4\0"+
    "\1\41\2\0\1\42\7\0\1\41\4\0\1\41\5\0\27\41\1\0"+
    "\37\41\1\0\70\41\2\20\115\41\1\17\u0142\41\4\0\14\41\16\0"+
    "\5\41\7\0\1\41\1\0\1\41\21\0\160\42\5\41\1\0\2\41"+
    "\2\0\4\41\10\0\1\41\1\0\3\41\1\0\1\41\1\0\24\41"+
    "\1\0\123\41\1\0\213\41\1\0\5\42\2\0\236\41\11\0\46\41"+
    "\2\0\1\41\7\0\47\41\7\0\1\41\1\0\55\42\1\0\1\42"+
    "\1\0\2\42\1\0\2\42\1\0\1\42\10\0\33\41\5\0\3\41"+
    "\15\0\5\42\6\0\1\41\4\0\13\42\5\0\53\41\37\42\4\0"+
    "\2\41\1\42\143\41\1\0\1\41\10\42\1\0\6\42\2\41\2\42"+
    "\1\0\4\42\2\41\12\42\3\41\2\0\1\41\17\0\1\42\1\41"+
    "\1\42\36\41\33\42\2\0\131\41\13\42\1\41\16\0\12\42\41\41"+
    "\11\42\2\41\4\0\1\41\5\0\26\41\4\42\1\41\11\42\1\41"+
    "\3\42\1\41\5\42\22\0\31\41\3\42\104\0\1\41\1\0\13\41"+
    "\67\0\33\42\1\0\4\42\66\41\3\42\1\41\22\42\1\41\7\42"+
    "\12\41\2\42\2\0\12\42\1\0\7\41\1\0\7\41\1\0\3\42"+
    "\1\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41\1\0\1\41"+
    "\3\0\4\41\2\0\1\42\1\41\7\42\2\0\2\42\2\0\3\42"+
    "\1\41\10\0\1\42\4\0\2\41\1\0\3\41\2\42\2\0\12\42"+
    "\4\41\7\0\1\41\5\0\3\42\1\0\6\41\4\0\2\41\2\0"+
    "\26\41\1\0\7\41\1\0\2\41\1\0\2\41\1\0\2\41\2\0"+
    "\1\42\1\0\5\42\4\0\2\42\2\0\3\42\3\0\1\42\7\0"+
    "\4\41\1\0\1\41\7\0\14\42\3\41\1\42\13\0\3\42\1\0"+
    "\11\41\1\0\3\41\1\0\26\41\1\0\7\41\1\0\2\41\1\0"+
    "\5\41\2\0\1\42\1\41\10\42\1\0\3\42\1\0\3\42\2\0"+
    "\1\41\17\0\2\41\2\42\2\0\12\42\1\0\1\41\17\0\3\42"+
    "\1\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41\1\0\2\41"+
    "\1\0\5\41\2\0\1\42\1\41\7\42\2\0\2\42\2\0\3\42"+
    "\10\0\2\42\4\0\2\41\1\0\3\41\2\42\2\0\12\42\1\0"+
    "\1\41\20\0\1\42\1\41\1\0\6\41\3\0\3\41\1\0\4\41"+
    "\3\0\2\41\1\0\1\41\1\0\2\41\3\0\2\41\3\0\3\41"+
    "\3\0\14\41\4\0\5\42\3\0\3\42\1\0\4\42\2\0\1\41"+
    "\6\0\1\42\16\0\12\42\11\0\1\41\7\0\3\42\1\0\10\41"+
    "\1\0\3\41\1\0\27\41\1\0\12\41\1\0\5\41\3\0\1\41"+
    "\7\42\1\0\3\42\1\0\4\42\7\0\2\42\1\0\2\41\6\0"+
    "\2\41\2\42\2\0\12\42\22\0\2\42\1\0\10\41\1\0\3\41"+
    "\1\0\27\41\1\0\12\41\1\0\5\41\2\0\1\42\1\41\7\42"+
    "\1\0\3\42\1\0\4\42\7\0\2\42\7\0\1\41\1\0\2\41"+
    "\2\42\2\0\12\42\1\0\2\41\17\0\2\42\1\0\10\41\1\0"+
    "\3\41\1\0\51\41\2\0\1\41\7\42\1\0\3\42\1\0\4\42"+
    "\1\41\10\0\1\42\10\0\2\41\2\42\2\0\12\42\12\0\6\41"+
    "\2\0\2\42\1\0\22\41\3\0\30\41\1\0\11\41\1\0\1\41"+
    "\2\0\7\41\3\0\1\42\4\0\6\42\1\0\1\42\1\0\10\42"+
    "\22\0\2\42\15\0\60\41\1\42\2\41\7\42\4\0\10\41\10\42"+
    "\1\0\12\42\47\0\2\41\1\0\1\41\2\0\2\41\1\0\1\41"+
    "\2\0\1\41\6\0\4\41\1\0\7\41\1\0\3\41\1\0\1\41"+
    "\1\0\1\41\2\0\2\41\1\0\4\41\1\42\2\41\6\42\1\0"+
    "\2\42\1\41\2\0\5\41\1\0\1\41\1\0\6\42\2\0\12\42"+
    "\2\0\4\41\40\0\1\41\27\0\2\42\6\0\12\42\13\0\1\42"+
    "\1\0\1\42\1\0\1\42\4\0\2\42\10\41\1\0\44\41\4\0"+
    "\24\42\1\0\2\42\5\41\13\42\1\0\44\42\11\0\1\42\71\0"+
    "\53\41\24\42\1\41\12\42\6\0\6\41\4\42\4\41\3\42\1\41"+
    "\3\42\2\41\7\42\3\41\4\42\15\41\14\42\1\41\17\42\2\0"+
    "\46\41\1\0\1\41\5\0\1\41\2\0\53\41\1\0\u014d\41\1\0"+
    "\4\41\2\0\7\41\1\0\1\41\1\0\4\41\2\0\51\41\1\0"+
    "\4\41\2\0\41\41\1\0\4\41\2\0\7\41\1\0\1\41\1\0"+
    "\4\41\2\0\17\41\1\0\71\41\1\0\4\41\2\0\103\41\2\0"+
    "\3\42\40\0\20\41\20\0\125\41\14\0\u026c\41\2\0\21\41\1\0"+
    "\32\41\5\0\113\41\3\0\3\41\17\0\15\41\1\0\4\41\3\42"+
    "\13\0\22\41\3\42\13\0\22\41\2\42\14\0\15\41\1\0\3\41"+
    "\1\0\2\42\14\0\64\41\40\42\3\0\1\41\3\0\2\41\1\42"+
    "\2\0\12\42\41\0\3\42\2\0\12\42\6\0\130\41\10\0\51\41"+
    "\1\42\1\41\5\0\106\41\12\0\35\41\3\0\14\42\4\0\14\42"+
    "\12\0\12\42\36\41\2\0\5\41\13\0\54\41\4\0\21\42\7\41"+
    "\2\42\6\0\12\42\46\0\27\41\5\42\4\0\65\41\12\42\1\0"+
    "\35\42\2\0\13\42\6\0\12\42\15\0\1\41\130\0\5\42\57\41"+
    "\21\42\7\41\4\0\12\42\21\0\11\42\14\0\3\42\36\41\15\42"+
    "\2\41\12\42\54\41\16\42\14\0\44\41\24\42\10\0\12\42\3\0"+
    "\3\41\12\42\44\41\122\0\3\42\1\0\25\42\4\41\1\42\4\41"+
    "\3\42\2\41\11\0\300\41\47\42\25\0\4\42\u0116\41\2\0\6\41"+
    "\2\0\46\41\2\0\6\41\2\0\10\41\1\0\1\41\1\0\1\41"+
    "\1\0\1\41\1\0\37\41\2\0\65\41\1\0\7\41\1\0\1\41"+
    "\3\0\3\41\1\0\7\41\3\0\4\41\2\0\6\41\4\0\15\41"+
    "\5\0\3\41\1\0\7\41\16\0\5\42\30\0\1\45\1\45\5\42"+
    "\20\0\2\41\23\0\1\41\13\0\5\42\5\0\6\42\1\0\1\41"+
    "\15\0\1\41\20\0\15\41\3\0\33\41\25\0\15\42\4\0\1\42"+
    "\3\0\14\42\21\0\1\41\4\0\1\41\2\0\12\41\1\0\1\41"+
    "\3\0\5\41\6\0\1\41\1\0\1\41\1\0\1\41\1\0\4\41"+
    "\1\0\13\41\2\0\4\41\5\0\5\41\4\0\1\41\21\0\51\41"+
    "\u0a77\0\57\41\1\0\57\41\1\0\205\41\6\0\4\41\3\42\2\41"+
    "\14\0\46\41\1\0\1\41\5\0\1\41\2\0\70\41\7\0\1\41"+
    "\17\0\1\42\27\41\11\0\7\41\1\0\7\41\1\0\7\41\1\0"+
    "\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0"+
    "\40\42\57\0\1\41\u01d5\0\3\41\31\0\11\41\6\42\1\0\5\41"+
    "\2\0\5\41\4\0\126\41\2\0\2\42\2\0\3\41\1\0\132\41"+
    "\1\0\4\41\5\0\51\41\3\0\136\41\21\0\33\41\65\0\20\41"+
    "\u0200\0\u19b6\41\112\0\u51cd\41\63\0\u048d\41\103\0\56\41\2\0\u010d\41"+
    "\3\0\20\41\12\42\2\41\24\0\57\41\1\42\4\0\12\42\1\0"+
    "\31\41\7\0\1\42\120\41\2\42\45\0\11\41\2\0\147\41\2\0"+
    "\4\41\1\0\4\41\14\0\13\41\115\0\12\41\1\42\3\41\1\42"+
    "\4\41\1\42\27\41\5\42\20\0\1\41\7\0\64\41\14\0\2\42"+
    "\62\41\21\42\13\0\12\42\6\0\22\42\6\41\3\0\1\41\4\0"+
    "\12\42\34\41\10\42\2\0\27\41\15\42\14\0\35\41\3\0\4\42"+
    "\57\41\16\42\16\0\1\41\12\42\46\0\51\41\16\42\11\0\3\41"+
    "\1\42\10\41\2\42\2\0\12\42\6\0\27\41\3\0\1\41\1\42"+
    "\4\0\60\41\1\42\1\41\3\42\2\41\2\42\5\41\2\42\1\41"+
    "\1\42\1\41\30\0\3\41\2\0\13\41\5\42\2\0\3\41\2\42"+
    "\12\0\6\41\2\0\6\41\2\0\6\41\11\0\7\41\1\0\7\41"+
    "\221\0\43\41\10\42\1\0\2\42\2\0\12\42\6\0\u2ba4\41\14\0"+
    "\27\41\4\0\61\41\u2104\0\u016e\41\2\0\152\41\46\0\7\41\14\0"+
    "\5\41\5\0\1\41\1\42\12\41\1\0\15\41\1\0\5\41\1\0"+
    "\1\41\1\0\2\41\1\0\2\41\1\0\154\41\41\0\u016b\41\22\0"+
    "\100\41\2\0\66\41\50\0\15\41\3\0\20\42\20\0\7\42\14\0"+
    "\2\41\30\0\3\41\31\0\1\41\6\0\5\41\1\0\207\41\2\0"+
    "\1\42\4\0\1\41\13\0\12\42\7\0\32\41\4\0\1\41\1\0"+
    "\32\41\13\0\131\41\3\0\6\41\2\0\6\41\2\0\6\41\2\0"+
    "\3\41\3\0\2\41\3\0\2\41\22\0\3\42\4\0\14\41\1\0"+
    "\32\41\1\0\23\41\1\0\2\41\1\0\17\41\2\0\16\41\42\0"+
    "\173\41\105\0\65\41\210\0\1\42\202\0\35\41\3\0\61\41\57\0"+
    "\37\41\21\0\33\41\65\0\36\41\2\0\44\41\4\0\10\41\1\0"+
    "\5\41\52\0\236\41\2\0\12\42\u0356\0\6\41\2\0\1\41\1\0"+
    "\54\41\1\0\2\41\3\0\1\41\2\0\27\41\252\0\26\41\12\0"+
    "\32\41\106\0\70\41\6\0\2\41\100\0\1\41\3\42\1\0\2\42"+
    "\5\0\4\42\4\41\1\0\3\41\1\0\33\41\4\0\3\42\4\0"+
    "\1\42\40\0\35\41\203\0\66\41\12\0\26\41\12\0\23\41\215\0"+
    "\111\41\u03b7\0\3\42\65\41\17\42\37\0\12\42\20\0\3\42\55\41"+
    "\13\42\2\0\1\42\22\0\31\41\7\0\12\42\6\0\3\42\44\41"+
    "\16\42\1\0\12\42\100\0\3\42\60\41\16\42\4\41\13\0\12\42"+
    "\u04a6\0\53\41\15\42\10\0\12\42\u0936\0\u036f\41\221\0\143\41\u0b9d\0"+
    "\u042f\41\u33d1\0\u0239\41\u04c7\0\105\41\13\0\1\41\56\42\20\0\4\42"+
    "\15\41\u4060\0\2\41\u2163\0\5\42\3\0\26\42\2\0\7\42\36\0"+
    "\4\42\224\0\3\42\u01bb\0\125\41\1\0\107\41\1\0\2\41\2\0"+
    "\1\41\2\0\2\41\2\0\4\41\1\0\14\41\1\0\1\41\1\0"+
    "\7\41\1\0\101\41\1\0\4\41\2\0\10\41\1\0\7\41\1\0"+
    "\34\41\1\0\4\41\1\0\5\41\1\0\1\41\3\0\7\41\1\0"+
    "\u0154\41\2\0\31\41\1\0\31\41\1\0\37\41\1\0\31\41\1\0"+
    "\37\41\1\0\31\41\1\0\37\41\1\0\31\41\1\0\37\41\1\0"+
    "\31\41\1\0\10\41\2\0\62\42\u1600\0\4\41\1\0\33\41\1\0"+
    "\2\41\1\0\1\41\2\0\1\41\1\0\12\41\1\0\4\41\1\0"+
    "\1\41\1\0\1\41\6\0\1\41\4\0\1\41\1\0\1\41\1\0"+
    "\1\41\1\0\3\41\1\0\2\41\1\0\1\41\2\0\1\41\1\0"+
    "\1\41\1\0\1\41\1\0\1\41\1\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\4\41\1\0\7\41\1\0\4\41\1\0\4\41\1\0"+
    "\1\41\1\0\12\41\1\0\21\41\5\0\3\41\1\0\5\41\1\0"+
    "\21\41\u1144\0\ua6d7\41\51\0\u1035\41\13\0\336\41\u3fe2\0\u021e\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\42\36\0\140\42\200\0\360\42\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\15\1"+
    "\3\0\10\1\1\6\16\1\1\0\1\7\1\2\1\10"+
    "\1\0\1\6\26\1\1\0\122\1\1\0\16\1\1\6"+
    "\72\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\47\0\47\0\47\0\234"+
    "\0\303\0\352\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u0249\0\47"+
    "\0\u0297\0\47\0\u068d\0\303\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861"+
    "\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1"+
    "\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09"+
    "\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41"+
    "\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79"+
    "\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0444\0\u0f63\0\u0f8a"+
    "\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a"+
    "\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2"+
    "\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da"+
    "\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812"+
    "\0\u1839\0\u1860\0\u1887\0\u18ae\0\47\0\u18d5\0\u18fc\0\u1923"+
    "\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b"+
    "\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93"+
    "\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb"+
    "\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03"+
    "\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b"+
    "\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073"+
    "\0\u209a\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\11\1\13\1\11\1\14\1\15\1\16"+
    "\1\17\3\11\1\20\1\21\1\11\1\22\2\2\10\11"+
    "\1\2\1\23\1\24\52\0\1\3\25\0\1\25\21\0"+
    "\1\26\1\0\1\27\43\0\1\11\5\0\1\11\1\30"+
    "\1\11\1\31\14\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\20\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\3\11\1\32\14\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\3\11\1\33\14\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\1\11\1\34"+
    "\15\11\1\35\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\3\11\1\36\14\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\3\11\1\37\5\11\1\40\6\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\12\11"+
    "\1\41\5\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\17\11\1\42\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\43\1\44\15\11\3\0\11\11"+
    "\3\0\1\11\7\0\1\11\1\45\1\46\1\11\1\47"+
    "\1\50\1\51\2\11\1\52\1\53\1\11\1\54\1\11"+
    "\1\55\1\11\3\0\3\11\1\56\4\11\5\0\43\57"+
    "\1\60\3\57\44\0\1\24\3\0\1\61\45\0\3\26"+
    "\1\62\43\26\2\63\1\0\1\63\1\0\42\63\1\0"+
    "\1\11\5\0\2\11\1\64\15\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\65\15\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\14\11\1\66"+
    "\3\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\6\11\1\67\5\11\1\70\3\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\7\11\1\43\10\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\15\11\1\71"+
    "\2\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\3\11\1\72\14\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\7\11\1\73\10\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\15\11\1\74\2\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\13\11\1\75"+
    "\4\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\7\11\1\74\10\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\10\11\1\74\7\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\3\11\1\76\14\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\7\11\1\77"+
    "\1\100\7\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\3\11\1\101\14\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\3\11\1\102\14\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\20\11\3\0\3\11"+
    "\1\103\5\11\3\0\1\11\1\0\1\11\5\0\11\11"+
    "\1\104\6\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\15\11\1\105\2\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\1\11\1\106\7\11\1\107\6\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\5\11"+
    "\1\110\12\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\111\15\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\17\11\1\112\3\0\11\11\3\0"+
    "\1\11\2\63\1\0\1\63\1\113\42\63\1\0\1\11"+
    "\5\0\4\11\1\114\13\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\5\11\1\115\12\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\3\11\1\116\14\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\3\11"+
    "\1\117\14\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\16\11\1\120\1\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\2\11\1\121\15\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\3\11\1\122\14\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\5\11"+
    "\1\64\12\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\123\2\11\1\124\12\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\1\11\1\125\16\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\16\11"+
    "\1\126\1\11\3\0\4\11\1\127\4\11\3\0\1\11"+
    "\1\0\1\11\5\0\16\11\1\130\1\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\4\11\1\131\13\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\10\11"+
    "\1\100\7\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\14\11\1\132\3\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\7\11\1\133\10\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\1\134\17\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\13\11\1\64"+
    "\4\11\3\0\2\11\1\135\6\11\3\0\1\11\1\0"+
    "\1\11\5\0\15\11\1\135\2\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\4\11\1\136\13\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\3\11\1\137"+
    "\14\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\10\11\1\140\7\11\3\0\11\11\3\0\1\11\2\0"+
    "\1\62\45\0\1\11\5\0\1\11\1\141\16\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\2\11\1\142"+
    "\15\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\16\11\1\143\1\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\15\11\1\144\2\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\11\11\1\145\6\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\20\11\3\0"+
    "\4\11\1\146\4\11\3\0\1\11\1\0\1\11\5\0"+
    "\16\11\1\147\1\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\11\11\1\150\6\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\151\15\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\2\11\1\152"+
    "\15\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\153\1\11\1\154\3\11\1\155\10\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\17\11\1\156"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\3\11"+
    "\1\157\14\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\17\11\1\160\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\3\11\1\161\14\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\14\11\1\162\3\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\3\11\1\163"+
    "\14\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\11\11\1\164\6\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\5\11\1\165\12\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\1\11\1\166\16\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\16\11\1\167"+
    "\1\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\4\11\1\170\13\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\15\11\1\167\2\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\14\11\1\74\3\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\3\11\1\30"+
    "\14\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\5\11\1\171\12\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\20\11\3\0\2\11\1\172\6\11\3\0"+
    "\1\11\1\0\1\11\5\0\16\11\1\173\1\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\12\11\1\174"+
    "\5\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\14\11\1\167\3\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\1\175\1\176\16\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\177\15\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\2\11\1\162"+
    "\15\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\11\11\1\200\6\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\15\11\1\201\2\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\16\11\1\202\1\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\15\11\1\203"+
    "\2\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\2\11\1\167\15\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\2\11\1\204\15\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\12\11\1\205\5\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\10\11\1\64"+
    "\7\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\2\11\1\206\15\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\1\11\1\30\16\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\3\11\1\207\14\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\15\11\1\64"+
    "\2\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\12\11\1\210\5\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\11\11\1\211\6\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\11\11\1\30\6\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\3\11\1\212"+
    "\14\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\2\11\1\213\15\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\20\11\3\0\4\11\1\167\4\11\3\0"+
    "\1\11\1\0\1\11\5\0\16\11\1\64\1\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\4\11\1\214"+
    "\13\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\3\11\1\64\14\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\3\11\1\215\14\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\14\11\1\216\3\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\5\11\1\217"+
    "\12\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\1\220\1\221\1\222\1\11\1\223\4\11\1\224\2\11"+
    "\1\225\1\11\1\226\1\11\3\0\3\11\1\227\5\11"+
    "\3\0\1\11\1\0\1\11\5\0\2\11\1\74\15\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\7\11"+
    "\1\64\10\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\5\11\1\230\12\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\15\11\1\231\2\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\2\11\1\232\15\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\3\11"+
    "\1\233\14\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\234\15\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\11\11\1\235\6\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\20\11\1\0\1\236"+
    "\1\0\11\11\3\0\1\11\1\0\1\11\5\0\11\11"+
    "\1\237\6\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\240\15\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\3\11\1\241\14\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\3\11\1\242\14\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\12\11"+
    "\1\243\5\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\3\11\1\244\14\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\1\11\1\245\3\11\1\246\12\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\5\11"+
    "\1\247\12\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\15\11\1\250\2\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\14\11\1\251\3\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\1\11\1\252\16\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\15\11"+
    "\1\253\2\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\13\11\1\254\4\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\2\11\1\217\15\11\3\0\11\11"+
    "\3\0\1\11\31\0\1\255\16\0\1\11\5\0\4\11"+
    "\1\256\13\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\3\11\1\257\14\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\13\11\1\260\4\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\10\11\1\261\7\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\1\11"+
    "\1\262\16\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\20\11\3\0\2\11\1\143\6\11\3\0\1\11"+
    "\1\0\1\11\5\0\20\11\3\0\6\11\1\257\2\11"+
    "\3\0\1\11\1\0\1\11\5\0\15\11\1\263\2\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\14\11"+
    "\1\145\3\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\1\11\1\64\16\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\1\11\1\230\16\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\20\11\3\0\1\264"+
    "\10\11\3\0\1\11\1\0\1\11\5\0\14\11\1\265"+
    "\3\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\5\11\1\266\12\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\3\11\1\74\14\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\1\11\1\267\16\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\2\11\1\270"+
    "\15\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\13\11\1\271\4\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\20\11\3\0\4\11\1\272\4\11\3\0"+
    "\1\11\1\0\1\11\5\0\14\11\1\273\3\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\4\11\1\274"+
    "\13\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\3\11\1\217\14\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\2\11\1\275\15\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\14\11\1\225\3\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\5\11\1\276"+
    "\12\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\7\11\1\277\10\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\3\11\1\171\14\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\300\1\301\14\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\3\11"+
    "\1\302\14\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\3\11\1\303\5\11\1\304\3\11\1\305\2\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\4\11"+
    "\1\306\13\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\3\11\1\307\14\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\5\11\1\310\12\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\15\11\1\311\2\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\10\11"+
    "\1\312\7\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\14\11\1\313\3\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\4\11\1\64\13\11\3\0\11\11"+
    "\3\0\1\11\1\0\1\11\5\0\5\11\1\314\12\11"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\17\11"+
    "\1\315\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\20\11\3\0\4\11\1\316\4\11\3\0\1\11\1\0"+
    "\1\11\5\0\7\11\1\317\10\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\3\11\1\320\14\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\4\11\1\321"+
    "\13\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\11\11\1\322\6\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\12\11\1\323\5\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\16\11\1\324\1\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\1\11\1\325"+
    "\16\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\15\11\1\326\2\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\4\11\1\327\13\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\3\11\1\330\14\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\20\11\3\0"+
    "\5\11\1\331\3\11\3\0\1\11\1\0\1\11\5\0"+
    "\20\11\3\0\3\11\1\332\5\11\3\0\1\11\1\0"+
    "\1\11\5\0\14\11\1\327\3\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\20\11\3\0\3\11\1\333"+
    "\5\11\3\0\1\11\1\0\1\11\5\0\17\11\1\334"+
    "\3\0\11\11\3\0\1\11\1\0\1\11\5\0\5\11"+
    "\1\30\12\11\3\0\11\11\3\0\1\11\1\0\1\11"+
    "\5\0\1\11\1\335\16\11\3\0\11\11\3\0\1\11"+
    "\1\0\1\11\5\0\17\11\1\336\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\202\15\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\7\11\1\202"+
    "\10\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\12\11\1\337\5\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\2\11\1\340\15\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\3\11\1\341\14\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\3\11\1\342"+
    "\14\11\3\0\11\11\3\0\1\11\1\0\1\11\5\0"+
    "\16\11\1\343\1\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\14\11\1\250\3\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\344\15\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\20\11\3\0"+
    "\1\11\1\345\7\11\3\0\1\11\1\0\1\11\5\0"+
    "\11\11\1\346\6\11\3\0\11\11\3\0\1\11\1\0"+
    "\1\11\5\0\11\11\1\347\6\11\3\0\11\11\3\0"+
    "\1\11\1\0\1\11\5\0\16\11\1\74\1\11\3\0"+
    "\11\11\3\0\1\11\1\0\1\11\5\0\1\74\17\11"+
    "\3\0\11\11\3\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8619];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\15\1\3\0\27\1\1\0"+
    "\1\11\1\1\1\11\1\0\27\1\1\0\122\1\1\0"+
    "\16\1\1\11\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
 public ArrayList<String> Elista = new ArrayList();
    private void Tipo(String dato,Object value){
        switch(dato){
			case "reservada":  Elista.add("<font color=\"blue\">"+value.toString()+"</font>"); break;
			case "comentario": Elista.add("<font color=\"gray\">"+value.toString()+"</font>"); break;
			case "cadena": Elista.add("<font color=\"orange\">"+value.toString()+"</font>"); break;
			case "numero": Elista.add("<font color=\"purple\">"+value.toString()+"</font>"); break;
			default:  Elista.add(value.toString()); break;
		}
    }

class Yytoken {
Yytoken () {}
}	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnaFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2898) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Tipo("otro",yytext());
            } 
            // fall through
          case 9: break;
          case 2: 
            { Tipo("numero",yytext());
            } 
            // fall through
          case 10: break;
          case 3: 
            { Tipo("otro","\n <br>");
            } 
            // fall through
          case 11: break;
          case 4: 
            { Tipo("otro","&#62");
            } 
            // fall through
          case 12: break;
          case 5: 
            { Tipo("otro","&#60");
            } 
            // fall through
          case 13: break;
          case 6: 
            { Tipo("reservada",yytext());
            } 
            // fall through
          case 14: break;
          case 7: 
            { Tipo("cadena",yytext());
            } 
            // fall through
          case 15: break;
          case 8: 
            { Tipo("comentario",yytext());
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
