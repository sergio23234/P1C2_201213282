
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFS.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symf.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\057\004\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\073\006" +
    "\000\002\072\004\000\002\072\005\000\002\072\006\000" +
    "\002\072\006\000\002\072\010\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\006\000\002\072" +
    "\004\000\002\071\005\000\002\071\003\000\002\070\007" +
    "\000\002\070\005\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\066\005\000\002\066\003\000\002\064\005\000\002\064" +
    "\005\000\002\064\004\000\002\064\005\000\002\064\003" +
    "\000\002\063\006\000\002\063\006\000\002\063\005\000" +
    "\002\063\005\000\002\062\003\000\002\062\004\000\002" +
    "\061\003\000\002\061\004\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\004\000\002\060\003\000" +
    "\002\065\003\000\002\065\003\000\002\056\003\000\002" +
    "\056\003\000\002\055\007\000\002\054\007\000\002\053" +
    "\011\000\002\052\006\000\002\051\005\000\002\051\004" +
    "\000\002\051\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\011\000\002\046\006\000\002\046\006\000\002" +
    "\046\006\000\002\046\006\000\002\046\007\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\045\003" +
    "\000\002\045\006\000\002\044\011\000\002\043\004\000" +
    "\002\043\003\000\002\042\010\000\002\042\007\000\002" +
    "\041\006\000\002\040\007\000\002\040\006\000\002\037" +
    "\006\000\002\036\005\000\002\036\003\000\002\034\006" +
    "\000\002\034\005\000\002\034\006\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\031\006\000\002\030\006\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\026\012\000\002\025" +
    "\020\000\002\024\026\000\002\023\022\000\002\022\030" +
    "\000\002\020\030\000\002\021\022\000\002\017\022\000" +
    "\002\016\020\000\002\015\020\000\002\014\020\000\002" +
    "\007\006\000\002\007\005\000\002\006\006\000\002\006" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\005\004\000\002\004\004\000\002" +
    "\004\003\000\002\003\006\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\005\000\002\002\003\000\002\002\003\000\002" +
    "\074\004\000\002\074\003\000\002\050\003\000\002\050" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bf\000\004\034\007\001\002\000\024\027\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe" +
    "\054\ufffe\001\002\000\024\027\071\033\067\034\007\035" +
    "\051\036\073\037\072\040\064\043\057\054\012\001\002" +
    "\000\004\002\047\001\002\000\004\016\010\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\070\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\043\uffec\054\uffec\001\002\000" +
    "\074\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\015\uffbb\017\uffbb\020\044\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\043\uffbb\054\uffbb\001\002\000\070\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\015\uffea\017\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea\033" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\043\uffea\054\uffea" +
    "\001\002\000\070\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\043\uffd0\054\uffd0\001\002\000\022\013\015\016" +
    "\020\054\012\055\011\056\023\057\016\060\013\061\024" +
    "\001\002\000\070\002\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\031\uffed\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\043\uffed\054\uffed\001\002\000\070\002\uffd1\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\043\uffd1\054\uffd1\001" +
    "\002\000\022\013\015\016\020\054\012\055\011\056\023" +
    "\057\016\060\013\061\024\001\002\000\016\004\027\006" +
    "\025\007\032\011\031\013\030\017\026\001\002\000\070" +
    "\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\015\uffd2\017\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\043\uffd2" +
    "\054\uffd2\001\002\000\070\002\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb" +
    "\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\043\uffeb\054\uffeb\001\002\000\070\002" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\015\uffe9\017\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\043\uffe9\054" +
    "\uffe9\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\004\023" +
    "\037\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\022" +
    "\013\015\016\020\054\012\055\011\056\023\057\016\060" +
    "\013\061\024\001\002\000\070\002\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\043\uffd6\054\uffd6\001\002\000\070" +
    "\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\043\uffd5" +
    "\054\uffd5\001\002\000\070\002\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\043\uffd8\054\uffd8\001\002\000\070\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\015\uffd9\017\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\043\uffd9\054" +
    "\uffd9\001\002\000\024\027\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\043\uffcc\054\uffcc\001\002\000" +
    "\070\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\015\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043" +
    "\uffd7\054\uffd7\001\002\000\016\004\027\006\025\007\032" +
    "\011\031\013\030\017\042\001\002\000\070\002\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\015\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\043\uffd4\054\uffd4\001" +
    "\002\000\070\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\017\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\043\uffd3\054\uffd3\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\021\046\001\002\000\072\002\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba" +
    "\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\043\uffba\054\uffba\001\002\000" +
    "\004\002\001\001\002\000\024\002\uff70\027\uff70\033\uff70" +
    "\035\uff70\036\uff70\037\uff70\040\uff70\043\uff70\054\uff70\001" +
    "\002\000\004\023\u01c1\001\002\000\026\002\uff89\015\uff89" +
    "\027\uff89\033\uff89\035\uff89\036\uff89\037\uff89\040\uff89\043" +
    "\uff89\054\uff89\001\002\000\026\002\uff84\015\uff84\027\uff84" +
    "\033\uff84\035\uff84\036\uff84\037\uff84\040\uff84\043\uff84\054" +
    "\uff84\001\002\000\020\004\366\005\367\006\364\007\372" +
    "\010\371\013\370\030\365\001\002\000\024\002\ufffd\027" +
    "\071\033\067\035\051\036\073\037\072\040\064\043\057" +
    "\054\012\001\002\000\004\002\000\001\002\000\004\054" +
    "\347\001\002\000\030\002\uffc7\015\uffc7\027\uffc7\033\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\043\uffc7\054\uffc7\062" +
    "\uffc7\001\002\000\026\002\uff86\015\uff86\027\uff86\033\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\043\uff86\054\uff86\001" +
    "\002\000\026\002\uff85\015\uff85\027\uff85\033\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\043\uff85\054\uff85\001\002\000" +
    "\024\002\uff72\027\uff72\033\uff72\035\uff72\036\uff72\037\uff72" +
    "\040\uff72\043\uff72\054\uff72\001\002\000\004\016\324\001" +
    "\002\000\024\002\uff71\027\uff71\033\uff71\035\uff71\036\uff71" +
    "\037\uff71\040\uff71\043\uff71\054\uff71\001\002\000\026\002" +
    "\uff88\015\uff88\027\uff88\033\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\043\uff88\054\uff88\001\002\000\004\016\320\001" +
    "\002\000\024\027\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\043\uffff\054\uffff\001\002\000\004\054" +
    "\150\001\002\000\004\016\107\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\030\002\uff87\015\uff87\027\uff87\033\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\043\uff87\054\uff87\062" +
    "\075\001\002\000\006\014\100\037\072\001\002\000\030" +
    "\002\uffc8\015\uffc8\027\uffc8\033\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\043\uffc8\054\uffc8\062\uffc8\001\002\000\030" +
    "\002\uffc9\015\uffc9\027\uffc9\033\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\043\uffc9\054\uffc9\062\uffc9\001\002\000\020" +
    "\027\071\033\067\035\051\036\073\037\072\040\064\054" +
    "\012\001\002\000\022\015\103\027\071\033\067\035\051" +
    "\036\073\037\072\040\064\054\012\001\002\000\022\015" +
    "\uff80\027\uff80\033\uff80\035\uff80\036\uff80\037\uff80\040\uff80" +
    "\054\uff80\001\002\000\030\002\uffca\015\uffca\027\uffca\033" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\043\uffca\054\uffca" +
    "\062\uffca\001\002\000\022\015\uff81\027\uff81\033\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\054\uff81\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\023\106\001" +
    "\002\000\026\002\uff83\015\uff83\027\uff83\033\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\043\uff83\054\uff83\001\002\000" +
    "\024\013\015\016\113\024\111\054\012\055\011\056\023" +
    "\057\016\060\013\061\024\001\002\000\042\002\uffe2\015" +
    "\uffe2\017\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\043" +
    "\uffe2\054\uffe2\001\002\000\024\013\015\016\113\024\111" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\010\017\142\025\137\026\136\001\002\000\024" +
    "\013\015\016\113\024\111\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\024\004\027\005\121" +
    "\006\025\007\032\010\122\011\031\012\120\013\030\024" +
    "\115\001\002\000\004\010\131\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\024\010" +
    "\126\013\uffdd\016\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\001\002\000\024\010\125\013\uffdb\016" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\001\002\000\004\010\123\001\002\000\022\013\015\016" +
    "\020\054\012\055\011\056\023\057\016\060\013\061\024" +
    "\001\002\000\054\002\uffe1\004\027\006\025\007\032\011" +
    "\031\013\030\015\uffe1\017\uffe1\022\uffe1\023\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\043\uffe1\054\uffe1\001\002\000\022\013\uffda" +
    "\016\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\001\002\000\022\013\uffdc\016\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002\000\054\002" +
    "\uffde\004\027\006\025\007\032\011\031\013\030\015\uffde" +
    "\017\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde\032" +
    "\uffde\033\uffde\035\uffde\036\uffde\037\uffde\040\uffde\043\uffde" +
    "\054\uffde\001\002\000\054\002\uffdf\004\027\006\025\007" +
    "\032\011\031\013\030\015\uffdf\017\uffdf\022\uffdf\023\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\032\uffdf\033\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\043\uffdf\054\uffdf\001\002\000\022" +
    "\013\015\016\020\054\012\055\011\056\023\057\016\060" +
    "\013\061\024\001\002\000\054\002\uffe0\004\027\006\025" +
    "\007\032\011\031\013\030\015\uffe0\017\uffe0\022\uffe0\023" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\043\uffe0\054\uffe0\001\002\000" +
    "\010\017\135\025\137\026\136\001\002\000\026\004\027" +
    "\005\121\006\025\007\032\010\122\011\031\012\120\013" +
    "\030\017\042\024\115\001\002\000\042\002\uffe3\015\uffe3" +
    "\017\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\043\uffe3" +
    "\054\uffe3\001\002\000\024\013\015\016\113\024\111\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\024\013\015\016\113\024\111\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\042\002\uffe6" +
    "\015\uffe6\017\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\043\uffe6\054\uffe6\001\002\000\042\002\uffe5\015\uffe5\017" +
    "\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\043\uffe5\054" +
    "\uffe5\001\002\000\004\014\143\001\002\000\020\027\071" +
    "\033\067\035\051\036\073\037\072\040\064\054\012\001" +
    "\002\000\022\015\145\027\071\033\067\035\051\036\073" +
    "\037\072\040\064\054\012\001\002\000\030\002\uffcb\015" +
    "\uffcb\027\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\043\uffcb\054\uffcb\062\uffcb\001\002\000\042\002\uffe4\015" +
    "\uffe4\017\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\043" +
    "\uffe4\054\uffe4\001\002\000\006\010\153\031\151\001\002" +
    "\000\006\010\uffe7\031\uffe7\001\002\000\004\054\317\001" +
    "\002\000\004\023\316\001\002\000\072\013\015\014\167" +
    "\016\113\020\165\024\111\044\201\045\155\047\203\050" +
    "\160\051\174\052\154\053\157\054\211\055\011\056\023" +
    "\057\016\060\013\061\024\063\173\064\156\065\210\066" +
    "\170\070\166\071\162\072\172\073\206\074\202\102\205" +
    "\001\002\000\004\016\uffa7\001\002\000\004\016\uffa1\001" +
    "\002\000\004\016\uffa5\001\002\000\004\016\uffa8\001\002" +
    "\000\004\016\uff9f\001\002\000\004\023\ufff6\001\002\000" +
    "\004\016\uff9a\001\002\000\004\023\ufff2\001\002\000\012" +
    "\022\312\023\uffce\025\137\026\136\001\002\000\024\013" +
    "\015\016\020\021\306\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\004\016\uff9b\001\002\000" +
    "\004\054\274\001\002\000\004\016\uffa3\001\002\000\004" +
    "\023\ufff5\001\002\000\004\016\uff99\001\002\000\004\016" +
    "\uffa6\001\002\000\004\016\uff9e\001\002\000\004\016\271" +
    "\001\002\000\054\002\uffcf\004\027\005\121\006\025\007" +
    "\032\010\122\011\031\012\120\013\030\015\uffcf\023\uffcf" +
    "\024\115\027\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\043\uffcf\054\uffcf\001\002\000\004\023\ufff4" +
    "\001\002\000\004\016\266\001\002\000\004\016\uffa2\001" +
    "\002\000\004\016\251\001\002\000\004\016\uffa0\001\002" +
    "\000\004\016\246\001\002\000\004\016\223\001\002\000" +
    "\004\016\214\001\002\000\004\023\ufffb\001\002\000\004" +
    "\016\uffa4\001\002\000\032\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\020\044\023\uffbb" +
    "\024\uffbb\030\212\001\002\000\036\044\201\045\155\047" +
    "\203\050\160\051\174\052\154\053\157\063\173\064\156" +
    "\065\210\066\170\070\166\071\162\072\172\001\002\000" +
    "\004\023\ufff3\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\016\004\027\006\025\007\032\011\031\013\030\031\216" +
    "\001\002\000\022\013\015\016\020\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\016\004\027" +
    "\006\025\007\032\011\031\013\030\031\220\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\017\222\001\002\000\004\023\uff98" +
    "\001\002\000\022\013\015\016\020\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\016\004\027" +
    "\006\025\007\032\011\031\013\030\031\225\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\031\227\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\016\004\027\006\025\007\032\011\031" +
    "\013\030\031\231\001\002\000\022\013\015\016\020\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\016\004\027\006\025\007\032\011\031\013\030\031" +
    "\233\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\016\004" +
    "\027\006\025\007\032\011\031\013\030\031\235\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\016\004\027\006\025" +
    "\007\032\011\031\013\030\031\237\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\031\241\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\031\243\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\017\245\001" +
    "\002\000\004\023\uff96\001\002\000\004\054\247\001\002" +
    "\000\004\017\250\001\002\000\030\002\uffae\015\uffae\023" +
    "\uffae\027\uffae\033\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\043\uffae\054\uffae\001\002\000\022\013\015\016\020\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\016\004\027\006\025\007\032\011\031\013\030\031" +
    "\253\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\016\004" +
    "\027\006\025\007\032\011\031\013\030\031\255\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\016\004\027\006\025" +
    "\007\032\011\031\013\030\031\257\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\031\261\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\031\263\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\017\265\001" +
    "\002\000\004\023\uff97\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\017\270\001\002\000\030\002\uffac\015\uffac\023\uffac\027" +
    "\uffac\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac\043\uffac" +
    "\054\uffac\001\002\000\004\017\272\001\002\000\030\002" +
    "\uffad\015\uffad\023\uffad\027\uffad\033\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\043\uffad\054\uffad\001\002\000\006\015" +
    "\300\031\277\001\002\000\004\032\275\001\002\000\004" +
    "\055\276\001\002\000\006\015\uffee\031\uffee\001\002\000" +
    "\004\054\301\001\002\000\004\023\ufff8\001\002\000\004" +
    "\032\302\001\002\000\004\055\303\001\002\000\006\015" +
    "\uffef\031\uffef\001\002\000\006\021\310\031\307\001\002" +
    "\000\020\004\027\006\025\007\032\011\031\013\030\021" +
    "\ufff0\031\ufff0\001\002\000\004\023\ufffa\001\002\000\022" +
    "\013\015\016\020\054\012\055\011\056\023\057\016\060" +
    "\013\061\024\001\002\000\004\023\ufff9\001\002\000\020" +
    "\004\027\006\025\007\032\011\031\013\030\021\ufff1\031" +
    "\ufff1\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\016\004" +
    "\027\006\025\007\032\011\031\013\030\032\314\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\016\004\027\006\025" +
    "\007\032\011\031\013\030\023\ufff7\001\002\000\026\002" +
    "\ufffc\015\ufffc\027\ufffc\033\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\043\ufffc\054\ufffc\001\002\000\006\010\uffe8\031" +
    "\uffe8\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\016\004" +
    "\027\006\025\007\032\011\031\013\030\017\322\001\002" +
    "\000\004\023\323\001\002\000\026\002\uffcd\015\uffcd\027" +
    "\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd" +
    "\054\uffcd\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\017\326\001" +
    "\002\000\004\014\327\001\002\000\006\041\332\042\331" +
    "\001\002\000\010\015\uffb7\041\uffb7\042\uffb7\001\002\000" +
    "\004\032\343\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\010\015\335\041\332\042\331\001\002\000\010\015\uffb8" +
    "\041\uffb8\042\uffb8\001\002\000\026\002\uffb9\015\uffb9\027" +
    "\uffb9\033\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\043\uffb9" +
    "\054\uffb9\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\032\337\001\002\000\004\014\340\001\002" +
    "\000\020\027\071\033\067\035\051\036\073\037\072\040" +
    "\064\054\012\001\002\000\022\015\342\027\071\033\067" +
    "\035\051\036\073\037\072\040\064\054\012\001\002\000" +
    "\010\015\uffb6\041\uffb6\042\uffb6\001\002\000\004\014\344" +
    "\001\002\000\020\027\071\033\067\035\051\036\073\037" +
    "\072\040\064\054\012\001\002\000\022\015\346\027\071" +
    "\033\067\035\051\036\073\037\072\040\064\054\012\001" +
    "\002\000\010\015\uffb5\041\uffb5\042\uffb5\001\002\000\004" +
    "\016\350\001\002\000\004\017\351\001\002\000\004\014" +
    "\360\001\002\000\024\002\uffb4\027\uffb4\033\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\043\uffb4\054\uffb4\001\002\000" +
    "\004\017\354\001\002\000\004\014\355\001\002\000\020" +
    "\027\071\033\067\035\051\036\073\037\072\040\064\054" +
    "\012\001\002\000\022\015\357\027\071\033\067\035\051" +
    "\036\073\037\072\040\064\054\012\001\002\000\024\002" +
    "\uffb3\027\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\043\uffb3\054\uffb3\001\002\000\020\027\071\033\067\035" +
    "\051\036\073\037\072\040\064\054\012\001\002\000\022" +
    "\015\362\027\071\033\067\035\051\036\073\037\072\040" +
    "\064\054\012\001\002\000\024\002\uffb2\027\uffb2\033\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\043\uffb2\054\uffb2\001" +
    "\002\000\024\002\uff73\027\uff73\033\uff73\035\uff73\036\uff73" +
    "\037\uff73\040\uff73\043\uff73\054\uff73\001\002\000\004\010" +
    "\u01bf\001\002\000\030\046\u0125\075\u012f\076\u0132\077\u012e" +
    "\100\u0126\101\u0134\103\u0133\104\u0130\105\u012b\107\u0131\110" +
    "\u0121\001\002\000\006\004\u011c\010\u011d\001\002\000\004" +
    "\010\u011a\001\002\000\004\013\u0119\001\002\000\030\013" +
    "\015\016\113\024\111\046\u0100\054\375\055\011\056\023" +
    "\057\016\060\013\061\024\067\u0103\001\002\000\004\010" +
    "\373\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\040\002" +
    "\uffc2\004\027\006\025\007\032\011\031\013\030\015\uffc2" +
    "\027\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\043" +
    "\uffc2\054\uffc2\001\002\000\056\002\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015" +
    "\uffbb\016\u0111\020\044\024\uffbb\027\uffbb\030\u0112\033\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb\054\uffbb\001" +
    "\002\000\026\002\uffbc\015\uffbc\027\uffbc\033\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\043\uffbc\054\uffbc\001\002\000" +
    "\026\002\uffaa\015\uffaa\027\uffaa\033\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\043\uffaa\054\uffaa\001\002\000\004\016" +
    "\u010e\001\002\000\026\002\uffab\015\uffab\027\uffab\033\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\043\uffab\054\uffab\001" +
    "\002\000\050\002\uffc6\004\027\005\121\006\025\007\032" +
    "\010\122\011\031\012\120\013\030\015\uffc6\024\115\027" +
    "\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043\uffc6" +
    "\054\uffc6\001\002\000\004\016\u010b\001\002\000\026\002" +
    "\uffa9\015\uffa9\027\uffa9\033\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\043\uffa9\054\uffa9\001\002\000\034\002\uffc5\015" +
    "\uffc5\022\u0106\025\137\026\136\027\uffc5\033\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\043\uffc5\054\uffc5\001\002\000" +
    "\024\013\015\016\113\024\111\054\012\055\011\056\023" +
    "\057\016\060\013\061\024\001\002\000\034\002\uffce\015" +
    "\uffce\025\137\026\136\027\uffce\032\uffce\033\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\043\uffce\054\uffce\001\002\000" +
    "\004\032\u0109\001\002\000\024\013\015\016\113\024\111" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\026\002\uffc4\015\uffc4\027\uffc4\033\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\043\uffc4\054\uffc4\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\017\u010d\001\002\000\026\002\uff9d" +
    "\015\uff9d\027\uff9d\033\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\043\uff9d\054\uff9d\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\017\u0110\001\002\000\026\002\uff9c\015\uff9c\027\uff9c\033" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\043\uff9c\054\uff9c" +
    "\001\002\000\022\013\015\016\020\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\036\044\201" +
    "\045\155\047\203\050\160\051\174\052\154\053\157\063" +
    "\173\064\156\065\210\066\170\070\166\071\162\072\172" +
    "\001\002\000\026\002\uffbf\015\uffbf\027\uffbf\033\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\043\uffbf\054\uffbf\001\002" +
    "\000\006\017\u0117\031\u0116\001\002\000\020\004\027\006" +
    "\025\007\032\011\031\013\030\017\uffaf\031\uffaf\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\030\002\uffb1\015\uffb1" +
    "\017\uffb1\027\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\043\uffb1\054\uffb1\001\002\000\020\004\027\006\025" +
    "\007\032\011\031\013\030\017\uffb0\031\uffb0\001\002\000" +
    "\026\002\uffbd\015\uffbd\027\uffbd\033\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\043\uffbd\054\uffbd\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\040\002\uffc0\004\027\006\025\007" +
    "\032\011\031\013\030\015\uffc0\027\uffc0\033\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\043\uffc0\054\uffc0\001\002\000" +
    "\026\002\uffbe\015\uffbe\027\uffbe\033\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\043\uffbe\054\uffbe\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\040\002\uffc1\004\027\006\025\007" +
    "\032\011\031\013\030\015\uffc1\027\uffc1\033\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\043\uffc1\054\uffc1\001\002\000" +
    "\004\023\uff7e\001\002\000\004\023\uff7a\001\002\000\004" +
    "\016\u01bb\001\002\000\004\023\uff75\001\002\000\004\023" +
    "\uff7b\001\002\000\004\023\u01ba\001\002\000\004\016\u01b8" +
    "\001\002\000\004\016\u01a9\001\002\000\004\023\uff79\001" +
    "\002\000\004\023\uff7d\001\002\000\004\023\uff7c\001\002" +
    "\000\004\023\uff74\001\002\000\004\016\u019c\001\002\000" +
    "\004\023\uff77\001\002\000\004\023\uff78\001\002\000\004" +
    "\016\u0187\001\002\000\004\016\u0178\001\002\000\004\016" +
    "\u016b\001\002\000\004\016\u0166\001\002\000\004\016\u0151" +
    "\001\002\000\004\016\u0144\001\002\000\004\016\u0135\001" +
    "\002\000\022\013\015\016\020\054\012\055\011\056\023" +
    "\057\016\060\013\061\024\001\002\000\016\004\027\006" +
    "\025\007\032\011\031\013\030\031\u0137\001\002\000\022" +
    "\013\015\016\020\054\012\055\011\056\023\057\016\060" +
    "\013\061\024\001\002\000\016\004\027\006\025\007\032" +
    "\011\031\013\030\031\u0139\001\002\000\022\013\015\016" +
    "\020\054\012\055\011\056\023\057\016\060\013\061\024" +
    "\001\002\000\016\004\027\006\025\007\032\011\031\013" +
    "\030\031\u013b\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\016\004\027\006\025\007\032\011\031\013\030\031\u013d" +
    "\001\002\000\022\013\015\016\020\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\016\004\027" +
    "\006\025\007\032\011\031\013\030\031\u013f\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\031\u0141\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\016\004\027\006\025\007\032\011\031" +
    "\013\030\017\u0143\001\002\000\004\023\uff91\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\031\u0146\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\016\004\027\006\025\007\032\011\031" +
    "\013\030\031\u0148\001\002\000\022\013\015\016\020\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\016\004\027\006\025\007\032\011\031\013\030\031" +
    "\u014a\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\016\004" +
    "\027\006\025\007\032\011\031\013\030\031\u014c\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\016\004\027\006\025" +
    "\007\032\011\031\013\030\031\u014e\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\017\u0150\001\002\000\004\023\uff90\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\016\004\027\006\025" +
    "\007\032\011\031\013\030\031\u0153\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\031\u0155\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\031\u0157\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\031\u0159\001" +
    "\002\000\022\013\015\016\020\054\012\055\011\056\023" +
    "\057\016\060\013\061\024\001\002\000\016\004\027\006" +
    "\025\007\032\011\031\013\030\031\u015b\001\002\000\022" +
    "\013\015\016\020\054\012\055\011\056\023\057\016\060" +
    "\013\061\024\001\002\000\016\004\027\006\025\007\032" +
    "\011\031\013\030\031\u015d\001\002\000\022\013\015\016" +
    "\020\054\012\055\011\056\023\057\016\060\013\061\024" +
    "\001\002\000\016\004\027\006\025\007\032\011\031\013" +
    "\030\031\u015f\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\016\004\027\006\025\007\032\011\031\013\030\031\u0161" +
    "\001\002\000\022\013\015\016\020\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\016\004\027" +
    "\006\025\007\032\011\031\013\030\031\u0163\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\017\u0165\001\002\000\004\023\uff94" +
    "\001\002\000\006\017\u0168\054\u0169\001\002\000\004\017" +
    "\u016a\001\002\000\004\023\uff8c\001\002\000\004\016\u0111" +
    "\001\002\000\004\023\uff8d\001\002\000\022\013\015\016" +
    "\020\054\012\055\011\056\023\057\016\060\013\061\024" +
    "\001\002\000\016\004\027\006\025\007\032\011\031\013" +
    "\030\031\u016d\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\016\004\027\006\025\007\032\011\031\013\030\031\u016f" +
    "\001\002\000\022\013\015\016\020\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\016\004\027" +
    "\006\025\007\032\011\031\013\030\031\u0171\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\031\u0173\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\016\004\027\006\025\007\032\011\031" +
    "\013\030\031\u0175\001\002\000\022\013\015\016\020\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\016\004\027\006\025\007\032\011\031\013\030\017" +
    "\u0177\001\002\000\004\023\uff8e\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\016\004\027\006\025\007\032\011\031" +
    "\013\030\031\u017a\001\002\000\022\013\015\016\020\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\016\004\027\006\025\007\032\011\031\013\030\031" +
    "\u017c\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\016\004" +
    "\027\006\025\007\032\011\031\013\030\031\u017e\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\016\004\027\006\025" +
    "\007\032\011\031\013\030\031\u0180\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\031\u0182\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\031\u0184\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\017\u0186\001" +
    "\002\000\004\023\uff95\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\031\u0189\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\031\u018b\001" +
    "\002\000\022\013\015\016\020\054\012\055\011\056\023" +
    "\057\016\060\013\061\024\001\002\000\016\004\027\006" +
    "\025\007\032\011\031\013\030\031\u018d\001\002\000\022" +
    "\013\015\016\020\054\012\055\011\056\023\057\016\060" +
    "\013\061\024\001\002\000\016\004\027\006\025\007\032" +
    "\011\031\013\030\031\u018f\001\002\000\022\013\015\016" +
    "\020\054\012\055\011\056\023\057\016\060\013\061\024" +
    "\001\002\000\016\004\027\006\025\007\032\011\031\013" +
    "\030\031\u0191\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\016\004\027\006\025\007\032\011\031\013\030\031\u0193" +
    "\001\002\000\022\013\015\016\020\054\012\055\011\056" +
    "\023\057\016\060\013\061\024\001\002\000\016\004\027" +
    "\006\025\007\032\011\031\013\030\031\u0195\001\002\000" +
    "\022\013\015\016\020\054\012\055\011\056\023\057\016" +
    "\060\013\061\024\001\002\000\016\004\027\006\025\007" +
    "\032\011\031\013\030\031\u0197\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\016\004\027\006\025\007\032\011\031" +
    "\013\030\031\u0199\001\002\000\022\013\015\016\020\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\016\004\027\006\025\007\032\011\031\013\030\017" +
    "\u019b\001\002\000\004\023\uff93\001\002\000\022\013\015" +
    "\016\020\054\012\055\011\056\023\057\016\060\013\061" +
    "\024\001\002\000\016\004\027\006\025\007\032\011\031" +
    "\013\030\031\u019e\001\002\000\022\013\015\016\020\054" +
    "\012\055\011\056\023\057\016\060\013\061\024\001\002" +
    "\000\016\004\027\006\025\007\032\011\031\013\030\031" +
    "\u01a0\001\002\000\022\013\015\016\020\054\012\055\011" +
    "\056\023\057\016\060\013\061\024\001\002\000\016\004" +
    "\027\006\025\007\032\011\031\013\030\031\u01a2\001\002" +
    "\000\022\013\015\016\020\054\012\055\011\056\023\057" +
    "\016\060\013\061\024\001\002\000\016\004\027\006\025" +
    "\007\032\011\031\013\030\031\u01a4\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\031\u01a6\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\017\u01a8\001\002\000\004\023\uff8f\001\002\000\022\013" +
    "\015\016\020\054\012\055\011\056\023\057\016\060\013" +
    "\061\024\001\002\000\016\004\027\006\025\007\032\011" +
    "\031\013\030\031\u01ab\001\002\000\022\013\015\016\020" +
    "\054\012\055\011\056\023\057\016\060\013\061\024\001" +
    "\002\000\016\004\027\006\025\007\032\011\031\013\030" +
    "\031\u01ad\001\002\000\022\013\015\016\020\054\012\055" +
    "\011\056\023\057\016\060\013\061\024\001\002\000\016" +
    "\004\027\006\025\007\032\011\031\013\030\031\u01af\001" +
    "\002\000\022\013\015\016\020\054\012\055\011\056\023" +
    "\057\016\060\013\061\024\001\002\000\016\004\027\006" +
    "\025\007\032\011\031\013\030\031\u01b1\001\002\000\022" +
    "\013\015\016\020\054\012\055\011\056\023\057\016\060" +
    "\013\061\024\001\002\000\016\004\027\006\025\007\032" +
    "\011\031\013\030\031\u01b3\001\002\000\022\013\015\016" +
    "\020\054\012\055\011\056\023\057\016\060\013\061\024" +
    "\001\002\000\016\004\027\006\025\007\032\011\031\013" +
    "\030\031\u01b5\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\016\004\027\006\025\007\032\011\031\013\030\017\u01b7" +
    "\001\002\000\004\023\uff92\001\002\000\004\017\u01b9\001" +
    "\002\000\004\023\uff76\001\002\000\026\002\uff7f\015\uff7f" +
    "\027\uff7f\033\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\043" +
    "\uff7f\054\uff7f\001\002\000\006\017\u01bd\054\u0169\001\002" +
    "\000\004\017\u01be\001\002\000\004\023\uff8a\001\002\000" +
    "\004\023\uff8b\001\002\000\022\013\015\016\020\054\012" +
    "\055\011\056\023\057\016\060\013\061\024\001\002\000" +
    "\040\002\uffc3\004\027\006\025\007\032\011\031\013\030" +
    "\015\uffc3\027\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\043\uffc3\054\uffc3\001\002\000\026\002\uff82\015\uff82" +
    "\027\uff82\033\uff82\035\uff82\036\uff82\037\uff82\040\uff82\043" +
    "\uff82\054\uff82\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bf\000\010\011\004\054\003\057\005\001\001\000" +
    "\002\001\001\000\036\003\052\005\064\012\055\041\047" +
    "\044\060\045\053\046\061\050\062\051\073\053\057\054" +
    "\067\055\065\073\051\074\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\013\060\020\065\021\067" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\045\013\060\042\065" +
    "\021\067\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\045\013\060\040\065\021\067\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\045\013\060\037\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\035\065\021" +
    "\067\016\001\001\000\012\045\013\060\034\065\021\067" +
    "\016\001\001\000\012\045\013\060\033\065\021\067\016" +
    "\001\001\000\012\045\013\060\032\065\021\067\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\045\013\060\044\065\021\067\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\052\005\064\041\047\044\060" +
    "\045\053\046\061\050\362\051\073\053\057\055\065\073" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\146\001" +
    "\001\000\002\001\001\000\012\045\013\060\104\065\021" +
    "\067\016\001\001\000\004\052\075\001\001\000\004\053" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\052\004\100\005\101\044\060\045\053\046\061\051" +
    "\073\053\057\055\065\073\051\001\001\000\024\003\052" +
    "\005\103\044\060\045\053\046\061\051\073\053\057\055" +
    "\065\073\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\045\013\060\113\063\107\064\111\065\021\067\016" +
    "\001\001\000\002\001\001\000\016\045\013\060\113\063" +
    "\107\064\145\065\021\067\016\001\001\000\002\001\001" +
    "\000\016\045\013\060\133\063\107\064\132\065\021\067" +
    "\016\001\001\000\006\061\116\062\115\001\001\000\002" +
    "\001\001\000\012\045\013\060\127\065\021\067\016\001" +
    "\001\000\012\045\013\060\126\065\021\067\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\013\060\123\065\021\067\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\013\060\131\065\021" +
    "\067\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\116\062\115\001\001\000\002\001\001\000\016" +
    "\045\013\060\113\063\107\064\140\065\021\067\016\001" +
    "\001\000\016\045\013\060\113\063\107\064\137\065\021" +
    "\067\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\052\004\143\005\101\044\060" +
    "\045\053\046\061\051\073\053\057\055\065\073\051\001" +
    "\001\000\024\003\052\005\103\044\060\045\053\046\061" +
    "\051\073\053\057\055\065\073\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\024" +
    "\176\025\170\026\160\027\177\032\174\033\203\034\162" +
    "\045\013\056\206\060\175\063\107\064\163\065\021\067" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\045\013\060\304\065\021\067\016\071\303\001" +
    "\001\000\002\001\001\000\004\070\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\116" +
    "\062\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\177" +
    "\032\174\033\203\034\212\001\001\000\002\001\001\000" +
    "\012\045\013\060\214\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\216\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\220\065\021" +
    "\067\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\013\060\223\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\225\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\227\065\021" +
    "\067\016\001\001\000\002\001\001\000\012\045\013\060" +
    "\231\065\021\067\016\001\001\000\002\001\001\000\012" +
    "\045\013\060\233\065\021\067\016\001\001\000\002\001" +
    "\001\000\012\045\013\060\235\065\021\067\016\001\001" +
    "\000\002\001\001\000\012\045\013\060\237\065\021\067" +
    "\016\001\001\000\002\001\001\000\012\045\013\060\241" +
    "\065\021\067\016\001\001\000\002\001\001\000\012\045" +
    "\013\060\243\065\021\067\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\045\013\060\251\065\021\067\016" +
    "\001\001\000\002\001\001\000\012\045\013\060\253\065" +
    "\021\067\016\001\001\000\002\001\001\000\012\045\013" +
    "\060\255\065\021\067\016\001\001\000\002\001\001\000" +
    "\012\045\013\060\257\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\261\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\263\065\021" +
    "\067\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\013\060\266\065\021\067\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\045" +
    "\013\060\310\065\021\067\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\013\060\312\065\021\067" +
    "\016\001\001\000\002\001\001\000\012\045\013\060\314" +
    "\065\021\067\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\013\060\320\065\021" +
    "\067\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\045\013\060\324\065\021\067\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\327\043\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\045\013\060\335\065\021\067\016\001\001\000" +
    "\004\042\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\052\004" +
    "\340\005\101\044\060\045\053\046\061\051\073\053\057" +
    "\055\065\073\051\001\001\000\024\003\052\005\103\044" +
    "\060\045\053\046\061\051\073\053\057\055\065\073\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\052\004\344\005\101\044\060\045\053\046\061\051\073" +
    "\053\057\055\065\073\051\001\001\000\024\003\052\005" +
    "\103\044\060\045\053\046\061\051\073\053\057\055\065" +
    "\073\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\352\040\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\052\004\355\005\101\044\060\045\053\046\061\051\073" +
    "\053\057\055\065\073\051\001\001\000\024\003\052\005" +
    "\103\044\060\045\053\046\061\051\073\053\057\055\065" +
    "\073\051\001\001\000\002\001\001\000\026\003\052\004" +
    "\360\005\101\044\060\045\053\046\061\051\073\053\057" +
    "\055\065\073\051\001\001\000\024\003\052\005\103\044" +
    "\060\045\053\046\061\051\073\053\057\055\065\073\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\u0123\006\u0129\007\u0121\014\u012b\015\u012c" +
    "\016\u0126\017\u011f\020\u0128\021\u0122\022\u0127\023\u011e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\030\376\031\u0100\035\375\037\u0103\045\013\060" +
    "\u0101\063\107\064\u0104\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\373\065\021\067\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\116\062\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\045\013\056\u0107\060" +
    "\175\063\107\064\u0106\065\021\067\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\045\013\056\u0109\060" +
    "\175\063\107\064\u0106\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\u010b\065\021\067\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\045\013" +
    "\060\u010e\065\021\067\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\036\u0113\045\013\060\u0114\065\021" +
    "\067\016\001\001\000\012\027\177\032\174\033\203\034" +
    "\u0112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\045\013\060\u0117\065\021\067\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\045\013\060\u011a\065\021\067\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\045\013\060\u011d" +
    "\065\021\067\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\045\013\060\u0135" +
    "\065\021\067\016\001\001\000\002\001\001\000\012\045" +
    "\013\060\u0137\065\021\067\016\001\001\000\002\001\001" +
    "\000\012\045\013\060\u0139\065\021\067\016\001\001\000" +
    "\002\001\001\000\012\045\013\060\u013b\065\021\067\016" +
    "\001\001\000\002\001\001\000\012\045\013\060\u013d\065" +
    "\021\067\016\001\001\000\002\001\001\000\012\045\013" +
    "\060\u013f\065\021\067\016\001\001\000\002\001\001\000" +
    "\012\045\013\060\u0141\065\021\067\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\045\013\060\u0144\065" +
    "\021\067\016\001\001\000\002\001\001\000\012\045\013" +
    "\060\u0146\065\021\067\016\001\001\000\002\001\001\000" +
    "\012\045\013\060\u0148\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\u014a\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\u014c\065\021" +
    "\067\016\001\001\000\002\001\001\000\012\045\013\060" +
    "\u014e\065\021\067\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\045\013\060\u0151\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\u0153\065\021" +
    "\067\016\001\001\000\002\001\001\000\012\045\013\060" +
    "\u0155\065\021\067\016\001\001\000\002\001\001\000\012" +
    "\045\013\060\u0157\065\021\067\016\001\001\000\002\001" +
    "\001\000\012\045\013\060\u0159\065\021\067\016\001\001" +
    "\000\002\001\001\000\012\045\013\060\u015b\065\021\067" +
    "\016\001\001\000\002\001\001\000\012\045\013\060\u015d" +
    "\065\021\067\016\001\001\000\002\001\001\000\012\045" +
    "\013\060\u015f\065\021\067\016\001\001\000\002\001\001" +
    "\000\012\045\013\060\u0161\065\021\067\016\001\001\000" +
    "\002\001\001\000\012\045\013\060\u0163\065\021\067\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u0166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\045\013\060\u016b\065" +
    "\021\067\016\001\001\000\002\001\001\000\012\045\013" +
    "\060\u016d\065\021\067\016\001\001\000\002\001\001\000" +
    "\012\045\013\060\u016f\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\u0171\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\u0173\065\021" +
    "\067\016\001\001\000\002\001\001\000\012\045\013\060" +
    "\u0175\065\021\067\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\045\013\060\u0178\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\u017a\065\021" +
    "\067\016\001\001\000\002\001\001\000\012\045\013\060" +
    "\u017c\065\021\067\016\001\001\000\002\001\001\000\012" +
    "\045\013\060\u017e\065\021\067\016\001\001\000\002\001" +
    "\001\000\012\045\013\060\u0180\065\021\067\016\001\001" +
    "\000\002\001\001\000\012\045\013\060\u0182\065\021\067" +
    "\016\001\001\000\002\001\001\000\012\045\013\060\u0184" +
    "\065\021\067\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\045\013\060\u0187\065\021\067\016\001\001" +
    "\000\002\001\001\000\012\045\013\060\u0189\065\021\067" +
    "\016\001\001\000\002\001\001\000\012\045\013\060\u018b" +
    "\065\021\067\016\001\001\000\002\001\001\000\012\045" +
    "\013\060\u018d\065\021\067\016\001\001\000\002\001\001" +
    "\000\012\045\013\060\u018f\065\021\067\016\001\001\000" +
    "\002\001\001\000\012\045\013\060\u0191\065\021\067\016" +
    "\001\001\000\002\001\001\000\012\045\013\060\u0193\065" +
    "\021\067\016\001\001\000\002\001\001\000\012\045\013" +
    "\060\u0195\065\021\067\016\001\001\000\002\001\001\000" +
    "\012\045\013\060\u0197\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\u0199\065\021\067\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\045\013" +
    "\060\u019c\065\021\067\016\001\001\000\002\001\001\000" +
    "\012\045\013\060\u019e\065\021\067\016\001\001\000\002" +
    "\001\001\000\012\045\013\060\u01a0\065\021\067\016\001" +
    "\001\000\002\001\001\000\012\045\013\060\u01a2\065\021" +
    "\067\016\001\001\000\002\001\001\000\012\045\013\060" +
    "\u01a4\065\021\067\016\001\001\000\002\001\001\000\012" +
    "\045\013\060\u01a6\065\021\067\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\013\060\u01a9\065\021" +
    "\067\016\001\001\000\002\001\001\000\012\045\013\060" +
    "\u01ab\065\021\067\016\001\001\000\002\001\001\000\012" +
    "\045\013\060\u01ad\065\021\067\016\001\001\000\002\001" +
    "\001\000\012\045\013\060\u01af\065\021\067\016\001\001" +
    "\000\002\001\001\000\012\045\013\060\u01b1\065\021\067" +
    "\016\001\001\000\002\001\001\000\012\045\013\060\u01b3" +
    "\065\021\067\016\001\001\000\002\001\001\000\012\045" +
    "\013\060\u01b5\065\021\067\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u01bb\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\045\013\060" +
    "\u01bf\065\021\067\016\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public Raiz regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public Raiz RCCSS;
	 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {


    public String estado="";

  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= inicio_p1 inicio_p2 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",45, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_p1 ::= inicio_p1 Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_p1 ::= Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_p2 ::= Cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p2",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ES_VAR ::= var Lista_ID ES_VAR1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ES_VAR1 ::= igu Expresion 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ES_VAR1 ::= igu ico fco 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_VAR1 ::= igu ico Lista_Datos fco 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ES_VAR1 ::= igu ill Lista_Objetos fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ES_VAR1 ::= igu Exp_Log fin Exp_Ari dop Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ES_VAR1 ::= igu Acc_venta 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ES_VAR1 ::= igu Acc_conte 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES_VAR1 ::= igu Acc_boton 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES_VAR1 ::= igu idva pun func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ES_VAR1 ::= igu func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Datos ::= Lista_Datos com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Datos ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Objetos ::= Lista_Objetos com idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Objetos ::= idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Dato_Pri ::= nume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dato_Pri ::= cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dato_Pri ::= deci 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dato_Pri ::= verd 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dato_Pri ::= fals 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lista_ID ::= Lista_ID com idva 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_ID ::= idva 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp_Log ::= Exp_Log or Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_Log ::= Exp_Log and Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_Log ::= not Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_Log ::= ipa Exp_Log fpa 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_Log ::= Exp_Com 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_Com ::= Exp_Ari igu igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp_Com ::= Exp_Ari not igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp_Com ::= Exp_Ari Ex_may Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp_Com ::= Exp_Ari Ex_men Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ex_may ::= may 
            {
              Object RESULT =null;
		RESULT=">";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ex_may ::= may igu 
            {
              Object RESULT =null;
		RESULT=">=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ex_men ::= men 
            {
              Object RESULT =null;
		RESULT="<";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ex_men ::= men igu 
            {
              Object RESULT =null;
		RESULT="<=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp_Ari ::= Exp_Ari mas Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_Ari ::= Exp_Ari nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_Ari ::= Exp_Ari por Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_Ari ::= Exp_Ari div Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_Ari ::= Exp_Ari pot Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp_Ari ::= ipa Exp_Ari fpa 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp_Ari ::= nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp_Ari ::= Dato_Posfa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Dato_Posfa ::= Dato_Pri 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dato_Posfa ::= Es_tipo_id 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Expresion",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Exp_Log 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Expresion",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Es_Impr ::= impr ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impr",43, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Es_Impo ::= impo ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impo",42, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Es_Si ::= si ipa Exp_Log fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Es_sino ::= sino ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sino",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Estru_si ::= Estru_si sino Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",39, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Estru_si ::= Estru_si Es_sino 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",39, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Estru_si ::= Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",39, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Es_asig ::= Es_tipo_id igu Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Es_asig ::= Es_tipo_id igu Exp_Log 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Es_asig ::= Es_tipo_id igu Exp_Log fin Expresion dop Expresion 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Es_asig ::= Es_tipo_id por igu Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Es_asig ::= Es_tipo_id div igu Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Es_asig ::= Es_tipo_id mas igu Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Es_asig ::= Es_tipo_id men igu Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Es_asig ::= Es_tipo_id igu idva pun func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Es_asig ::= Es_tipo_id mas mas 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Es_asig ::= Es_tipo_id nos nos 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Es_asig ::= Es_tipo_id igu func_nat1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Es_tipo_id ::= idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Es_tipo_id ::= idva ico Exp_Ari fco 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Es_sele ::= sele ipa Exp_Ari fpa ill Cuerpo_sele fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Cuerpo_sele ::= Cuerpo_sele tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Cuerpo_sele ::= tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_sele ::= caso Exp_Ari dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_sele ::= defe dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Es_func ::= func idva ipa Es_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Es_fun1 ::= Lista_parametros fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Es_fun1 ::= fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Es_lla_fun ::= idva ipa Lista_Aritmetica fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Lista_Aritmetica ::= Lista_Aritmetica com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Lista_Aritmetica ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // func_nat ::= Tipo_Fun ipa idva fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // func_nat ::= Tipos_Acc_Ord ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // func_nat ::= Tipo_Obte ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func_nat1 ::= func_leer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func_nat1 ::= func_gxml 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func_nat1 ::= Es_lla_fun 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Tipo_Fun ::= filt 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tipo_Fun ::= busc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Tipo_Fun ::= map 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Tipo_Fun ::= redu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Tipo_Fun ::= todo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Tipo_Fun ::= algu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Tipos_Acc_Ord ::= desc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipos_Acc_Ord ::= asce 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Tipos_Acc_Ord ::= inve 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Tipos_Acc_Ord ::= maxi 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipos_Acc_Ord ::= mini 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // func_leer ::= lgxm ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_leer",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // func_gxml ::= cada ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_gxml",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipo_Obte ::= opet 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipo_Obte ::= opid 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Tipo_Obte ::= opno 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Acc_venta ::= cven ipa Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_venta",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Acc_conte ::= ccon ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_conte",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Acc_boton ::= cbot ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_boton",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-19)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Acc_texto ::= ctex ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_texto",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Acc_ctext ::= ccte ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_ctext",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Acc_Atext ::= cate ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Atext",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Acc_Cnume ::= ccnu ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Cnume",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Acc_despl ::= cdes ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_despl",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Acc_image ::= cima ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_image",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Acc_video ::= cvid ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_video",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Acc_repro ::= crep ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_repro",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Acc_alcar ::= acar ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Acc_alcar ::= acar ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Acc_alcer ::= acer ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Acc_alcer ::= acer ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Cuerpo_general ::= ES_VAR 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Cuerpo_general ::= Es_Impr 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Cuerpo_general ::= Estru_si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Cuerpo_general ::= Es_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Cuerpo_general ::= Es_asig 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Cuerpo_general ::= Es_acc_ID 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Cuerpo_general ::= reto Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Cuerpo_general ::= dete pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Estu_Cuerpo ::= Estu_Cuerpo Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Estu_Cuerpo ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Es_acc_ID ::= Es_tipo_id pun accion_ID pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_acc_ID",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // accion_ID ::= Acc_texto 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // accion_ID ::= Acc_ctext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // accion_ID ::= Acc_Atext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // accion_ID ::= Acc_Cnume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // accion_ID ::= Acc_despl 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // accion_ID ::= Acc_image 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // accion_ID ::= Acc_video 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // accion_ID ::= Acc_repro 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // accion_ID ::= cada ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // accion_ID ::= Acc_alcar 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // accion_ID ::= Acc_alcer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Cuerpo_funcion ::= Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Es_DeAu ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Es_DeAu ::= Es_func 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
