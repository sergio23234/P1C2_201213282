
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFs.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symf.class;
}

  /** Default constructor. */
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\061\004\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\076\005" +
    "\000\002\075\005\000\002\075\006\000\002\075\007\000" +
    "\002\075\007\000\002\075\011\000\002\075\005\000\002" +
    "\075\005\000\002\075\005\000\002\075\006\000\002\075" +
    "\005\000\002\075\003\000\002\074\005\000\002\074\003" +
    "\000\002\073\007\000\002\073\005\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\071\005\000\002\071\003\000\002\067" +
    "\005\000\002\067\005\000\002\067\004\000\002\067\003" +
    "\000\002\066\006\000\002\066\006\000\002\066\005\000" +
    "\002\066\005\000\002\066\003\000\002\065\003\000\002" +
    "\065\004\000\002\064\003\000\002\064\004\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\004\000" +
    "\002\063\005\000\002\063\005\000\002\063\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\057\007\000\002\056\007\000\002\055\011" +
    "\000\002\054\006\000\002\053\005\000\002\053\004\000" +
    "\002\053\003\000\002\050\006\000\002\050\012\000\002" +
    "\050\007\000\002\050\007\000\002\050\007\000\002\050" +
    "\007\000\002\050\007\000\002\050\006\000\002\050\006" +
    "\000\002\050\006\000\002\047\003\000\002\047\005\000" +
    "\002\043\006\000\002\043\003\000\002\046\011\000\002" +
    "\045\004\000\002\045\003\000\002\044\010\000\002\044" +
    "\007\000\002\042\006\000\002\041\007\000\002\041\006" +
    "\000\002\010\006\000\002\010\004\000\002\037\005\000" +
    "\002\040\003\000\002\040\004\000\002\036\005\000\002" +
    "\036\003\000\002\062\004\000\002\062\003\000\002\034" +
    "\006\000\002\034\003\000\002\034\006\000\002\034\010" +
    "\000\002\035\003\000\002\035\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\031\006\000\002\030\006\000\002\027\003\000" +
    "\002\027\003\000\002\025\012\000\002\024\021\000\002" +
    "\023\027\000\002\022\024\000\002\021\032\000\002\017" +
    "\032\000\002\020\022\000\002\016\022\000\002\015\020" +
    "\000\002\014\020\000\002\013\020\000\002\007\006\000" +
    "\002\007\005\000\002\006\006\000\002\006\005\000\002" +
    "\026\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\004\000\002\004\004\000" +
    "\002\004\003\000\002\003\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\006\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\077\004\000\002\077\003\000\002" +
    "\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e7\000\004\034\007\001\002\000\024\027\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe" +
    "\054\ufffe\001\002\000\024\027\140\033\136\034\007\035" +
    "\117\036\142\037\141\040\133\043\125\054\116\001\002" +
    "\000\004\002\114\001\002\000\004\016\010\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\044\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\031\uffeb\032\uffeb\001\002\000\052\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\016" +
    "\101\017\uffb6\020\102\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\001\002\000" +
    "\044\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\031\uffe9\032\uffe9\001\002\000\046" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\030\077\031\uffb9\032\uffb9\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\044\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\031\uffcd\032\uffcd\001\002\000\044\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\017" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\031\uffcb\032\uffcb\001\002\000\044\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\017\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\031" +
    "\uffcc\032\uffcc\001\002\000\044\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\017\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\031\uffec" +
    "\032\uffec\001\002\000\044\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\017\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce\032" +
    "\uffce\001\002\000\026\013\015\016\023\024\047\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\017\031\001\002\000\044\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\017\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf\032" +
    "\uffcf\001\002\000\044\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\017\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\031\uffea\032\uffea" +
    "\001\002\000\044\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\017\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\031\uffe8\032\uffe8\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\004\023" +
    "\045\001\002\000\026\004\044\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\024\013\040\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\020\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\020" +
    "\001\002\000\044\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\017\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\031\uffd5\032\uffd5\001" +
    "\002\000\044\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4\001\002" +
    "\000\064\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\016\023\017\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\032\uffd0\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\020" +
    "\001\002\000\044\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\032\uffd7\001" +
    "\002\000\044\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\017\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2\032\uffd2\001\002" +
    "\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\031\uffd8\032\uffd8\001\002\000" +
    "\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\031\uffd1\032\uffd1\001\002\000\024" +
    "\027\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\043\uffc9\054\uffc9\001\002\000\044\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\017" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\031\uffd6\032\uffd6\001\002\000\026\013\015\016\023\024" +
    "\047\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\020\001\002\000\040\004\032\005\064\006\030\007" +
    "\035\010\065\011\034\012\063\013\033\017\uffdd\022\uffdd" +
    "\023\uffdd\024\060\025\uffdd\026\uffdd\032\uffdd\001\002\000" +
    "\016\017\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\032\uffe2" +
    "\001\002\000\010\017\053\025\055\026\054\001\002\000" +
    "\044\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\031\uffd3\032\uffd3\001\002\000\026" +
    "\013\015\016\023\024\047\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\026\013\015" +
    "\016\023\024\047\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\020\001\002\000\016\017\uffe5\022\uffe5" +
    "\023\uffe5\025\uffe5\026\uffe5\032\uffe5\001\002\000\016\017" +
    "\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\032\uffe4\001\002" +
    "\000\004\010\074\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\020" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\026" +
    "\010\071\013\uffdc\016\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\111\uffdc\001\002\000\026\010\070" +
    "\013\uffda\016\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\111\uffda\001\002\000\004\010\066\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\030\004\032" +
    "\006\030\007\035\011\034\013\033\017\uffe1\022\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\032\uffe1\001\002\000\024\013\uffd9" +
    "\016\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\111\uffd9\001\002\000\024\013\uffdb\016\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\111\uffdb\001" +
    "\002\000\030\004\032\006\030\007\035\011\034\013\033" +
    "\017\uffde\022\uffde\023\uffde\025\uffde\026\uffde\032\uffde\001" +
    "\002\000\030\004\032\006\030\007\035\011\034\013\033" +
    "\017\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\032\uffdf\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\030\004" +
    "\032\006\030\007\035\011\034\013\033\017\uffe0\022\uffe0" +
    "\023\uffe0\025\uffe0\026\uffe0\032\uffe0\001\002\000\016\017" +
    "\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\032\uffe3\001\002" +
    "\000\004\054\100\001\002\000\044\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\017\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\031" +
    "\uffb8\032\uffb8\001\002\000\026\013\015\016\023\017\107" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\020\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\021\104" +
    "\001\002\000\074\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\017\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\103\uffb7" +
    "\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\001\002\000" +
    "\044\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\017\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\031\uffab\032\uffab\001\002\000\006" +
    "\017\112\031\111\001\002\000\044\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\017\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\031" +
    "\uffaa\032\uffaa\001\002\000\020\004\032\006\030\007\035" +
    "\011\034\013\033\017\uffa7\031\uffa7\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\020\001\002\000\044\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\017\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\031" +
    "\uffa9\032\uffa9\001\002\000\020\004\032\006\030\007\035" +
    "\011\034\013\033\017\uffa8\031\uffa8\001\002\000\004\002" +
    "\001\001\002\000\024\002\uff65\027\uff65\033\uff65\035\uff65" +
    "\036\uff65\037\uff65\040\uff65\043\uff65\054\uff65\001\002\000" +
    "\046\004\uffb6\006\uffb6\007\uffb6\010\uffb6\013\uffb6\020\102" +
    "\030\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\001\002" +
    "\000\004\023\u01e9\001\002\000\026\002\uff7a\015\uff7a\027" +
    "\uff7a\033\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\043\uff7a" +
    "\054\uff7a\001\002\000\026\002\uff7f\015\uff7f\027\uff7f\033" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\043\uff7f\054\uff7f" +
    "\001\002\000\014\004\u01c9\006\u01c8\007\u01cc\010\u01cb\013" +
    "\u01ca\001\002\000\024\002\ufffd\027\140\033\136\035\117" +
    "\036\142\037\141\040\133\043\125\054\116\001\002\000" +
    "\004\002\000\001\002\000\004\054\u01b6\001\002\000\030" +
    "\002\uffc4\015\uffc4\027\uffc4\033\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\043\uffc4\054\uffc4\062\uffc4\001\002\000\026" +
    "\002\uff7b\015\uff7b\027\uff7b\033\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\043\uff7b\054\uff7b\001\002\000\026\002\uff7c" +
    "\015\uff7c\027\uff7c\033\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\043\uff7c\054\uff7c\001\002\000\024\002\uff67\027\uff67" +
    "\033\uff67\035\uff67\036\uff67\037\uff67\040\uff67\043\uff67\054" +
    "\uff67\001\002\000\044\004\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\013\uffb9\030\u0111\075\u011c\076\u011f\077\u011a\100\u0112\101" +
    "\u0121\103\u0120\104\u011d\105\u0117\106\u011b\107\u011e\110\u010d" +
    "\001\002\000\004\016\367\001\002\000\026\002\uff7e\015" +
    "\uff7e\027\uff7e\033\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e" +
    "\043\uff7e\054\uff7e\001\002\000\024\002\uff66\027\uff66\033" +
    "\uff66\035\uff66\036\uff66\037\uff66\040\uff66\043\uff66\054\uff66" +
    "\001\002\000\004\016\363\001\002\000\024\027\uffff\033" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\043\uffff" +
    "\054\uffff\001\002\000\004\054\165\001\002\000\004\016" +
    "\156\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\030\002\uff7d\015\uff7d\027\uff7d\033\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\043\uff7d\054\uff7d\062\144\001\002\000" +
    "\006\014\147\037\141\001\002\000\030\002\uffc5\015\uffc5" +
    "\027\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\043" +
    "\uffc5\054\uffc5\062\uffc5\001\002\000\030\002\uffc6\015\uffc6" +
    "\027\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043" +
    "\uffc6\054\uffc6\062\uffc6\001\002\000\020\027\140\033\136" +
    "\035\117\036\142\037\141\040\133\054\116\001\002\000" +
    "\022\015\uff76\027\uff76\033\uff76\035\uff76\036\uff76\037\uff76" +
    "\040\uff76\054\uff76\001\002\000\022\015\153\027\140\033" +
    "\136\035\117\036\142\037\141\040\133\054\116\001\002" +
    "\000\022\015\uff77\027\uff77\033\uff77\035\uff77\036\uff77\037" +
    "\uff77\040\uff77\054\uff77\001\002\000\030\002\uffc7\015\uffc7" +
    "\027\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\043" +
    "\uffc7\054\uffc7\062\uffc7\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\023\155\001\002\000\026\002" +
    "\uff79\015\uff79\027\uff79\033\uff79\035\uff79\036\uff79\037\uff79" +
    "\040\uff79\043\uff79\054\uff79\001\002\000\026\013\015\016" +
    "\023\024\047\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\020\001\002\000\010\017\160\025\055\026" +
    "\054\001\002\000\004\014\161\001\002\000\020\027\140" +
    "\033\136\035\117\036\142\037\141\040\133\054\116\001" +
    "\002\000\022\015\163\027\140\033\136\035\117\036\142" +
    "\037\141\040\133\054\116\001\002\000\030\002\uffc8\015" +
    "\uffc8\027\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\043\uffc8\054\uffc8\062\uffc8\001\002\000\010\010\171\023" +
    "\167\031\166\001\002\000\010\010\uffe6\023\uffe6\031\uffe6" +
    "\001\002\000\004\054\362\001\002\000\026\002\ufff1\015" +
    "\ufff1\027\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\043\ufff1\054\ufff1\001\002\000\026\002\ufffc\015\ufffc\027" +
    "\ufffc\033\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\043\ufffc" +
    "\054\ufffc\001\002\000\040\013\015\014\203\016\023\020" +
    "\200\024\047\046\177\054\174\055\011\056\026\057\021" +
    "\060\013\061\027\067\204\073\173\111\020\001\002\000" +
    "\004\023\361\001\002\000\004\016\352\001\002\000\102" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\016\101\020\102\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\030\uffb6\044\272\045\267\047\262\050" +
    "\261\051\263\052\255\053\265\063\273\064\257\065\256" +
    "\066\271\070\260\071\251\072\264\074\274\102\254\001" +
    "\002\000\004\023\247\001\002\000\004\023\uff9f\001\002" +
    "\000\004\016\244\001\002\000\026\013\015\016\023\021" +
    "\236\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\020\001\002\000\004\023\233\001\002\000\004\023" +
    "\uffa0\001\002\000\004\054\222\001\002\000\004\016\216" +
    "\001\002\000\012\022\211\023\210\025\055\026\054\001" +
    "\002\000\004\023\207\001\002\000\026\002\ufff5\015\ufff5" +
    "\027\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\043" +
    "\ufff5\054\ufff5\001\002\000\026\002\ufffb\015\ufffb\027\ufffb" +
    "\033\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\043\ufffb\054" +
    "\ufffb\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\032\213" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\023\215\001" +
    "\002\000\026\002\ufff7\015\ufff7\027\ufff7\033\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\043\ufff7\054\ufff7\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\017\220\001\002\000\004" +
    "\023\uff93\001\002\000\006\015\226\031\225\001\002\000" +
    "\004\032\223\001\002\000\004\055\224\001\002\000\006" +
    "\015\uffed\031\uffed\001\002\000\004\054\230\001\002\000" +
    "\004\023\227\001\002\000\026\002\ufff8\015\ufff8\027\ufff8" +
    "\033\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\043\ufff8\054" +
    "\ufff8\001\002\000\004\032\231\001\002\000\004\055\232" +
    "\001\002\000\006\015\uffee\031\uffee\001\002\000\026\002" +
    "\ufff4\015\ufff4\027\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\043\ufff4\054\ufff4\001\002\000\006\021\241\031" +
    "\240\001\002\000\020\004\032\006\030\007\035\011\034" +
    "\013\033\021\uffef\031\uffef\001\002\000\004\023\237\001" +
    "\002\000\026\002\ufffa\015\ufffa\027\ufffa\033\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\043\ufffa\054\ufffa\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\004\023\242\001" +
    "\002\000\026\002\ufff9\015\ufff9\027\ufff9\033\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\043\ufff9\054\ufff9\001\002\000" +
    "\020\004\032\006\030\007\035\011\034\013\033\021\ufff0" +
    "\031\ufff0\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\017" +
    "\246\001\002\000\004\023\uff92\001\002\000\026\002\ufff2" +
    "\015\ufff2\027\ufff2\033\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\043\ufff2\054\ufff2\001\002\000\040\023\uffa5\044\uffa5" +
    "\045\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\063" +
    "\uffa5\064\uffa5\065\uffa5\066\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\001\002\000\004\016\uff90\001\002\000\040\023\351\044" +
    "\272\045\267\047\262\050\261\051\263\052\255\053\265" +
    "\063\273\064\257\065\256\066\271\070\260\071\251\072" +
    "\264\001\002\000\004\016\345\001\002\000\004\016\322" +
    "\001\002\000\004\016\uff9d\001\002\000\004\016\uff9a\001" +
    "\002\000\004\016\uff9b\001\002\000\004\016\uff91\001\002" +
    "\000\040\023\uff95\044\uff95\045\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\063\uff95\064\uff95\065\uff95\066\uff95" +
    "\070\uff95\071\uff95\072\uff95\001\002\000\040\023\uff96\044" +
    "\uff96\045\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\063\uff96\064\uff96\065\uff96\066\uff96\070\uff96\071\uff96\072" +
    "\uff96\001\002\000\040\023\uff94\044\uff94\045\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\070\uff94\071\uff94\072\uff94\001\002\000\004" +
    "\016\315\001\002\000\004\016\uff9e\001\002\000\040\023" +
    "\uffa3\044\uffa3\045\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\070\uffa3\071" +
    "\uffa3\072\uffa3\001\002\000\040\023\uff97\044\uff97\045\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\063\uff97\064" +
    "\uff97\065\uff97\066\uff97\070\uff97\071\uff97\072\uff97\001\002" +
    "\000\004\016\312\001\002\000\004\016\uff99\001\002\000" +
    "\040\023\uff98\044\uff98\045\uff98\047\uff98\050\uff98\051\uff98" +
    "\052\uff98\053\uff98\063\uff98\064\uff98\065\uff98\066\uff98\070" +
    "\uff98\071\uff98\072\uff98\001\002\000\004\016\uff9c\001\002" +
    "\000\004\016\275\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\020" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\277\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\301\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\303\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\305" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\307\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\017\311\001\002" +
    "\000\004\023\uff8e\001\002\000\004\054\313\001\002\000" +
    "\004\017\314\001\002\000\040\023\uffa4\044\uffa4\045\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\063\uffa4\064" +
    "\uffa4\065\uffa4\066\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\317\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\017\321\001\002\000\040" +
    "\023\uffa1\044\uffa1\045\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\020" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\324\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\326\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\330\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\332" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\334\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\336\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\340\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\342\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\020\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\017\344\001\002\000\004\023" +
    "\uff8d\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\017\347" +
    "\001\002\000\040\023\uffa2\044\uffa2\045\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\070\uffa2\071\uffa2\072\uffa2\001\002\000\040\023" +
    "\uffa6\044\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\001\002\000\026\002\ufff3\015\ufff3\027\ufff3" +
    "\033\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\043\ufff3\054" +
    "\ufff3\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\354" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\356\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\017\360\001\002" +
    "\000\004\023\uff8f\001\002\000\026\002\ufff6\015\ufff6\027" +
    "\ufff6\033\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\043\ufff6" +
    "\054\ufff6\001\002\000\010\010\uffe7\023\uffe7\031\uffe7\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\017\365\001\002" +
    "\000\004\023\366\001\002\000\026\002\uffca\015\uffca\027" +
    "\uffca\033\uffca\035\uffca\036\uffca\037\uffca\040\uffca\043\uffca" +
    "\054\uffca\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\017" +
    "\371\001\002\000\004\014\372\001\002\000\006\041\375" +
    "\042\374\001\002\000\010\015\uffb3\041\uffb3\042\uffb3\001" +
    "\002\000\004\032\u0106\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\020\001\002\000\010\015\u0100\041\375\042\374\001\002" +
    "\000\010\015\uffb4\041\uffb4\042\uffb4\001\002\000\026\002" +
    "\uffb5\015\uffb5\027\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\043\uffb5\054\uffb5\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\032\u0102\001\002\000\004" +
    "\014\u0103\001\002\000\020\027\140\033\136\035\117\036" +
    "\142\037\141\040\133\054\116\001\002\000\022\015\u0105" +
    "\027\140\033\136\035\117\036\142\037\141\040\133\054" +
    "\116\001\002\000\010\015\uffb2\041\uffb2\042\uffb2\001\002" +
    "\000\004\014\u0107\001\002\000\020\027\140\033\136\035" +
    "\117\036\142\037\141\040\133\054\116\001\002\000\022" +
    "\015\u0109\027\140\033\136\035\117\036\142\037\141\040" +
    "\133\054\116\001\002\000\010\015\uffb1\041\uffb1\042\uffb1" +
    "\001\002\000\004\023\uff74\001\002\000\004\023\uff70\001" +
    "\002\000\004\023\uff6a\001\002\000\004\016\u01b2\001\002" +
    "\000\004\023\uff6b\001\002\000\004\023\uff71\001\002\000" +
    "\004\023\u01b1\001\002\000\006\046\u01ae\054\100\001\002" +
    "\000\004\016\u019f\001\002\000\004\023\uff6f\001\002\000" +
    "\004\023\uff73\001\002\000\004\023\uff72\001\002\000\004" +
    "\023\uff69\001\002\000\004\016\u0192\001\002\000\004\023" +
    "\uff6d\001\002\000\004\023\uff6e\001\002\000\004\016\u017b" +
    "\001\002\000\004\016\u0178\001\002\000\004\016\u0167\001" +
    "\002\000\004\016\u015a\001\002\000\004\016\u0155\001\002" +
    "\000\004\016\u013e\001\002\000\004\016\u0131\001\002\000" +
    "\004\016\u0122\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u0124\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0126\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0128" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u012a\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u012c\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u012e\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\017\u0130\001\002\000\004" +
    "\023\uff88\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0133\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0135" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0137\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0139\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u013b\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\017\u013d\001\002\000\004" +
    "\023\uff87\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0140\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0142" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0144\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0146\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u0148\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\u014a\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\020\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\031\u014c\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\020\001\002\000\016\004\032\006\030\007" +
    "\035\011\034\013\033\031\u014e\001\002\000\024\013\015" +
    "\016\023\054\012\055\011\056\026\057\021\060\013\061" +
    "\027\111\020\001\002\000\016\004\032\006\030\007\035" +
    "\011\034\013\033\031\u0150\001\002\000\024\013\015\016" +
    "\023\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\020\001\002\000\016\004\032\006\030\007\035\011" +
    "\034\013\033\031\u0152\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\020\001\002\000\016\004\032\006\030\007\035\011\034" +
    "\013\033\017\u0154\001\002\000\004\023\uff8b\001\002\000" +
    "\006\017\u0157\054\u0158\001\002\000\004\017\u0159\001\002" +
    "\000\004\023\uff83\001\002\000\004\016\101\001\002\000" +
    "\004\023\uff84\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u015c\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u015e\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0160" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0162\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0164\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\017\u0166\001\002\000" +
    "\004\023\uff85\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u0169\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u016b\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u016d" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u016f\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0171\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u0173\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\u0175\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\020\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\017\u0177\001\002\000\004\023" +
    "\uff8c\001\002\000\004\054\u0158\001\002\000\004\017\u017a" +
    "\001\002\000\004\023\uff80\001\002\000\024\013\015\016" +
    "\023\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\020\001\002\000\016\004\032\006\030\007\035\011" +
    "\034\013\033\031\u017d\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\020\001\002\000\016\004\032\006\030\007\035\011\034" +
    "\013\033\031\u017f\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\020" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\u0181\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u0183\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0185\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0187" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0189\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u018b\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u018d\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\u018f\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\020\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\017\u0191\001\002\000\004\023" +
    "\uff8a\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0194" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0196\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0198\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u019a\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\u019c\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\020\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\017\u019e\001\002\000\004\023" +
    "\uff86\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u01a1" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\020\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u01a3\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\020\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u01a5\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u01a7\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\020\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\u01a9\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\020\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\031\u01ab\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\020\001\002\000\016\004\032\006\030\007" +
    "\035\011\034\013\033\017\u01ad\001\002\000\004\023\uff89" +
    "\001\002\000\004\016\u01af\001\002\000\004\017\u01b0\001" +
    "\002\000\004\023\uff6c\001\002\000\026\002\uff75\015\uff75" +
    "\027\uff75\033\uff75\035\uff75\036\uff75\037\uff75\040\uff75\043" +
    "\uff75\054\uff75\001\002\000\006\017\u01b4\054\u0158\001\002" +
    "\000\004\017\u01b5\001\002\000\004\023\uff81\001\002\000" +
    "\004\023\uff82\001\002\000\004\016\u01b7\001\002\000\006" +
    "\017\u01b9\027\u01b8\001\002\000\004\054\u01c6\001\002\000" +
    "\004\014\u01c3\001\002\000\024\002\uffb0\027\uffb0\033\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\054\uffb0\001" +
    "\002\000\006\017\u01bd\031\u01bc\001\002\000\004\027\u01c1" +
    "\001\002\000\004\014\u01be\001\002\000\020\027\140\033" +
    "\136\035\117\036\142\037\141\040\133\054\116\001\002" +
    "\000\022\015\u01c0\027\140\033\136\035\117\036\142\037" +
    "\141\040\133\054\116\001\002\000\024\002\uffaf\027\uffaf" +
    "\033\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\043\uffaf\054" +
    "\uffaf\001\002\000\004\054\u01c2\001\002\000\006\017\uffad" +
    "\031\uffad\001\002\000\020\027\140\033\136\035\117\036" +
    "\142\037\141\040\133\054\116\001\002\000\022\015\u01c5" +
    "\027\140\033\136\035\117\036\142\037\141\040\133\054" +
    "\116\001\002\000\024\002\uffae\027\uffae\033\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\043\uffae\054\uffae\001\002\000" +
    "\006\017\uffac\031\uffac\001\002\000\024\002\uff68\027\uff68" +
    "\033\uff68\035\uff68\036\uff68\037\uff68\040\uff68\043\uff68\054" +
    "\uff68\001\002\000\004\010\u01e6\001\002\000\006\004\u01e1" +
    "\010\u01e2\001\002\000\006\010\u01dd\013\u01dc\001\002\000" +
    "\032\013\015\016\023\024\047\046\177\054\u01d0\055\011" +
    "\056\026\057\021\060\013\061\027\067\204\111\020\001" +
    "\002\000\004\010\u01cd\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\020\001\002\000\016\004\032\006\030\007\035\011\034" +
    "\013\033\023\u01cf\001\002\000\026\002\uffc0\015\uffc0\027" +
    "\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\043\uffc0" +
    "\054\uffc0\001\002\000\076\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\016\101\020\102" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6\044" +
    "\272\045\267\047\262\050\261\051\263\052\255\053\265" +
    "\063\273\064\257\065\256\066\271\070\260\071\251\072" +
    "\264\001\002\000\004\023\u01d9\001\002\000\012\022\u01d4" +
    "\023\u01d3\025\055\026\054\001\002\000\026\002\uffc3\015" +
    "\uffc3\027\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\043\uffc3\054\uffc3\001\002\000\026\013\015\016\023\024" +
    "\047\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\020\001\002\000\010\025\055\026\054\032\u01d6\001" +
    "\002\000\026\013\015\016\023\024\047\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\020\001\002\000" +
    "\010\023\u01d8\025\055\026\054\001\002\000\026\002\uffc2" +
    "\015\uffc2\027\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\043\uffc2\054\uffc2\001\002\000\026\002\uffba\015\uffba" +
    "\027\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040\uffba\043" +
    "\uffba\054\uffba\001\002\000\040\023\u01db\044\272\045\267" +
    "\047\262\050\261\051\263\052\255\053\265\063\273\064" +
    "\257\065\256\066\271\070\260\071\251\072\264\001\002" +
    "\000\026\002\uffbd\015\uffbd\027\uffbd\033\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\043\uffbd\054\uffbd\001\002\000\004" +
    "\023\u01e0\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\020\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\023" +
    "\u01df\001\002\000\026\002\uffbe\015\uffbe\027\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\043\uffbe\054\uffbe\001" +
    "\002\000\026\002\uffbb\015\uffbb\027\uffbb\033\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\043\uffbb\054\uffbb\001\002\000" +
    "\004\023\u01e5\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\020\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\023\u01e4\001\002\000\026\002\uffbf\015\uffbf\027\uffbf\033" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\043\uffbf\054\uffbf" +
    "\001\002\000\026\002\uffbc\015\uffbc\027\uffbc\033\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\043\uffbc\054\uffbc\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\020\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\023\u01e8\001\002\000" +
    "\026\002\uffc1\015\uffc1\027\uffc1\033\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\043\uffc1\054\uffc1\001\002\000\026\002" +
    "\uff78\015\uff78\027\uff78\033\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\043\uff78\054\uff78\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e7\000\010\011\004\056\003\061\005\001\001\000" +
    "\002\001\001\000\040\003\117\005\134\012\123\042\114" +
    "\043\131\046\127\047\121\050\126\052\130\053\142\055" +
    "\125\056\136\057\133\076\120\077\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\023\070\024\072\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\037\016\043\013\047\015\063\041\070\024\072\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\037\016" +
    "\043\013\047\015\063\047\066\050\067\051\070\024\072" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\045\070\024\072\021\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\042\070\024\072" +
    "\021\001\001\000\016\037\016\043\013\047\015\063\040" +
    "\070\024\072\021\001\001\000\016\037\016\043\013\047" +
    "\015\063\036\070\024\072\021\001\001\000\016\037\016" +
    "\043\013\047\015\063\035\070\024\072\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\037\016\043\013" +
    "\047\015\063\041\070\024\072\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\037\016\043" +
    "\013\047\015\063\047\066\050\067\075\070\024\072\021" +
    "\001\001\000\006\064\061\065\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\037\016" +
    "\043\013\047\015\063\047\066\050\067\056\070\024\072" +
    "\021\001\001\000\022\037\016\043\013\047\015\063\047" +
    "\066\050\067\055\070\024\072\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\072\070\024\072\021\001\001\000" +
    "\016\037\016\043\013\047\015\063\071\070\024\072\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\066\070\024" +
    "\072\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\074\070\024\072\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\036\105\037\016\040\104\043" +
    "\013\047\015\063\107\070\024\072\021\001\001\000\016" +
    "\037\016\043\013\047\015\063\102\070\024\072\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\037\016\043\013\047\015\063\112\070\024\072\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\117\005\134\042\114\043\131\046\127\047\121" +
    "\050\126\052\u01c6\053\142\055\125\057\133\076\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\u010f\006\u0115\007\u010d\013\u0117\014\u0118\015\u0112" +
    "\016\u010a\017\u0114\020\u010e\021\u0113\022\u0109\026\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\163\001" +
    "\001\000\002\001\001\000\016\037\016\043\013\047\015" +
    "\063\153\070\024\072\021\001\001\000\004\054\144\001" +
    "\001\000\004\055\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\117\004\150\005\147\043\131\046" +
    "\127\047\121\050\126\053\142\055\125\057\133\076\120" +
    "\001\001\000\002\001\001\000\026\003\117\005\151\043" +
    "\131\046\127\047\121\050\126\053\142\055\125\057\133" +
    "\076\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\037\016\043\013" +
    "\047\015\063\047\066\050\067\156\070\024\072\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\117" +
    "\004\161\005\147\043\131\046\127\047\121\050\126\053" +
    "\142\055\125\057\133\076\120\001\001\000\026\003\117" +
    "\005\151\043\131\046\127\047\121\050\126\053\142\055" +
    "\125\057\133\076\120\001\001\000\002\001\001\000\004" +
    "\075\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\023\200\024\205" +
    "\025\171\030\175\031\201\035\174\037\016\043\013\047" +
    "\015\063\047\066\050\067\204\070\024\072\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\027\252\032" +
    "\265\033\267\034\247\062\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\037\016\043" +
    "\013\047\015\063\234\070\024\072\021\074\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\211\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\213\070" +
    "\024\072\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\216\070\024\072" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\242\070\024\072\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\244\070\024\072\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\252\032\265\033\267" +
    "\034\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\275\070\024\072\021\001" +
    "\001\000\002\001\001\000\016\037\016\043\013\047\015" +
    "\063\277\070\024\072\021\001\001\000\002\001\001\000" +
    "\016\037\016\043\013\047\015\063\301\070\024\072\021" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\303\070\024\072\021\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\305\070\024\072" +
    "\021\001\001\000\002\001\001\000\016\037\016\043\013" +
    "\047\015\063\307\070\024\072\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\037\016\043\013\047\015\063" +
    "\315\070\024\072\021\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\317\070\024\072\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\322\070\024\072\021\001\001\000" +
    "\002\001\001\000\016\037\016\043\013\047\015\063\324" +
    "\070\024\072\021\001\001\000\002\001\001\000\016\037" +
    "\016\043\013\047\015\063\326\070\024\072\021\001\001" +
    "\000\002\001\001\000\016\037\016\043\013\047\015\063" +
    "\330\070\024\072\021\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\332\070\024\072\021\001" +
    "\001\000\002\001\001\000\016\037\016\043\013\047\015" +
    "\063\334\070\024\072\021\001\001\000\002\001\001\000" +
    "\016\037\016\043\013\047\015\063\336\070\024\072\021" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\340\070\024\072\021\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\342\070\024\072" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\345\070\024\072\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\037\016\043\013\047\015\063" +
    "\352\070\024\072\021\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\354\070\024\072\021\001" +
    "\001\000\002\001\001\000\016\037\016\043\013\047\015" +
    "\063\356\070\024\072\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\363\070\024\072\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\367\070\024\072" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\372\045\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u0100\070\024" +
    "\072\021\001\001\000\004\044\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\117\004\u0103\005\147\043\131\046\127\047" +
    "\121\050\126\053\142\055\125\057\133\076\120\001\001" +
    "\000\026\003\117\005\151\043\131\046\127\047\121\050" +
    "\126\053\142\055\125\057\133\076\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\117\004\u0107\005" +
    "\147\043\131\046\127\047\121\050\126\053\142\055\125" +
    "\057\133\076\120\001\001\000\026\003\117\005\151\043" +
    "\131\046\127\047\121\050\126\053\142\055\125\057\133" +
    "\076\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\u0122\070\024\072" +
    "\021\001\001\000\002\001\001\000\016\037\016\043\013" +
    "\047\015\063\u0124\070\024\072\021\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u0126\070\024" +
    "\072\021\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u0128\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u012a\070" +
    "\024\072\021\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\u012c\070\024\072\021\001\001\000" +
    "\002\001\001\000\016\037\016\043\013\047\015\063\u012e" +
    "\070\024\072\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u0131\070\024" +
    "\072\021\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u0133\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u0135\070" +
    "\024\072\021\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\u0137\070\024\072\021\001\001\000" +
    "\002\001\001\000\016\037\016\043\013\047\015\063\u0139" +
    "\070\024\072\021\001\001\000\002\001\001\000\016\037" +
    "\016\043\013\047\015\063\u013b\070\024\072\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u013e\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u0140\070" +
    "\024\072\021\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\u0142\070\024\072\021\001\001\000" +
    "\002\001\001\000\016\037\016\043\013\047\015\063\u0144" +
    "\070\024\072\021\001\001\000\002\001\001\000\016\037" +
    "\016\043\013\047\015\063\u0146\070\024\072\021\001\001" +
    "\000\002\001\001\000\016\037\016\043\013\047\015\063" +
    "\u0148\070\024\072\021\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\u014a\070\024\072\021\001" +
    "\001\000\002\001\001\000\016\037\016\043\013\047\015" +
    "\063\u014c\070\024\072\021\001\001\000\002\001\001\000" +
    "\016\037\016\043\013\047\015\063\u014e\070\024\072\021" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\u0150\070\024\072\021\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\u0152\070\024\072" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u0155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\037\016\043\013" +
    "\047\015\063\u015a\070\024\072\021\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u015c\070\024" +
    "\072\021\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u015e\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u0160\070" +
    "\024\072\021\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\u0162\070\024\072\021\001\001\000" +
    "\002\001\001\000\016\037\016\043\013\047\015\063\u0164" +
    "\070\024\072\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u0167\070\024" +
    "\072\021\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u0169\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u016b\070" +
    "\024\072\021\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\u016d\070\024\072\021\001\001\000" +
    "\002\001\001\000\016\037\016\043\013\047\015\063\u016f" +
    "\070\024\072\021\001\001\000\002\001\001\000\016\037" +
    "\016\043\013\047\015\063\u0171\070\024\072\021\001\001" +
    "\000\002\001\001\000\016\037\016\043\013\047\015\063" +
    "\u0173\070\024\072\021\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\u0175\070\024\072\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u0178" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\037" +
    "\016\043\013\047\015\063\u017b\070\024\072\021\001\001" +
    "\000\002\001\001\000\016\037\016\043\013\047\015\063" +
    "\u017d\070\024\072\021\001\001\000\002\001\001\000\016" +
    "\037\016\043\013\047\015\063\u017f\070\024\072\021\001" +
    "\001\000\002\001\001\000\016\037\016\043\013\047\015" +
    "\063\u0181\070\024\072\021\001\001\000\002\001\001\000" +
    "\016\037\016\043\013\047\015\063\u0183\070\024\072\021" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\u0185\070\024\072\021\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\u0187\070\024\072" +
    "\021\001\001\000\002\001\001\000\016\037\016\043\013" +
    "\047\015\063\u0189\070\024\072\021\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u018b\070\024" +
    "\072\021\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u018d\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u018f\070" +
    "\024\072\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\016\043\013\047\015\063\u0192\070\024\072" +
    "\021\001\001\000\002\001\001\000\016\037\016\043\013" +
    "\047\015\063\u0194\070\024\072\021\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u0196\070\024" +
    "\072\021\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u0198\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u019a\070" +
    "\024\072\021\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\u019c\070\024\072\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\037\016\043\013" +
    "\047\015\063\u019f\070\024\072\021\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u01a1\070\024" +
    "\072\021\001\001\000\002\001\001\000\016\037\016\043" +
    "\013\047\015\063\u01a3\070\024\072\021\001\001\000\002" +
    "\001\001\000\016\037\016\043\013\047\015\063\u01a5\070" +
    "\024\072\021\001\001\000\002\001\001\000\016\037\016" +
    "\043\013\047\015\063\u01a7\070\024\072\021\001\001\000" +
    "\002\001\001\000\016\037\016\043\013\047\015\063\u01a9" +
    "\070\024\072\021\001\001\000\002\001\001\000\016\037" +
    "\016\043\013\047\015\063\u01ab\070\024\072\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u01b2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u01ba\041\u01b9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\117\004\u01be\005\147\043\131\046\127\047" +
    "\121\050\126\053\142\055\125\057\133\076\120\001\001" +
    "\000\026\003\117\005\151\043\131\046\127\047\121\050" +
    "\126\053\142\055\125\057\133\076\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\117\004\u01c3\005\147\043\131\046\127\047\121\050\126" +
    "\053\142\055\125\057\133\076\120\001\001\000\026\003" +
    "\117\005\151\043\131\046\127\047\121\050\126\053\142" +
    "\055\125\057\133\076\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\030\175\031\201\035" +
    "\u01d0\037\016\043\013\047\015\063\047\066\050\067\u01d1" +
    "\070\024\072\021\001\001\000\002\001\001\000\016\037" +
    "\016\043\013\047\015\063\u01cd\070\024\072\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\027\252\032" +
    "\265\033\267\034\247\062\u01d9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\037\016\043" +
    "\013\047\015\063\047\066\050\067\u01d4\070\024\072\021" +
    "\001\001\000\002\001\001\000\022\037\016\043\013\047" +
    "\015\063\047\066\050\067\u01d6\070\024\072\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\252\032\265\033\267\034\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\016\043\013\047" +
    "\015\063\u01dd\070\024\072\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\037\016\043\013\047\015\063\u01e2\070\024\072\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\016\043\013\047\015\063\u01e6\070\024" +
    "\072\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public Raiz regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public Raiz RCCSS;
	 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {


    public String estado="";

  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= inicio_p1 inicio_p2 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_p1 ::= inicio_p1 Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_p1 ::= Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_p2 ::= Cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p2",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ES_VAR ::= var Lista_ID ES_VAR1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ES_VAR1 ::= igu Exp_Log pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ES_VAR1 ::= igu ico fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_VAR1 ::= igu ico Lista_Datos fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ES_VAR1 ::= igu ill Lista_Objetos fll pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ES_VAR1 ::= igu Exp_Log fin Exp_Ari dop Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ES_VAR1 ::= igu Acc_venta pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ES_VAR1 ::= igu Acc_conte pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES_VAR1 ::= igu Acc_boton pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES_VAR1 ::= igu idva recur_nat pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ES_VAR1 ::= igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ES_VAR1 ::= pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Datos ::= Lista_Datos com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Datos ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Objetos ::= Lista_Objetos com idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Lista_Objetos ::= idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dato_Pri ::= nume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dato_Pri ::= cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dato_Pri ::= deci 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dato_Pri ::= verd 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Dato_Pri ::= fals 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_ID ::= Lista_ID com idva 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista_ID ::= idva 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_Log ::= Exp_Log or Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_Log ::= Exp_Log and Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_Log ::= not Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_Log ::= Exp_Com 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_Com ::= Exp_Ari igu igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp_Com ::= Exp_Ari not igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp_Com ::= Exp_Ari Ex_may Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp_Com ::= Exp_Ari Ex_men Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp_Com ::= Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ex_may ::= may 
            {
              Object RESULT =null;
		RESULT=">";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ex_may ::= may igu 
            {
              Object RESULT =null;
		RESULT=">=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ex_men ::= men 
            {
              Object RESULT =null;
		RESULT="<";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ex_men ::= men igu 
            {
              Object RESULT =null;
		RESULT="<=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_Ari ::= Exp_Ari mas Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_Ari ::= Exp_Ari nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_Ari ::= Exp_Ari por Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_Ari ::= Exp_Ari div Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp_Ari ::= Exp_Ari pot Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp_Ari ::= ipa Exp_Log fpa 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp_Ari ::= nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp_Ari ::= Exp_Ari mas mas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp_Ari ::= Exp_Ari nos nos 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp_Ari ::= Dato_Posfa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dato_Posfa ::= Dato_Pri 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dato_Posfa ::= Es_tipo_id 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dato_Posfa ::= nulo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Dato_Posfa ::= Es_lla_fun 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Es_Impr ::= impr ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impr",45, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Es_Impo ::= impo ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impo",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Es_Si ::= si ipa Exp_Log fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Si",43, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Es_sino ::= sino ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sino",42, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Estru_si ::= Estru_si sino Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Estru_si ::= Estru_si Es_sino 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Estru_si ::= Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Es_asig ::= Es_tipo_id igu Exp_Log pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Es_asig ::= Es_tipo_id igu Exp_Log fin Exp_Log dop Exp_Log pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Es_asig ::= Es_tipo_id por igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Es_asig ::= Es_tipo_id div igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Es_asig ::= Es_tipo_id mas igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Es_asig ::= Es_tipo_id nos igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Es_asig ::= Es_tipo_id igu idva recur_nat pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Es_asig ::= Es_tipo_id mas mas pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Es_asig ::= Es_tipo_id nos nos pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Es_asig ::= Es_tipo_id igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Es_tipo_id ::= Es_tipo_id1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Es_tipo_id ::= Es_tipo_id1 pun idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Es_tipo_id1 ::= idva ico Exp_Ari fco 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id1",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Es_tipo_id1 ::= idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id1",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Es_sele ::= sele ipa Exp_Ari fpa ill Cuerpo_sele fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sele",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Cuerpo_sele ::= Cuerpo_sele tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Cuerpo_sele ::= tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_sele ::= caso Exp_Ari dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_sele ::= defe dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Es_func ::= func idva ipa Es_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Es_fun1 ::= Lista_parametros fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Es_fun1 ::= fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Lista_parametros ::= Lista_parametros com var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Lista_parametros ::= var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Es_lla_fun ::= idva ipa Es_lla_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Es_lla_fun1 ::= fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Es_lla_fun1 ::= Lista_Aritmetica fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Lista_Aritmetica ::= Lista_Aritmetica com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Lista_Aritmetica ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // recur_nat ::= recur_nat func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // recur_nat ::= func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // func_nat ::= Tipo_Fun ipa idva fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // func_nat ::= Tipos_Acc_Ord 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // func_nat ::= Tipo_Obte ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // func_nat ::= opno ipa Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // func_nat1 ::= func_leer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func_nat1 ::= func_gxml 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipo_Fun ::= filt 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipo_Fun ::= busc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipo_Fun ::= map 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipo_Fun ::= redu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipo_Fun ::= todo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Tipo_Fun ::= algu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Tipos_Acc_Ord ::= desc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Tipos_Acc_Ord ::= asce 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Tipos_Acc_Ord ::= inve 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Tipos_Acc_Ord ::= maxi 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Tipos_Acc_Ord ::= mini 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // func_leer ::= lgxm ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_leer",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // func_gxml ::= cada ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_gxml",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Tipo_Obte ::= opet 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Tipo_Obte ::= opid 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Acc_venta ::= cven ipa Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_venta",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Acc_conte ::= idva ccon ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_conte",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Acc_boton ::= idva cbot ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_boton",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-20)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Acc_texto ::= ctex ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_texto",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Acc_ctext ::= ccte ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_ctext",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Acc_Atext ::= cate ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Atext",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Acc_Cnume ::= ccnu ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Cnume",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Acc_despl ::= cdes ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_despl",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Acc_image ::= cima ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_image",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Acc_video ::= cvid ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_video",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Acc_repro ::= crep ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_repro",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Acc_alcar ::= acar ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Acc_alcar ::= acar ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Acc_alcer ::= acer ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Acc_alcer ::= acer ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Acc_alcli ::= acli ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcli",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Cuerpo_general ::= ES_VAR 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Cuerpo_general ::= Es_Impr 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Cuerpo_general ::= Estru_si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Cuerpo_general ::= Es_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Cuerpo_general ::= Es_asig 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Cuerpo_general ::= Es_acc_ID 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Cuerpo_general ::= reto Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Cuerpo_general ::= dete pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Estu_Cuerpo ::= Estu_Cuerpo Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Estu_Cuerpo ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Es_acc_ID ::= Es_tipo_id1 accion_ID pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_acc_ID",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // accion_ID ::= Acc_texto 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // accion_ID ::= Acc_ctext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // accion_ID ::= Acc_Atext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // accion_ID ::= Acc_Cnume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // accion_ID ::= Acc_despl 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // accion_ID ::= Acc_image 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // accion_ID ::= Acc_video 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // accion_ID ::= Acc_repro 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // accion_ID ::= pun cada ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // accion_ID ::= Acc_alcar 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // accion_ID ::= Acc_alcli 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // accion_ID ::= Acc_alcer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Cuerpo_funcion ::= Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Es_DeAu ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Es_DeAu ::= Es_func 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
