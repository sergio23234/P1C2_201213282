
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFs.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symf.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\061\004\000\002\061" +
    "\003\000\002\011\004\000\002\011\003\000\002\012\003" +
    "\000\002\077\005\000\002\076\005\000\002\076\006\000" +
    "\002\076\007\000\002\076\007\000\002\076\005\000\002" +
    "\076\005\000\002\076\005\000\002\076\005\000\002\076" +
    "\003\000\002\075\005\000\002\075\003\000\002\074\007" +
    "\000\002\074\005\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\072\005\000\002\072\003\000\002\070\003\000\002\067" +
    "\005\000\002\067\005\000\002\067\004\000\002\067\003" +
    "\000\002\066\006\000\002\066\006\000\002\066\005\000" +
    "\002\066\005\000\002\066\003\000\002\065\003\000\002" +
    "\065\004\000\002\064\003\000\002\064\004\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\004\000" +
    "\002\063\005\000\002\063\005\000\002\063\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\004\000\002\057\007\000\002\056\007" +
    "\000\002\055\011\000\002\054\006\000\002\053\005\000" +
    "\002\053\004\000\002\053\003\000\002\050\006\000\002" +
    "\050\007\000\002\050\007\000\002\050\007\000\002\050" +
    "\007\000\002\050\006\000\002\050\006\000\002\050\006" +
    "\000\002\047\003\000\002\047\005\000\002\043\006\000" +
    "\002\043\003\000\002\046\011\000\002\045\004\000\002" +
    "\045\003\000\002\044\010\000\002\044\007\000\002\042" +
    "\006\000\002\042\006\000\002\041\007\000\002\041\006" +
    "\000\002\010\006\000\002\010\004\000\002\037\005\000" +
    "\002\040\003\000\002\040\004\000\002\036\005\000\002" +
    "\036\003\000\002\062\004\000\002\062\003\000\002\034" +
    "\006\000\002\034\003\000\002\034\006\000\002\034\010" +
    "\000\002\035\003\000\002\035\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\031\006\000\002\030\006\000\002\027\003\000" +
    "\002\027\003\000\002\025\012\000\002\024\021\000\002" +
    "\023\027\000\002\022\024\000\002\021\032\000\002\017" +
    "\032\000\002\020\022\000\002\016\022\000\002\015\020" +
    "\000\002\014\020\000\002\013\020\000\002\007\006\000" +
    "\002\007\005\000\002\006\006\000\002\006\005\000\002" +
    "\026\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\004\004\000\002\004\003\000\002\003\005\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\006\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\100\004\000\002\100\003\000\002\052\003\000\002\052" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\024\027\033\033\027\034\032\035\006\036" +
    "\035\037\034\040\024\043\015\054\005\001\002\000\024" +
    "\002\uff63\027\uff63\033\uff63\035\uff63\036\uff63\037\uff63\040" +
    "\uff63\043\uff63\054\uff63\001\002\000\104\004\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\013\uffb7\016\121\020\130\030\uffb7\044" +
    "\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\103\uffb7" +
    "\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\001\002\000" +
    "\004\023\u01e6\001\002\000\026\002\uff7a\015\uff7a\027\uff7a" +
    "\033\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\043\uff7a\054" +
    "\uff7a\001\002\000\026\002\uff7f\015\uff7f\027\uff7f\033\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\043\uff7f\054\uff7f\001" +
    "\002\000\014\004\u01ce\006\u01cd\007\u01d1\010\u01d0\013\u01cf" +
    "\001\002\000\024\002\ufffc\027\033\033\027\035\006\036" +
    "\035\037\034\040\024\043\015\054\005\001\002\000\004" +
    "\002\uffff\001\002\000\024\027\033\033\027\034\032\035" +
    "\006\036\035\037\034\040\024\043\015\054\005\001\002" +
    "\000\004\054\u01c7\001\002\000\030\002\uffc3\015\uffc3\027" +
    "\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\043\uffc3" +
    "\054\uffc3\062\uffc3\001\002\000\026\002\uff7c\015\uff7c\027" +
    "\uff7c\033\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\043\uff7c" +
    "\054\uff7c\001\002\000\026\002\uff7b\015\uff7b\027\uff7b\033" +
    "\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\043\uff7b\054\uff7b" +
    "\001\002\000\024\002\uff65\027\uff65\033\uff65\035\uff65\036" +
    "\uff65\037\uff65\040\uff65\043\uff65\054\uff65\001\002\000\004" +
    "\002\u01c6\001\002\000\100\004\uffba\006\uffba\007\uffba\010" +
    "\uffba\013\uffba\030\u0129\044\142\045\137\047\132\050\131" +
    "\051\133\052\124\053\135\063\143\064\126\065\125\066" +
    "\141\070\127\071\120\072\134\075\u0131\076\u011e\077\u0123" +
    "\100\u011a\101\u0130\103\u012f\104\u0120\105\u0127\106\u0119\107" +
    "\u0124\110\u011d\001\002\000\004\016\u0106\001\002\000\026" +
    "\002\uff7e\015\uff7e\027\uff7e\033\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\043\uff7e\054\uff7e\001\002\000\024\002\uff64" +
    "\027\uff64\033\uff64\035\uff64\036\uff64\037\uff64\040\uff64\043" +
    "\uff64\054\uff64\001\002\000\004\016\u0102\001\002\000\004" +
    "\023\u0101\001\002\000\024\027\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\043\ufffd\054\ufffd\001\002" +
    "\000\004\016\375\001\002\000\004\054\354\001\002\000" +
    "\004\016\346\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\030\002\uff7d\015\uff7d\027\uff7d\033\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\043\uff7d\054\uff7d\062" +
    "\037\001\002\000\006\014\042\037\034\001\002\000\030" +
    "\002\uffc4\015\uffc4\027\uffc4\033\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\043\uffc4\054\uffc4\062\uffc4\001\002\000\030" +
    "\002\uffc5\015\uffc5\027\uffc5\033\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\043\uffc5\054\uffc5\062\uffc5\001\002\000\020" +
    "\027\045\033\027\035\006\036\035\037\034\040\024\054" +
    "\005\001\002\000\022\015\uff75\027\uff75\033\uff75\035\uff75" +
    "\036\uff75\037\uff75\040\uff75\054\uff75\001\002\000\022\015" +
    "\343\027\045\033\027\035\006\036\035\037\034\040\024" +
    "\054\005\001\002\000\004\054\047\001\002\000\010\010" +
    "\053\023\050\031\051\001\002\000\010\010\uffe7\023\uffe7" +
    "\031\uffe7\001\002\000\026\002\ufff2\015\ufff2\027\ufff2\033" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\043\ufff2\054\ufff2" +
    "\001\002\000\004\054\341\001\002\000\026\002\ufffb\015" +
    "\ufffb\027\ufffb\033\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\043\ufffb\054\ufffb\001\002\000\040\013\067\014\102\016" +
    "\063\020\074\024\065\046\073\054\057\055\071\056\070" +
    "\057\056\060\061\061\066\067\105\073\055\111\077\001" +
    "\002\000\004\023\340\001\002\000\004\016\331\001\002" +
    "\000\042\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\017\uffed\021\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\031\uffed\032\uffed\001\002\000\100\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\016\121\020\130\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\030\uffb7\044\142\045\137\047\132\050\131\051\133" +
    "\052\124\053\135\063\143\064\126\065\125\066\141\070" +
    "\127\071\120\072\134\074\270\102\267\001\002\000\004" +
    "\023\266\001\002\000\042\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\017\uffea\021\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\031\uffea\032\uffea\001" +
    "\002\000\004\023\uff9f\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\042\004\260\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\261\017\uffcd\021" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\032\uffcd" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\042\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\031\uffe9\032\uffe9\001\002\000\024\013" +
    "\067\016\063\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\042\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\017\uffeb" +
    "\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\031\uffeb\032" +
    "\uffeb\001\002\000\042\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\017\uffec\021\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\031\uffec\032\uffec\001\002" +
    "\000\004\023\255\001\002\000\004\016\252\001\002\000" +
    "\026\013\067\016\063\021\244\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\044\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\013\uffba\017\uffba\021\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\030\240\031\uffba\032\uffba\001\002\000\042\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\017\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\031\uffcf\032\uffcf\001\002\000\042\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\017\uffcc" +
    "\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\031\uffcc\032" +
    "\uffcc\001\002\000\004\023\237\001\002\000\004\023\uffa0" +
    "\001\002\000\004\054\226\001\002\000\014\017\uffe2\023" +
    "\uffe2\025\uffe2\026\uffe2\031\uffe2\001\002\000\036\004\153" +
    "\005\213\006\151\007\156\010\214\011\155\012\212\013" +
    "\154\017\uffdd\023\uffdd\024\207\025\uffdd\026\uffdd\031\uffdd" +
    "\001\002\000\004\016\204\001\002\000\042\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\017\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\031" +
    "\uffcb\032\uffcb\001\002\000\014\017\uffe6\023\uffe6\025\114" +
    "\026\113\031\uffe6\001\002\000\004\023\112\001\002\000" +
    "\042\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\017\uffce\021\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\031\uffce\032\uffce\001\002\000\026\002\ufff5" +
    "\015\ufff5\027\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\043\ufff5\054\ufff5\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\104\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\016\121\017\uffb7\020" +
    "\130\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\044\142\045\137\047\132\050\131\051" +
    "\133\052\124\053\135\063\143\064\126\065\125\066\141" +
    "\070\127\071\120\072\134\001\002\000\014\017\uffe5\023" +
    "\uffe5\025\uffe5\026\uffe5\031\uffe5\001\002\000\076\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\017\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\031\uffa5\032\uffa5\044\uffa5\045\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\001\002\000\004\016\uff90\001" +
    "\002\000\026\013\067\016\063\017\176\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\076\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\017\uffca\021\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\031\uffca\032\uffca\044\142\045\137\047\132" +
    "\050\131\051\133\052\124\053\135\063\143\064\126\065" +
    "\125\066\141\070\127\071\120\072\134\001\002\000\004" +
    "\016\170\001\002\000\004\016\uff9d\001\002\000\004\016" +
    "\uff9a\001\002\000\004\016\uff9b\001\002\000\004\016\uff91" +
    "\001\002\000\024\013\067\016\063\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\076" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\017\uff95\021\uff95\023\uff95\024\uff95\025\uff95" +
    "\026\uff95\031\uff95\032\uff95\044\uff95\045\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\053\uff95\063\uff95\064\uff95\065\uff95" +
    "\066\uff95\070\uff95\071\uff95\072\uff95\001\002\000\076\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\017\uff96\021\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\031\uff96\032\uff96\044\uff96\045\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\070\uff96\071\uff96\072\uff96\001\002\000\076\004\uff94" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013" +
    "\uff94\017\uff94\021\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\031\uff94\032\uff94\044\uff94\045\uff94\047\uff94\050\uff94\051" +
    "\uff94\052\uff94\053\uff94\063\uff94\064\uff94\065\uff94\066\uff94" +
    "\070\uff94\071\uff94\072\uff94\001\002\000\004\016\147\001" +
    "\002\000\004\016\uff9e\001\002\000\076\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\017" +
    "\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\031\uffa3" +
    "\032\uffa3\044\uffa3\045\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\001\002\000\076\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\017\uff97" +
    "\021\uff97\023\uff97\024\uff97\025\uff97\026\uff97\031\uff97\032" +
    "\uff97\044\uff97\045\uff97\047\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\063\uff97\064\uff97\065\uff97\066\uff97\070\uff97\071" +
    "\uff97\072\uff97\001\002\000\004\016\144\001\002\000\004" +
    "\016\uff99\001\002\000\076\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\017\uff98\021\uff98" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\031\uff98\032\uff98\044" +
    "\uff98\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\070\uff98\071\uff98\072" +
    "\uff98\001\002\000\004\016\uff9c\001\002\000\004\054\145" +
    "\001\002\000\004\017\146\001\002\000\076\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\017\uffa4\021\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\031" +
    "\uffa4\032\uffa4\044\uffa4\045\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\070" +
    "\uffa4\071\uffa4\072\uffa4\001\002\000\024\013\067\016\063" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\016\004\153\006\151\007\156\011\155" +
    "\013\154\031\152\001\002\000\024\013\067\016\063\054" +
    "\115\055\071\056\070\057\056\060\061\061\066\111\077" +
    "\001\002\000\024\013\067\016\063\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\024" +
    "\013\067\016\063\054\115\055\071\056\070\057\056\060" +
    "\061\061\066\111\077\001\002\000\024\013\067\016\063" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\024\013\067\016\063\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\024\013\067\016\063\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\042\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\017\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\031" +
    "\uffd5\032\uffd5\001\002\000\042\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\017\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4" +
    "\001\002\000\042\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\017\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\031\uffd7\032\uffd7\001\002\000" +
    "\042\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\017\uffd8\021\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\031\uffd8\032\uffd8\001\002\000\016\004\153" +
    "\006\151\007\156\011\155\013\154\017\164\001\002\000" +
    "\076\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\017\uffa1\021\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\031\uffa1\032\uffa1\044\uffa1\045\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\070\uffa1\071\uffa1\072\uffa1\001\002\000\042" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\017\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\031\uffd6\032\uffd6\001\002\000\016\004\153\006" +
    "\151\007\156\011\155\013\154\021\167\001\002\000\126" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\017\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\030\uffb8\031\uffb8\032\uffb8\044\uffb8\045\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\103\uffb8\104\uffb8\105\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\001\002\000\024\013\067\016" +
    "\063\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\016\004\153\006\151\007\156\011" +
    "\155\013\154\017\172\001\002\000\076\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\017" +
    "\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\031\uffa2" +
    "\032\uffa2\044\uffa2\045\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\001\002\000\076\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\017\uffa6" +
    "\021\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\031\uffa6\032" +
    "\uffa6\044\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\001\002\000\042\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\017\uffab\021" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\031\uffab\032\uffab" +
    "\001\002\000\006\017\201\031\200\001\002\000\042\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\017\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\031\uffaa\032\uffaa\001\002\000\020\004\153\006\151" +
    "\007\156\011\155\013\154\017\uffa7\031\uffa7\001\002\000" +
    "\024\013\067\016\063\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\042\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\017\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\031" +
    "\uffa9\032\uffa9\001\002\000\020\004\153\006\151\007\156" +
    "\011\155\013\154\017\uffa8\031\uffa8\001\002\000\014\017" +
    "\uffe4\023\uffe4\025\uffe4\026\uffe4\031\uffe4\001\002\000\026" +
    "\013\067\016\063\024\065\054\115\055\071\056\070\057" +
    "\056\060\061\061\066\111\077\001\002\000\004\017\206" +
    "\001\002\000\004\023\uff93\001\002\000\004\010\223\001" +
    "\002\000\024\013\067\016\063\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\024\013" +
    "\067\016\063\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\026\010\220\013\uffdc\016" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\111\uffdc\001\002\000\026\010\217\013\uffda\016\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\111\uffda" +
    "\001\002\000\004\010\215\001\002\000\024\013\067\016" +
    "\063\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\026\004\153\006\151\007\156\011" +
    "\155\013\154\017\uffe1\023\uffe1\025\uffe1\026\uffe1\031\uffe1" +
    "\001\002\000\024\013\uffd9\016\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\111\uffd9\001\002\000\024" +
    "\013\uffdb\016\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\111\uffdb\001\002\000\026\004\153\006\151" +
    "\007\156\011\155\013\154\017\uffde\023\uffde\025\uffde\026" +
    "\uffde\031\uffde\001\002\000\026\004\153\006\151\007\156" +
    "\011\155\013\154\017\uffdf\023\uffdf\025\uffdf\026\uffdf\031" +
    "\uffdf\001\002\000\024\013\067\016\063\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\026\004\153\006\151\007\156\011\155\013\154\017\uffe0" +
    "\023\uffe0\025\uffe0\026\uffe0\031\uffe0\001\002\000\006\015" +
    "\232\031\231\001\002\000\004\032\227\001\002\000\004" +
    "\055\230\001\002\000\006\015\uffee\031\uffee\001\002\000" +
    "\004\054\234\001\002\000\004\023\233\001\002\000\026" +
    "\002\ufff7\015\ufff7\027\ufff7\033\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\043\ufff7\054\ufff7\001\002\000\004\032\235" +
    "\001\002\000\004\055\236\001\002\000\006\015\uffef\031" +
    "\uffef\001\002\000\026\002\ufff4\015\ufff4\027\ufff4\033\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\043\ufff4\054\ufff4\001" +
    "\002\000\004\054\241\001\002\000\042\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\017" +
    "\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\031\uffb9" +
    "\032\uffb9\001\002\000\006\021\247\031\246\001\002\000" +
    "\020\004\153\006\151\007\156\011\155\013\154\021\ufff0" +
    "\031\ufff0\001\002\000\004\023\245\001\002\000\026\002" +
    "\ufff9\015\ufff9\027\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\043\ufff9\054\ufff9\001\002\000\024\013\067\016" +
    "\063\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\023\250\001\002\000\026\002" +
    "\ufff8\015\ufff8\027\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\043\ufff8\054\ufff8\001\002\000\020\004\153\006" +
    "\151\007\156\011\155\013\154\021\ufff1\031\ufff1\001\002" +
    "\000\026\013\067\016\063\024\065\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\004" +
    "\017\254\001\002\000\004\023\uff92\001\002\000\026\002" +
    "\ufffa\015\ufffa\027\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\043\ufffa\054\ufffa\001\002\000\042\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\017\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031" +
    "\uffd2\032\uffd2\001\002\000\014\017\uffe3\023\uffe3\025\uffe3" +
    "\026\uffe3\031\uffe3\001\002\000\004\004\263\001\002\000" +
    "\004\013\262\001\002\000\042\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\017\uffd0\021" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\032\uffd0" +
    "\001\002\000\042\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\017\uffd1\021\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\031\uffd1\032\uffd1\001\002\000" +
    "\010\017\265\025\114\026\113\001\002\000\042\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\017\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\031\uffd3\032\uffd3\001\002\000\026\002\ufff3\015\ufff3\027" +
    "\ufff3\033\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\043\ufff3" +
    "\054\ufff3\001\002\000\004\016\306\001\002\000\004\016" +
    "\271\001\002\000\026\013\067\016\063\024\065\054\115" +
    "\055\071\056\070\057\056\060\061\061\066\111\077\001" +
    "\002\000\004\031\273\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\004\031\275\001\002\000\026" +
    "\013\067\016\063\024\065\054\115\055\071\056\070\057" +
    "\056\060\061\061\066\111\077\001\002\000\004\031\277" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\004\031\301\001\002\000\026\013\067\016\063\024" +
    "\065\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\031\303\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\017\305\001" +
    "\002\000\004\023\uff8e\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\004\031\310\001\002\000\026" +
    "\013\067\016\063\024\065\054\115\055\071\056\070\057" +
    "\056\060\061\061\066\111\077\001\002\000\004\031\312" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\004\031\314\001\002\000\026\013\067\016\063\024" +
    "\065\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\031\316\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\031\320\001" +
    "\002\000\026\013\067\016\063\024\065\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\004\031\322\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\031\324\001\002\000\026\013\067" +
    "\016\063\024\065\054\115\055\071\056\070\057\056\060" +
    "\061\061\066\111\077\001\002\000\004\031\326\001\002" +
    "\000\026\013\067\016\063\024\065\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\004" +
    "\017\330\001\002\000\004\023\uff8d\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\031\333\001" +
    "\002\000\026\013\067\016\063\024\065\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\004\031\335\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\017\337\001\002\000\004\023\uff8f" +
    "\001\002\000\026\002\ufff6\015\ufff6\027\ufff6\033\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\043\ufff6\054\ufff6\001\002" +
    "\000\010\010\uffe8\023\uffe8\031\uffe8\001\002\000\022\015" +
    "\uff76\027\uff76\033\uff76\035\uff76\036\uff76\037\uff76\040\uff76" +
    "\054\uff76\001\002\000\030\002\uffc6\015\uffc6\027\uffc6\033" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043\uffc6\054\uffc6" +
    "\062\uffc6\001\002\000\004\023\345\001\002\000\026\002" +
    "\uff79\015\uff79\027\uff79\033\uff79\035\uff79\036\uff79\037\uff79" +
    "\040\uff79\043\uff79\054\uff79\001\002\000\026\013\067\016" +
    "\063\024\065\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\010\017\350\025\114\026" +
    "\113\001\002\000\004\014\351\001\002\000\020\027\045" +
    "\033\027\035\006\036\035\037\034\040\024\054\005\001" +
    "\002\000\022\015\353\027\045\033\027\035\006\036\035" +
    "\037\034\040\024\054\005\001\002\000\030\002\uffc7\015" +
    "\uffc7\027\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\043\uffc7\054\uffc7\062\uffc7\001\002\000\012\010\uffe7\016" +
    "\355\023\uffe7\031\uffe7\001\002\000\006\017\357\027\356" +
    "\001\002\000\004\054\374\001\002\000\004\014\371\001" +
    "\002\000\024\002\uffb0\027\uffb0\033\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\043\uffb0\054\uffb0\001\002\000\006\017" +
    "\363\031\362\001\002\000\004\027\367\001\002\000\004" +
    "\014\364\001\002\000\020\027\045\033\027\035\006\036" +
    "\035\037\034\040\024\054\005\001\002\000\022\015\366" +
    "\027\045\033\027\035\006\036\035\037\034\040\024\054" +
    "\005\001\002\000\024\002\uffaf\027\uffaf\033\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\043\uffaf\054\uffaf\001\002\000" +
    "\004\054\370\001\002\000\006\017\uffad\031\uffad\001\002" +
    "\000\020\027\045\033\027\035\006\036\035\037\034\040" +
    "\024\054\005\001\002\000\022\015\373\027\045\033\027" +
    "\035\006\036\035\037\034\040\024\054\005\001\002\000" +
    "\024\002\uffae\027\uffae\033\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\043\uffae\054\uffae\001\002\000\006\017\uffac\031" +
    "\uffac\001\002\000\024\013\067\016\063\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\016\004\153\006\151\007\156\011\155\013\154\017\377" +
    "\001\002\000\004\023\u0100\001\002\000\024\027\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\043\uffc8" +
    "\054\uffc8\001\002\000\026\002\uff78\015\uff78\027\uff78\033" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\043\uff78\054\uff78" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\004\017\u0104\001\002\000\004\023\u0105\001\002\000" +
    "\026\002\uffc9\015\uffc9\027\uffc9\033\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\043\uffc9\054\uffc9\001\002\000\024\013" +
    "\067\016\063\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\016\004\153\006\151\007" +
    "\156\011\155\013\154\017\u0108\001\002\000\004\014\u0109" +
    "\001\002\000\006\041\u010c\042\u010b\001\002\000\010\015" +
    "\uffb4\041\uffb4\042\uffb4\001\002\000\004\032\u0115\001\002" +
    "\000\024\013\067\016\063\054\115\055\071\056\070\057" +
    "\056\060\061\061\066\111\077\001\002\000\010\015\u010f" +
    "\041\u010c\042\u010b\001\002\000\010\015\uffb5\041\uffb5\042" +
    "\uffb5\001\002\000\026\002\uffb6\015\uffb6\027\uffb6\033\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\043\uffb6\054\uffb6\001" +
    "\002\000\016\004\153\006\151\007\156\011\155\013\154" +
    "\032\u0111\001\002\000\004\014\u0112\001\002\000\020\027" +
    "\045\033\027\035\006\036\035\037\034\040\024\054\005" +
    "\001\002\000\022\015\u0114\027\045\033\027\035\006\036" +
    "\035\037\034\040\024\054\005\001\002\000\010\015\uffb3" +
    "\041\uffb3\042\uffb3\001\002\000\004\014\u0116\001\002\000" +
    "\020\027\045\033\027\035\006\036\035\037\034\040\024" +
    "\054\005\001\002\000\022\015\u0118\027\045\033\027\035" +
    "\006\036\035\037\034\040\024\054\005\001\002\000\010" +
    "\015\uffb2\041\uffb2\042\uffb2\001\002\000\004\016\u01c3\001" +
    "\002\000\004\016\u01b4\001\002\000\004\023\uff72\001\002" +
    "\000\004\023\uff6a\001\002\000\004\016\u01b0\001\002\000" +
    "\004\016\u0199\001\002\000\040\023\uff68\044\142\045\137" +
    "\047\132\050\131\051\133\052\124\053\135\063\143\064" +
    "\126\065\125\066\141\070\127\071\120\072\134\001\002" +
    "\000\004\016\u018c\001\002\000\004\023\uff70\001\002\000" +
    "\004\023\uff71\001\002\000\004\016\u0175\001\002\000\004" +
    "\016\u0170\001\002\000\004\023\uff73\001\002\000\004\023" +
    "\uff6c\001\002\000\004\016\u0163\001\002\000\004\023\uff69" +
    "\001\002\000\006\046\u0160\054\241\001\002\000\004\023" +
    "\u015f\001\002\000\004\023\uff6f\001\002\000\004\023\uff6d" +
    "\001\002\000\004\023\uff6e\001\002\000\004\023\uff67\001" +
    "\002\000\004\016\u0152\001\002\000\004\016\u0143\001\002" +
    "\000\004\016\u0132\001\002\000\026\013\067\016\063\024" +
    "\065\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\031\u0134\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\031\u0136\001" +
    "\002\000\026\013\067\016\063\024\065\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\004\031\u0138\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\031\u013a\001\002\000\026\013\067" +
    "\016\063\024\065\054\115\055\071\056\070\057\056\060" +
    "\061\061\066\111\077\001\002\000\004\031\u013c\001\002" +
    "\000\026\013\067\016\063\024\065\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\004" +
    "\031\u013e\001\002\000\026\013\067\016\063\024\065\054" +
    "\115\055\071\056\070\057\056\060\061\061\066\111\077" +
    "\001\002\000\004\031\u0140\001\002\000\026\013\067\016" +
    "\063\024\065\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\004\017\u0142\001\002\000" +
    "\004\023\uff8c\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\031\u0145\001\002\000\026\013\067" +
    "\016\063\024\065\054\115\055\071\056\070\057\056\060" +
    "\061\061\066\111\077\001\002\000\004\031\u0147\001\002" +
    "\000\026\013\067\016\063\024\065\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\004" +
    "\031\u0149\001\002\000\026\013\067\016\063\024\065\054" +
    "\115\055\071\056\070\057\056\060\061\061\066\111\077" +
    "\001\002\000\004\031\u014b\001\002\000\026\013\067\016" +
    "\063\024\065\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\004\031\u014d\001\002\000" +
    "\026\013\067\016\063\024\065\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\004\031" +
    "\u014f\001\002\000\026\013\067\016\063\024\065\054\115" +
    "\055\071\056\070\057\056\060\061\061\066\111\077\001" +
    "\002\000\004\017\u0151\001\002\000\004\023\uff88\001\002" +
    "\000\026\013\067\016\063\024\065\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\004" +
    "\031\u0154\001\002\000\026\013\067\016\063\024\065\054" +
    "\115\055\071\056\070\057\056\060\061\061\066\111\077" +
    "\001\002\000\004\031\u0156\001\002\000\026\013\067\016" +
    "\063\024\065\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\004\031\u0158\001\002\000" +
    "\026\013\067\016\063\024\065\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\004\031" +
    "\u015a\001\002\000\026\013\067\016\063\024\065\054\115" +
    "\055\071\056\070\057\056\060\061\061\066\111\077\001" +
    "\002\000\004\031\u015c\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\004\017\u015e\001\002\000\004" +
    "\023\uff87\001\002\000\026\002\uff74\015\uff74\027\uff74\033" +
    "\uff74\035\uff74\036\uff74\037\uff74\040\uff74\043\uff74\054\uff74" +
    "\001\002\000\004\016\u0161\001\002\000\004\017\u0162\001" +
    "\002\000\004\023\uff6b\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\004\031\u0165\001\002\000\026" +
    "\013\067\016\063\024\065\054\115\055\071\056\070\057" +
    "\056\060\061\061\066\111\077\001\002\000\004\031\u0167" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\004\031\u0169\001\002\000\026\013\067\016\063\024" +
    "\065\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\031\u016b\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\031\u016d\001" +
    "\002\000\026\013\067\016\063\024\065\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\004\017\u016f\001\002\000\004\023\uff86\001\002\000\006" +
    "\017\u0172\054\u0173\001\002\000\004\017\u0174\001\002\000" +
    "\004\023\uff83\001\002\000\004\016\121\001\002\000\004" +
    "\023\uff84\001\002\000\026\013\067\016\063\024\065\054" +
    "\115\055\071\056\070\057\056\060\061\061\066\111\077" +
    "\001\002\000\004\031\u0177\001\002\000\026\013\067\016" +
    "\063\024\065\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\004\031\u0179\001\002\000" +
    "\026\013\067\016\063\024\065\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\004\031" +
    "\u017b\001\002\000\026\013\067\016\063\024\065\054\115" +
    "\055\071\056\070\057\056\060\061\061\066\111\077\001" +
    "\002\000\004\031\u017d\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\004\031\u017f\001\002\000\026" +
    "\013\067\016\063\024\065\054\115\055\071\056\070\057" +
    "\056\060\061\061\066\111\077\001\002\000\004\031\u0181" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\004\031\u0183\001\002\000\026\013\067\016\063\024" +
    "\065\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\031\u0185\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\031\u0187\001" +
    "\002\000\026\013\067\016\063\024\065\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\004\031\u0189\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\017\u018b\001\002\000\004\023\uff8a" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\004\031\u018e\001\002\000\026\013\067\016\063\024" +
    "\065\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\031\u0190\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\031\u0192\001" +
    "\002\000\026\013\067\016\063\024\065\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\004\031\u0194\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\031\u0196\001\002\000\026\013\067" +
    "\016\063\024\065\054\115\055\071\056\070\057\056\060" +
    "\061\061\066\111\077\001\002\000\004\017\u0198\001\002" +
    "\000\004\023\uff85\001\002\000\026\013\067\016\063\024" +
    "\065\054\115\055\071\056\070\057\056\060\061\061\066" +
    "\111\077\001\002\000\004\031\u019b\001\002\000\026\013" +
    "\067\016\063\024\065\054\115\055\071\056\070\057\056" +
    "\060\061\061\066\111\077\001\002\000\004\031\u019d\001" +
    "\002\000\026\013\067\016\063\024\065\054\115\055\071" +
    "\056\070\057\056\060\061\061\066\111\077\001\002\000" +
    "\004\031\u019f\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\031\u01a1\001\002\000\026\013\067" +
    "\016\063\024\065\054\115\055\071\056\070\057\056\060" +
    "\061\061\066\111\077\001\002\000\004\031\u01a3\001\002" +
    "\000\026\013\067\016\063\024\065\054\115\055\071\056" +
    "\070\057\056\060\061\061\066\111\077\001\002\000\004" +
    "\031\u01a5\001\002\000\026\013\067\016\063\024\065\054" +
    "\115\055\071\056\070\057\056\060\061\061\066\111\077" +
    "\001\002\000\004\031\u01a7\001\002\000\026\013\067\016" +
    "\063\024\065\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\004\031\u01a9\001\002\000" +
    "\026\013\067\016\063\024\065\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\004\031" +
    "\u01ab\001\002\000\026\013\067\016\063\024\065\054\115" +
    "\055\071\056\070\057\056\060\061\061\066\111\077\001" +
    "\002\000\004\031\u01ad\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\004\017\u01af\001\002\000\004" +
    "\023\uff8b\001\002\000\006\017\u01b2\054\u0173\001\002\000" +
    "\004\017\u01b3\001\002\000\004\023\uff81\001\002\000\004" +
    "\023\uff82\001\002\000\026\013\067\016\063\024\065\054" +
    "\115\055\071\056\070\057\056\060\061\061\066\111\077" +
    "\001\002\000\004\031\u01b6\001\002\000\026\013\067\016" +
    "\063\024\065\054\115\055\071\056\070\057\056\060\061" +
    "\061\066\111\077\001\002\000\004\031\u01b8\001\002\000" +
    "\026\013\067\016\063\024\065\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\004\031" +
    "\u01ba\001\002\000\026\013\067\016\063\024\065\054\115" +
    "\055\071\056\070\057\056\060\061\061\066\111\077\001" +
    "\002\000\004\031\u01bc\001\002\000\026\013\067\016\063" +
    "\024\065\054\115\055\071\056\070\057\056\060\061\061" +
    "\066\111\077\001\002\000\004\031\u01be\001\002\000\026" +
    "\013\067\016\063\024\065\054\115\055\071\056\070\057" +
    "\056\060\061\061\066\111\077\001\002\000\004\031\u01c0" +
    "\001\002\000\026\013\067\016\063\024\065\054\115\055" +
    "\071\056\070\057\056\060\061\061\066\111\077\001\002" +
    "\000\004\017\u01c2\001\002\000\004\023\uff89\001\002\000" +
    "\004\054\u0173\001\002\000\004\017\u01c5\001\002\000\004" +
    "\023\uff80\001\002\000\004\002\001\001\002\000\004\016" +
    "\u01c8\001\002\000\006\017\357\027\356\001\002\000\024" +
    "\002\uffb1\027\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\043\uffb1\054\uffb1\001\002\000\004\002\000\001\002" +
    "\000\024\027\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\043\ufffe\054\ufffe\001\002\000\024\002\uff66" +
    "\027\uff66\033\uff66\035\uff66\036\uff66\037\uff66\040\uff66\043" +
    "\uff66\054\uff66\001\002\000\004\010\u01e3\001\002\000\006" +
    "\004\u01de\010\u01df\001\002\000\006\010\u01da\013\u01d9\001" +
    "\002\000\032\013\067\016\063\024\065\046\073\054\115" +
    "\055\071\056\070\057\056\060\061\061\066\067\105\111" +
    "\077\001\002\000\004\010\u01d2\001\002\000\026\013\067" +
    "\016\063\024\065\054\115\055\071\056\070\057\056\060" +
    "\061\061\066\111\077\001\002\000\004\023\u01d4\001\002" +
    "\000\026\002\uffc0\015\uffc0\027\uffc0\033\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\043\uffc0\054\uffc0\001\002\000\004" +
    "\023\u01d8\001\002\000\004\023\u01d7\001\002\000\026\002" +
    "\uffc2\015\uffc2\027\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\043\uffc2\054\uffc2\001\002\000\026\002\uffbb\015" +
    "\uffbb\027\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\043\uffbb\054\uffbb\001\002\000\004\023\u01dd\001\002\000" +
    "\026\013\067\016\063\024\065\054\115\055\071\056\070" +
    "\057\056\060\061\061\066\111\077\001\002\000\004\023" +
    "\u01dc\001\002\000\026\002\uffbe\015\uffbe\027\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\043\uffbe\054\uffbe\001" +
    "\002\000\026\002\uffbc\015\uffbc\027\uffbc\033\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\043\uffbc\054\uffbc\001\002\000" +
    "\004\023\u01e2\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\023\u01e1\001\002\000\026\002\uffbf" +
    "\015\uffbf\027\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\043\uffbf\054\uffbf\001\002\000\026\002\uffbd\015\uffbd" +
    "\027\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\043" +
    "\uffbd\054\uffbd\001\002\000\026\013\067\016\063\024\065" +
    "\054\115\055\071\056\070\057\056\060\061\061\066\111" +
    "\077\001\002\000\004\023\u01e5\001\002\000\026\002\uffc1" +
    "\015\uffc1\027\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\043\uffc1\054\uffc1\001\002\000\026\002\uff77\015\uff77" +
    "\027\uff77\033\uff77\035\uff77\036\uff77\037\uff77\040\uff77\043" +
    "\uff77\054\uff77\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\046\003\006\005\025\011\013\012\012\037" +
    "\027\042\003\043\022\046\016\047\010\050\017\052\020" +
    "\053\035\055\015\056\030\057\024\061\021\077\007\100" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\006\005\025\037\027\042\003\043\022" +
    "\046\016\047\010\050\017\052\u01cb\053\035\055\015\057" +
    "\024\077\007\001\001\000\002\001\001\000\042\003\006" +
    "\005\025\012\u01c9\037\027\042\003\043\022\046\016\047" +
    "\010\050\017\052\020\053\035\055\015\056\u01ca\057\024" +
    "\077\007\100\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\u0129\006\u012d\007\u011b\013" +
    "\u0125\014\u012b\015\u012c\016\u012a\017\u0121\020\u0120\021\u011a" +
    "\022\u0124\026\u0127\027\122\032\135\033\137\034\116\062" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\045\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\343\071\075\073\110\001\001\000\004" +
    "\054\037\001\001\000\004\055\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\006\004\043\005\042" +
    "\037\027\043\022\046\016\047\010\050\017\053\035\055" +
    "\015\057\024\077\007\001\001\000\002\001\001\000\030" +
    "\003\006\005\341\037\027\043\022\046\016\047\010\050" +
    "\017\053\035\055\015\057\024\077\007\001\001\000\004" +
    "\072\045\001\001\000\004\076\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\023\077\024\107\025\053\030\061\031\100\035" +
    "\057\037\105\043\074\047\063\063\103\066\102\067\106" +
    "\070\071\071\075\073\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\027\122\032\135" +
    "\033\137\034\116\062\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\037\105\043\074" +
    "\047\063\063\103\066\102\067\263\071\075\073\110\001" +
    "\001\000\002\001\001\000\022\037\105\043\074\047\063" +
    "\063\103\066\102\067\256\071\075\073\110\001\001\000" +
    "\002\001\001\000\016\037\105\043\074\047\063\063\255" +
    "\071\075\073\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\037\105" +
    "\043\074\047\063\063\242\071\075\073\110\075\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\224\001" +
    "\001\000\002\001\001\000\006\064\210\065\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\037\105\043\074\047\063\063\103\066\102\067\202\071" +
    "\075\073\110\001\001\000\022\037\105\043\074\047\063" +
    "\063\103\066\102\067\115\071\075\073\110\001\001\000" +
    "\014\027\122\032\135\033\137\034\116\062\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\174\037\105\040\173\043\074\047\063\063\176" +
    "\071\075\073\110\001\001\000\012\027\122\032\135\033" +
    "\137\034\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\037\105\043\074\047\063\063\165\071\075\073\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\105\043\074\047" +
    "\063\063\147\071\075\073\110\001\001\000\002\001\001" +
    "\000\016\037\105\043\074\047\063\063\164\071\075\073" +
    "\110\001\001\000\016\037\105\043\074\047\063\063\162" +
    "\071\075\073\110\001\001\000\016\037\105\043\074\047" +
    "\063\063\161\071\075\073\110\001\001\000\016\037\105" +
    "\043\074\047\063\063\160\071\075\073\110\001\001\000" +
    "\016\037\105\043\074\047\063\063\157\071\075\073\110" +
    "\001\001\000\016\037\105\043\074\047\063\063\156\071" +
    "\075\073\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\105\043\074\047\063\063\170\071" +
    "\075\073\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\037\105\043\074" +
    "\047\063\063\201\071\075\073\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\204\071" +
    "\075\073\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\037\105\043\074\047\063\063" +
    "\221\071\075\073\110\001\001\000\016\037\105\043\074" +
    "\047\063\063\220\071\075\073\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\037\105" +
    "\043\074\047\063\063\215\071\075\073\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\105\043\074\047" +
    "\063\063\223\071\075\073\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\037\105\043\074\047\063\063\250" +
    "\071\075\073\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\037\105\043\074\047\063" +
    "\063\103\066\102\067\106\070\252\071\075\073\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\037\105\043\074\047\063" +
    "\063\103\066\102\067\106\070\271\071\075\073\110\001" +
    "\001\000\002\001\001\000\024\037\105\043\074\047\063" +
    "\063\103\066\102\067\106\070\273\071\075\073\110\001" +
    "\001\000\002\001\001\000\024\037\105\043\074\047\063" +
    "\063\103\066\102\067\106\070\275\071\075\073\110\001" +
    "\001\000\002\001\001\000\024\037\105\043\074\047\063" +
    "\063\103\066\102\067\106\070\277\071\075\073\110\001" +
    "\001\000\002\001\001\000\024\037\105\043\074\047\063" +
    "\063\103\066\102\067\106\070\301\071\075\073\110\001" +
    "\001\000\002\001\001\000\024\037\105\043\074\047\063" +
    "\063\103\066\102\067\106\070\303\071\075\073\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\306\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\310\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\312\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\314\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\316\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\320\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\322\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\324\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\326\071" +
    "\075\073\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\331\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\333\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\335\071\075\073\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\037\105\043\074\047\063\063\103\066" +
    "\102\067\346\071\075\073\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\006\004\351\005\042\037" +
    "\027\043\022\046\016\047\010\050\017\053\035\055\015" +
    "\057\024\077\007\001\001\000\030\003\006\005\341\037" +
    "\027\043\022\046\016\047\010\050\017\053\035\055\015" +
    "\057\024\077\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\360\041\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\006\004\364" +
    "\005\042\037\027\043\022\046\016\047\010\050\017\053" +
    "\035\055\015\057\024\077\007\001\001\000\030\003\006" +
    "\005\341\037\027\043\022\046\016\047\010\050\017\053" +
    "\035\055\015\057\024\077\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\006\004" +
    "\371\005\042\037\027\043\022\046\016\047\010\050\017" +
    "\053\035\055\015\057\024\077\007\001\001\000\030\003" +
    "\006\005\341\037\027\043\022\046\016\047\010\050\017" +
    "\053\035\055\015\057\024\077\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\037\105\043\074\047\063" +
    "\063\375\071\075\073\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\037\105\043\074\047\063\063\103\066\102\067\106\070" +
    "\u0102\071\075\073\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\105\043\074\047" +
    "\063\063\u0106\071\075\073\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\u0109\045\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\037\105\043\074" +
    "\047\063\063\u010f\071\075\073\110\001\001\000\004\044" +
    "\u010d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\006\004\u0112\005" +
    "\042\037\027\043\022\046\016\047\010\050\017\053\035" +
    "\055\015\057\024\077\007\001\001\000\030\003\006\005" +
    "\341\037\027\043\022\046\016\047\010\050\017\053\035" +
    "\055\015\057\024\077\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\006\004\u0116\005\042\037\027" +
    "\043\022\046\016\047\010\050\017\053\035\055\015\057" +
    "\024\077\007\001\001\000\030\003\006\005\341\037\027" +
    "\043\022\046\016\047\010\050\017\053\035\055\015\057" +
    "\024\077\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\027\122\032\135" +
    "\033\137\034\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u0132\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u0134\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u0136\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u0138\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u013a\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u013c\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u013e\071\075\073\110\001\001\000\002\001\001" +
    "\000\024\037\105\043\074\047\063\063\103\066\102\067" +
    "\106\070\u0140\071\075\073\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\037\105\043\074\047\063\063" +
    "\103\066\102\067\106\070\u0143\071\075\073\110\001\001" +
    "\000\002\001\001\000\024\037\105\043\074\047\063\063" +
    "\103\066\102\067\106\070\u0145\071\075\073\110\001\001" +
    "\000\002\001\001\000\024\037\105\043\074\047\063\063" +
    "\103\066\102\067\106\070\u0147\071\075\073\110\001\001" +
    "\000\002\001\001\000\024\037\105\043\074\047\063\063" +
    "\103\066\102\067\106\070\u0149\071\075\073\110\001\001" +
    "\000\002\001\001\000\024\037\105\043\074\047\063\063" +
    "\103\066\102\067\106\070\u014b\071\075\073\110\001\001" +
    "\000\002\001\001\000\024\037\105\043\074\047\063\063" +
    "\103\066\102\067\106\070\u014d\071\075\073\110\001\001" +
    "\000\002\001\001\000\024\037\105\043\074\047\063\063" +
    "\103\066\102\067\106\070\u014f\071\075\073\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\037\105\043" +
    "\074\047\063\063\103\066\102\067\106\070\u0152\071\075" +
    "\073\110\001\001\000\002\001\001\000\024\037\105\043" +
    "\074\047\063\063\103\066\102\067\106\070\u0154\071\075" +
    "\073\110\001\001\000\002\001\001\000\024\037\105\043" +
    "\074\047\063\063\103\066\102\067\106\070\u0156\071\075" +
    "\073\110\001\001\000\002\001\001\000\024\037\105\043" +
    "\074\047\063\063\103\066\102\067\106\070\u0158\071\075" +
    "\073\110\001\001\000\002\001\001\000\024\037\105\043" +
    "\074\047\063\063\103\066\102\067\106\070\u015a\071\075" +
    "\073\110\001\001\000\002\001\001\000\024\037\105\043" +
    "\074\047\063\063\103\066\102\067\106\070\u015c\071\075" +
    "\073\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0163\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0165\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0167\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0169\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u016b\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u016d\071\075\073\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u0170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0175\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0177\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0179\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u017b\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u017d\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u017f\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0181\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0183\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0185\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0187\071\075\073\110\001\001\000\002" +
    "\001\001\000\024\037\105\043\074\047\063\063\103\066" +
    "\102\067\106\070\u0189\071\075\073\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u018c\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u018e\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u0190\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u0192\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u0194\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u0196\071\075\073\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u0199" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u019b" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u019d" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u019f" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u01a1" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u01a3" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u01a5" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u01a7" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u01a9" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u01ab" +
    "\071\075\073\110\001\001\000\002\001\001\000\024\037" +
    "\105\043\074\047\063\063\103\066\102\067\106\070\u01ad" +
    "\071\075\073\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u01b0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01b4\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01b6\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01b8\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01ba\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01bc\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01be\071\075\073\110" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01c0\071\075\073\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u01c3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\360\041\u01c8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\030\061\031\100\035\u01d4\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\u01d5\071" +
    "\075\073\110\001\001\000\002\001\001\000\024\037\105" +
    "\043\074\047\063\063\103\066\102\067\106\070\u01d2\071" +
    "\075\073\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\037\105\043\074" +
    "\047\063\063\103\066\102\067\106\070\u01da\071\075\073" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\037\105\043\074\047" +
    "\063\063\103\066\102\067\106\070\u01df\071\075\073\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\037\105\043\074\047\063\063\103\066\102" +
    "\067\106\070\u01e3\071\075\073\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public Raiz regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public Raiz RCCSS;
	 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {


    public String estado="";

  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= inicio_p1 inicio_p2 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= inicio_p2 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_p1 ::= inicio_p1 Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_p1 ::= Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio_p2 ::= Cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p2",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ES_VAR ::= var Lista_ID ES_VAR1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ES_VAR1 ::= igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_VAR1 ::= igu ico fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ES_VAR1 ::= igu ico Lista_Datos fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ES_VAR1 ::= igu ill Lista_Objetos fll pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ES_VAR1 ::= igu Acc_venta pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ES_VAR1 ::= igu Acc_conte pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES_VAR1 ::= igu Acc_boton pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES_VAR1 ::= igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ES_VAR1 ::= pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Datos ::= Lista_Datos com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Datos ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Objetos ::= Lista_Objetos com idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Objetos ::= idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Dato_Pri ::= nume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dato_Pri ::= cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dato_Pri ::= deci 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dato_Pri ::= verd 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dato_Pri ::= fals 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lista_ID ::= Lista_ID com idva 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_ID ::= idva 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp_Log1 ::= Exp_Log 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_Log ::= Exp_Log or Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_Log ::= Exp_Log and Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_Log ::= not Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_Log ::= Exp_Com 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_Com ::= Exp_Ari igu igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp_Com ::= Exp_Ari not igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp_Com ::= Exp_Ari Ex_may Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp_Com ::= Exp_Ari Ex_men Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp_Com ::= Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		System.out.println("Entro a La ultima Expresion");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ex_may ::= may 
            {
              Object RESULT =null;
		RESULT=">";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ex_may ::= may igu 
            {
              Object RESULT =null;
		RESULT=">=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ex_men ::= men 
            {
              Object RESULT =null;
		RESULT="<";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ex_men ::= men igu 
            {
              Object RESULT =null;
		RESULT="<=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_Ari ::= Exp_Ari mas Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		System.out.println("reconocio datos1");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_Ari ::= Exp_Ari nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_Ari ::= Exp_Ari por Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_Ari ::= Exp_Ari div Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp_Ari ::= Exp_Ari pot Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp_Ari ::= ipa Exp_Log fpa 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp_Ari ::= nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp_Ari ::= Es_tipo_id mas mas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp_Ari ::= Es_tipo_id nos nos 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp_Ari ::= Dato_Posfa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dato_Posfa ::= Dato_Pri 
            {
              Object RESULT =null;
		System.out.println("entro a este estado primario");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dato_Posfa ::= Es_tipo_id 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de tipos ID");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dato_Posfa ::= nulo 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de nulo");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Dato_Posfa ::= Es_lla_fun 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de llamada a funcion");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Dato_Posfa ::= idva recur_nat 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de id.funcionesnativas");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Es_Impr ::= impr ipa Exp_Log1 fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impr",45, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Es_Impo ::= impo ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impo",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Es_Si ::= si ipa Exp_Log fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Si",43, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Es_sino ::= sino ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sino",42, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Estru_si ::= Estru_si sino Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Estru_si ::= Estru_si Es_sino 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Estru_si ::= Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Es_asig ::= Es_tipo_id igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Es_asig ::= Es_tipo_id por igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Es_asig ::= Es_tipo_id div igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Es_asig ::= Es_tipo_id mas igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Es_asig ::= Es_tipo_id nos igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Es_asig ::= Es_tipo_id mas mas pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Es_asig ::= Es_tipo_id nos nos pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Es_asig ::= Es_tipo_id igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Es_tipo_id ::= Es_tipo_id1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Es_tipo_id ::= Es_tipo_id1 pun idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Es_tipo_id1 ::= idva ico Exp_Ari fco 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id1",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Es_tipo_id1 ::= idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id1",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Es_sele ::= sele ipa Exp_Ari fpa ill Cuerpo_sele fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sele",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Cuerpo_sele ::= Cuerpo_sele tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Cuerpo_sele ::= tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_sele ::= caso Exp_Ari dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_sele ::= defe dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Es_func ::= func idva ipa Es_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Es_func ::= var idva ipa Es_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Es_fun1 ::= Lista_parametros fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Es_fun1 ::= fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Lista_parametros ::= Lista_parametros com var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Lista_parametros ::= var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Es_lla_fun ::= idva ipa Es_lla_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Es_lla_fun1 ::= fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Es_lla_fun1 ::= Lista_Aritmetica fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Lista_Aritmetica ::= Lista_Aritmetica com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Lista_Aritmetica ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // recur_nat ::= recur_nat func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // recur_nat ::= func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // func_nat ::= Tipo_Fun ipa idva fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // func_nat ::= Tipos_Acc_Ord 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // func_nat ::= Tipo_Obte ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // func_nat ::= opno ipa Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // func_nat1 ::= func_leer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func_nat1 ::= func_gxml 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipo_Fun ::= filt 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipo_Fun ::= busc 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipo_Fun ::= map 
            {
              Object RESULT =null;
		RESULT=3;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipo_Fun ::= redu 
            {
              Object RESULT =null;
		RESULT=4;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipo_Fun ::= todo 
            {
              Object RESULT =null;
		RESULT=5;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Tipo_Fun ::= algu 
            {
              Object RESULT =null;
		RESULT=6;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Tipos_Acc_Ord ::= desc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Tipos_Acc_Ord ::= asce 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Tipos_Acc_Ord ::= inve 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Tipos_Acc_Ord ::= maxi 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Tipos_Acc_Ord ::= mini 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // func_leer ::= lgxm ipa Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_leer",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // func_gxml ::= cada ipa Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_gxml",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Tipo_Obte ::= opet 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Tipo_Obte ::= opid 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Acc_venta ::= cven ipa Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_venta",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Acc_conte ::= idva ccon ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_conte",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Acc_boton ::= idva cbot ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_boton",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-20)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Acc_texto ::= ctex ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_texto",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Acc_ctext ::= ccte ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_ctext",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Acc_Atext ::= cate ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Atext",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Acc_Cnume ::= ccnu ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Cnume",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Acc_despl ::= cdes ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_despl",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Acc_image ::= cima ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_image",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Acc_video ::= cvid ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_video",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Acc_repro ::= crep ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_repro",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Acc_alcar ::= acar ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Acc_alcar ::= acar ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Acc_alcer ::= acer ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Acc_alcer ::= acer ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Acc_alcli ::= acli ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcli",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Cuerpo_general ::= ES_VAR 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Cuerpo_general ::= Es_Impr 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Cuerpo_general ::= Estru_si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Cuerpo_general ::= Es_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Cuerpo_general ::= Es_asig 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Cuerpo_general ::= Es_acc_ID 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Cuerpo_general ::= reto Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Cuerpo_general ::= Es_lla_fun pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Cuerpo_general ::= dete pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Estu_Cuerpo ::= Estu_Cuerpo Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Estu_Cuerpo ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Es_acc_ID ::= Es_tipo_id1 accion_ID pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_acc_ID",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // accion_ID ::= Acc_texto 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // accion_ID ::= Acc_ctext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // accion_ID ::= Acc_Atext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // accion_ID ::= Acc_Cnume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // accion_ID ::= Acc_despl 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // accion_ID ::= Acc_image 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // accion_ID ::= Acc_video 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // accion_ID ::= Acc_repro 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // accion_ID ::= pun cada ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // accion_ID ::= Acc_alcar 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // accion_ID ::= Acc_alcli 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // accion_ID ::= recur_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // accion_ID ::= Acc_alcer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Cuerpo_funcion ::= Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Es_DeAu ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Es_DeAu ::= Es_func 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
