
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFs.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symf.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\056\004\000\002\056" +
    "\003\000\002\011\004\000\002\011\003\000\002\012\003" +
    "\000\002\071\005\000\002\070\005\000\002\070\006\000" +
    "\002\070\007\000\002\070\007\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\003\000\002\067\005\000\002\067\003\000\002\066\007" +
    "\000\002\066\005\000\002\073\003\000\002\073\005\000" +
    "\002\064\005\000\002\064\003\000\002\062\005\000\002" +
    "\062\005\000\002\062\004\000\002\062\007\000\002\062" +
    "\003\000\002\061\006\000\002\061\006\000\002\061\005" +
    "\000\002\061\005\000\002\061\003\000\002\076\003\000" +
    "\002\076\004\000\002\075\003\000\002\075\004\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\004" +
    "\000\002\060\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\004\000\002" +
    "\063\004\000\002\063\004\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\054\007\000\002\053\007\000\002\052\011\000" +
    "\002\051\006\000\002\050\005\000\002\050\004\000\002" +
    "\050\003\000\002\045\006\000\002\045\007\000\002\045" +
    "\007\000\002\045\007\000\002\045\007\000\002\045\005" +
    "\000\002\045\005\000\002\045\006\000\002\044\006\000" +
    "\002\044\003\000\002\044\004\000\002\044\007\000\002" +
    "\044\007\000\002\043\011\000\002\042\004\000\002\042" +
    "\003\000\002\041\010\000\002\041\007\000\002\037\006" +
    "\000\002\036\007\000\002\036\006\000\002\010\005\000" +
    "\002\010\003\000\002\034\005\000\002\035\003\000\002" +
    "\035\004\000\002\033\005\000\002\033\003\000\002\057" +
    "\004\000\002\057\003\000\002\031\006\000\002\031\003" +
    "\000\002\031\006\000\002\031\010\000\002\032\003\000" +
    "\002\032\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\030\006\000" +
    "\002\027\006\000\002\074\003\000\002\074\003\000\002" +
    "\025\012\000\002\024\021\000\002\023\027\000\002\022" +
    "\024\000\002\021\032\000\002\017\032\000\002\020\022" +
    "\000\002\016\022\000\002\015\020\000\002\014\020\000" +
    "\002\013\020\000\002\007\006\000\002\007\005\000\002" +
    "\006\006\000\002\006\005\000\002\026\006\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\004\004\000\002" +
    "\004\003\000\002\072\004\000\002\072\003\000\002\047" +
    "\003\000\002\047\003\000\002\003\005\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\006\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\024\030\032\036\024\037\031\040\006\041" +
    "\034\042\033\043\023\046\015\057\005\001\002\000\024" +
    "\002\uff6f\030\uff6f\036\uff6f\040\uff6f\041\uff6f\042\uff6f\043" +
    "\uff6f\046\uff6f\057\uff6f\001\002\000\112\004\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\013\uffb7\016\140\020\156\021\147\031" +
    "\uffb7\034\uffb7\035\uffb7\047\uffb7\050\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112" +
    "\uffb7\113\uffb7\001\002\000\004\024\u01e6\001\002\000\026" +
    "\002\uff7d\015\uff7d\030\uff7d\036\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\046\uff7d\057\uff7d\001\002\000\026\002\uff78" +
    "\015\uff78\030\uff78\036\uff78\040\uff78\041\uff78\042\uff78\043" +
    "\uff78\046\uff78\057\uff78\001\002\000\104\004\u012d\006\u012f" +
    "\007\u013d\010\u013f\013\u0138\031\u0133\034\u012e\035\u013a\047" +
    "\162\050\157\052\151\053\150\054\152\055\143\056\153" +
    "\066\163\067\145\070\144\071\161\073\146\074\137\075" +
    "\154\100\u013e\101\u0125\102\u012a\103\u0121\104\u013b\106\u013c" +
    "\107\u0127\110\u0131\111\u0120\112\u012c\113\u0124\001\002\000" +
    "\024\002\ufffc\030\032\036\024\040\006\041\034\042\033" +
    "\043\023\046\015\057\005\001\002\000\004\002\uffff\001" +
    "\002\000\024\030\032\036\024\037\031\040\006\041\034" +
    "\042\033\043\023\046\015\057\005\001\002\000\004\057" +
    "\u010e\001\002\000\030\002\uffc1\015\uffc1\030\uffc1\036\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\046\uffc1\057\uffc1\065" +
    "\uffc1\001\002\000\026\002\uff7a\015\uff7a\030\uff7a\036\uff7a" +
    "\040\uff7a\041\uff7a\042\uff7a\043\uff7a\046\uff7a\057\uff7a\001" +
    "\002\000\026\002\uff79\015\uff79\030\uff79\036\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\046\uff79\057\uff79\001\002\000" +
    "\024\002\uff71\030\uff71\036\uff71\040\uff71\041\uff71\042\uff71" +
    "\043\uff71\046\uff71\057\uff71\001\002\000\004\002\u010d\001" +
    "\002\000\004\016\372\001\002\000\004\016\366\001\002" +
    "\000\004\024\365\001\002\000\024\002\uff70\030\uff70\036" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\046\uff70\057\uff70" +
    "\001\002\000\026\002\uff7c\015\uff7c\030\uff7c\036\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\046\uff7c\057\uff7c\001\002" +
    "\000\024\030\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\046\ufffd\057\ufffd\001\002\000\004\016\361" +
    "\001\002\000\004\057\224\001\002\000\004\016\215\001" +
    "\002\000\026\013\054\016\061\025\052\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\030\002\uff7b\015\uff7b\030\uff7b\036\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\043\uff7b\046\uff7b\057\uff7b\065\036\001\002\000" +
    "\006\014\041\042\033\001\002\000\030\002\uffc2\015\uffc2" +
    "\030\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\046" +
    "\uffc2\057\uffc2\065\uffc2\001\002\000\030\002\uffc3\015\uffc3" +
    "\030\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046" +
    "\uffc3\057\uffc3\065\uffc3\001\002\000\020\030\032\036\024" +
    "\040\006\041\034\042\033\043\023\057\005\001\002\000" +
    "\022\015\uff73\030\uff73\036\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\057\uff73\001\002\000\022\015\045\030\032\036" +
    "\024\040\006\041\034\042\033\043\023\057\005\001\002" +
    "\000\022\015\uff74\030\uff74\036\uff74\040\uff74\041\uff74\042" +
    "\uff74\043\uff74\057\uff74\001\002\000\030\002\uffc4\015\uffc4" +
    "\030\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\046" +
    "\uffc4\057\uffc4\065\uffc4\001\002\000\020\017\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\026\uffe5\027\uffe5\032\uffe5\001\002\000" +
    "\046\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\015\uffcb\017\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\032\uffcb\033\uffcb\001\002" +
    "\000\112\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\016\140\017\uffb7\020\156\021\147" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\047\162\050\157\052\151" +
    "\053\150\054\152\055\143\056\153\066\163\067\145\070" +
    "\144\071\161\073\146\074\137\075\154\001\002\000\046" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\015\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\032\uffc9\033\uffc9\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\024\134\026\122\027\121\001\002\000\024\013\054" +
    "\016\061\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\050\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\017\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\032\uffd2" +
    "\033\uffd2\034\131\035\132\001\002\000\044\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\017\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\032\uffd0\033\uffd0\001\002\000\044\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\017" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\032\uffd1\033\uffd1\001\002\000\046\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc" +
    "\017\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\032\uffcc\033\uffcc\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\044\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\017\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\032\uffd3" +
    "\033\uffd3\001\002\000\042\004\101\005\076\006\077\007" +
    "\067\010\100\011\075\012\074\013\071\017\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\070\026\uffe0\027\uffe0\032\uffe0\001" +
    "\002\000\044\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\017\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4\033\uffd4\001\002" +
    "\000\046\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\015\uffca\017\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\001" +
    "\002\000\046\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\015\uffc8\017\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\032\uffc8\033\uffc8" +
    "\001\002\000\024\013\054\016\061\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\004" +
    "\010\114\001\002\000\024\013\054\016\061\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\024\013\054\016\061\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\024\013\054" +
    "\016\061\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\026\010\110\013\uffdf\016\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\114" +
    "\uffdf\001\002\000\024\013\054\016\061\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\026\010\106\013\uffdd\016\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\114\uffdd\001\002\000\024\013" +
    "\054\016\061\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\004\010\103\001\002\000" +
    "\024\013\054\016\061\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\044\004\uffdb\005" +
    "\uffdb\006\077\007\067\010\uffdb\011\075\012\uffdb\013\uffdb" +
    "\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\032\uffdb\033\uffdb\001\002\000\024\013\054\016\061" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\032\004\101\006\077\007\067\011\075" +
    "\013\071\017\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4\027" +
    "\uffe4\032\uffe4\001\002\000\044\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\075\012\uffd9\013\uffd9\017\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\032\uffd9" +
    "\033\uffd9\001\002\000\024\013\uffdc\016\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\114\uffdc\001\002" +
    "\000\044\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\017\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\032\uffd7\033\uffd7\001\002\000" +
    "\024\013\uffde\016\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\114\uffde\001\002\000\032\004\101\006" +
    "\077\007\067\011\075\013\071\017\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\032\uffe1\001\002\000\032\004" +
    "\101\006\077\007\067\011\075\013\071\017\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\026\uffe2\027\uffe2\032\uffe2\001\002\000" +
    "\044\004\uffda\005\uffda\006\077\007\067\010\uffda\011\075" +
    "\012\uffda\013\uffda\017\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\032\uffda\033\uffda\001\002\000\024" +
    "\013\054\016\061\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\032\004\101\006\077" +
    "\007\067\011\075\013\071\017\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\026\uffe3\027\uffe3\032\uffe3\001\002\000\044\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\075\012\uffd8\013" +
    "\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\032\uffd8\033\uffd8\001\002\000\012\017\120\023" +
    "\123\026\122\027\121\001\002\000\044\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\017" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\032\uffd6\033\uffd6\001\002\000\026\013\054\016\061\025" +
    "\052\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\026\013\054\016\061\025\052\057" +
    "\050\060\047\061\065\062\060\063\051\064\066\114\057" +
    "\001\002\000\024\013\054\016\061\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\016" +
    "\004\101\006\077\007\067\011\075\013\071\033\125\001" +
    "\002\000\024\013\054\016\061\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\032\004" +
    "\101\006\077\007\067\011\075\013\071\017\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\026\uffe6\027\uffe6\032\uffe6\001\002\000" +
    "\020\017\uffe9\022\uffe9\023\123\024\uffe9\026\uffe9\027\uffe9" +
    "\032\uffe9\001\002\000\020\017\uffe8\022\uffe8\023\123\024" +
    "\uffe8\026\uffe8\027\uffe8\032\uffe8\001\002\000\044\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\017\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\032\uffce\033\uffce\001\002\000\044\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\017\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\032\uffcd\033\uffcd\001\002\000\044\004\uffd5\005\uffd5" +
    "\006\077\007\067\010\uffd5\011\075\012\uffd5\013\uffd5\017" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\032\uffd5\033\uffd5\001\002\000\026\002\uff77\015\uff77\030" +
    "\uff77\036\uff77\040\uff77\041\uff77\042\uff77\043\uff77\046\uff77" +
    "\057\uff77\001\002\000\020\017\uffe7\022\uffe7\023\123\024" +
    "\uffe7\026\uffe7\027\uffe7\032\uffe7\001\002\000\100\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\017\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\032\uffa3\033\uffa3\047\uffa3\050\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\071\uffa3\073\uffa3\074\uffa3\075\uffa3\001\002\000\004\016" +
    "\uff8e\001\002\000\030\013\054\016\061\017\210\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\100\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\017\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\032\uffcf\033\uffcf" +
    "\047\162\050\157\052\151\053\150\054\152\055\143\056" +
    "\153\066\163\067\145\070\144\071\161\073\146\074\137" +
    "\075\154\001\002\000\004\016\202\001\002\000\004\016" +
    "\uff9b\001\002\000\004\016\uff98\001\002\000\004\016\uff99" +
    "\001\002\000\004\016\uff8f\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\100\004\uff93\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\017\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\032" +
    "\uff93\033\uff93\047\uff93\050\uff93\052\uff93\053\uff93\054\uff93" +
    "\055\uff93\056\uff93\066\uff93\067\uff93\070\uff93\071\uff93\073" +
    "\uff93\074\uff93\075\uff93\001\002\000\100\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\017" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94" +
    "\032\uff94\033\uff94\047\uff94\050\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\066\uff94\067\uff94\070\uff94\071\uff94" +
    "\073\uff94\074\uff94\075\uff94\001\002\000\100\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\017\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\032\uff92\033\uff92\047\uff92\050\uff92\052\uff92\053\uff92" +
    "\054\uff92\055\uff92\056\uff92\066\uff92\067\uff92\070\uff92\071" +
    "\uff92\073\uff92\074\uff92\075\uff92\001\002\000\004\016\uff9c" +
    "\001\002\000\004\016\172\001\002\000\100\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\017\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\032\uffa1\033\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\073\uffa1\074\uffa1\075\uffa1\001\002\000\136\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\017\uffb6\021\167\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\047\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6" +
    "\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\001" +
    "\002\000\100\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\017\uff95\022\uff95\023\uff95\024" +
    "\uff95\025\uff95\026\uff95\027\uff95\032\uff95\033\uff95\047\uff95" +
    "\050\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\066" +
    "\uff95\067\uff95\070\uff95\071\uff95\073\uff95\074\uff95\075\uff95" +
    "\001\002\000\004\016\164\001\002\000\004\016\uff97\001" +
    "\002\000\100\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\017\uff96\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\032\uff96\033\uff96\047\uff96" +
    "\050\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\066" +
    "\uff96\067\uff96\070\uff96\071\uff96\073\uff96\074\uff96\075\uff96" +
    "\001\002\000\004\016\uff9a\001\002\000\004\057\165\001" +
    "\002\000\004\017\166\001\002\000\100\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\017" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\032\uffa2\033\uffa2\047\uffa2\050\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\022\171\023\123\026" +
    "\122\027\121\001\002\000\134\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\017\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\047\uffb4\050\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\073\uffb4\074\uffb4\075\uffb4\100\uffb4\101" +
    "\uffb4\102\uffb4\103\uffb4\104\uffb4\106\uffb4\107\uffb4\110\uffb4" +
    "\111\uffb4\112\uffb4\113\uffb4\001\002\000\024\013\054\016" +
    "\061\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\016\004\101\006\077\007\067\011" +
    "\075\013\071\032\174\001\002\000\024\013\054\016\061" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\016\004\101\006\077\007\067\011\075" +
    "\013\071\017\176\001\002\000\100\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\017\uff9f" +
    "\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\032" +
    "\uff9f\033\uff9f\047\uff9f\050\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\073" +
    "\uff9f\074\uff9f\075\uff9f\001\002\000\012\022\200\023\123" +
    "\026\122\027\121\001\002\000\136\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\017\uffb8" +
    "\020\201\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\047\uffb8" +
    "\050\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\066" +
    "\uffb8\067\uffb8\070\uffb8\071\uffb8\073\uffb8\074\uffb8\075\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\106\uffb8\107" +
    "\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\001\002\000\134" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\017\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\047\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5" +
    "\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\001" +
    "\002\000\024\013\054\016\061\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\016\004" +
    "\101\006\077\007\067\011\075\013\071\017\204\001\002" +
    "\000\100\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\017\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\032\uffa0\033\uffa0\047\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\066\uffa0" +
    "\067\uffa0\070\uffa0\071\uffa0\073\uffa0\074\uffa0\075\uffa0\001" +
    "\002\000\100\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\017\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\032\uffa4\033\uffa4\047\uffa4" +
    "\050\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\001\002\000\044\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\017\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\032\uffa9\033\uffa9\001" +
    "\002\000\006\017\213\032\212\001\002\000\044\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\017\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\032\uffa8\033\uffa8\001\002\000\014\017\uffa5\023" +
    "\123\026\122\027\121\032\uffa5\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\044\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\017" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\032\uffa7\033\uffa7\001\002\000\014\017\uffa6\023\123\026" +
    "\122\027\121\032\uffa6\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\017\217\023\123\026\122" +
    "\027\121\001\002\000\004\014\220\001\002\000\020\030" +
    "\032\036\024\040\006\041\034\042\033\043\023\057\005" +
    "\001\002\000\022\015\222\030\032\036\024\040\006\041" +
    "\034\042\033\043\023\057\005\001\002\000\030\002\uffc5" +
    "\015\uffc5\030\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\046\uffc5\057\uffc5\065\uffc5\001\002\000\010\010\230" +
    "\024\225\032\226\001\002\000\010\010\uffea\024\uffea\032" +
    "\uffea\001\002\000\026\002\ufff2\015\ufff2\030\ufff2\036\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\046\ufff2\057\ufff2\001" +
    "\002\000\004\057\360\001\002\000\026\002\ufffb\015\ufffb" +
    "\030\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\046" +
    "\ufffb\057\ufffb\001\002\000\040\013\054\014\242\016\061" +
    "\021\237\025\052\051\236\057\233\060\047\061\065\062" +
    "\060\063\051\064\066\072\243\076\232\114\057\001\002" +
    "\000\004\024\357\001\002\000\004\016\350\001\002\000" +
    "\106\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\016\140\020\156\021\147\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\034\uffb7\035\uffb7\047\162" +
    "\050\157\052\151\053\150\054\152\055\143\056\153\066" +
    "\163\067\145\070\144\071\161\073\146\074\137\075\154" +
    "\077\307\105\306\001\002\000\004\024\305\001\002\000" +
    "\004\024\uff9d\001\002\000\004\016\302\001\002\000\030" +
    "\013\054\016\061\022\275\025\052\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\004" +
    "\024\uff9e\001\002\000\004\024\274\001\002\000\004\057" +
    "\254\001\002\000\004\016\250\001\002\000\012\023\123" +
    "\024\247\026\122\027\121\001\002\000\004\024\246\001" +
    "\002\000\026\002\ufff5\015\ufff5\030\ufff5\036\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\046\ufff5\057\ufff5\001\002\000" +
    "\026\002\ufffa\015\ufffa\030\ufffa\036\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\046\ufffa\057\ufffa\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\017\252\023" +
    "\123\026\122\027\121\001\002\000\004\024\uff91\001\002" +
    "\000\006\015\267\032\266\001\002\000\004\033\255\001" +
    "\002\000\016\021\257\060\047\061\065\062\060\063\051" +
    "\064\066\001\002\000\006\015\uffee\032\uffee\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\006\015" +
    "\uffed\032\uffed\001\002\000\014\022\ufff0\023\123\026\122" +
    "\027\121\032\ufff0\001\002\000\006\022\264\032\263\001" +
    "\002\000\026\013\054\016\061\025\052\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\006\015\uffec\032\uffec\001\002\000\014\022\ufff1\023\123" +
    "\026\122\027\121\032\ufff1\001\002\000\004\057\271\001" +
    "\002\000\004\024\270\001\002\000\026\002\ufff7\015\ufff7" +
    "\030\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\046" +
    "\ufff7\057\ufff7\001\002\000\004\033\272\001\002\000\016" +
    "\021\257\060\047\061\065\062\060\063\051\064\066\001" +
    "\002\000\006\015\uffef\032\uffef\001\002\000\026\002\ufff4" +
    "\015\ufff4\030\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\046\ufff4\057\ufff4\001\002\000\004\024\301\001\002" +
    "\000\006\022\277\032\263\001\002\000\004\024\300\001" +
    "\002\000\026\002\ufff8\015\ufff8\030\ufff8\036\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\046\ufff8\057\ufff8\001\002\000" +
    "\026\002\ufff9\015\ufff9\030\ufff9\036\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\046\ufff9\057\ufff9\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\017\304\023" +
    "\123\026\122\027\121\001\002\000\004\024\uff90\001\002" +
    "\000\026\002\ufff3\015\ufff3\030\ufff3\036\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\046\ufff3\057\ufff3\001\002\000\004" +
    "\016\325\001\002\000\004\016\310\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\023\123\026" +
    "\122\027\121\032\312\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\023\123\026\122\027\121" +
    "\032\314\001\002\000\026\013\054\016\061\025\052\057" +
    "\050\060\047\061\065\062\060\063\051\064\066\114\057" +
    "\001\002\000\012\023\123\026\122\027\121\032\316\001" +
    "\002\000\026\013\054\016\061\025\052\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\012\023\123\026\122\027\121\032\320\001\002\000\026" +
    "\013\054\016\061\025\052\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\012\023\123" +
    "\026\122\027\121\032\322\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\017\324\023\123\026" +
    "\122\027\121\001\002\000\004\024\uff8c\001\002\000\026" +
    "\013\054\016\061\025\052\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\012\023\123" +
    "\026\122\027\121\032\327\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\023\123\026\122\027" +
    "\121\032\331\001\002\000\026\013\054\016\061\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\012\023\123\026\122\027\121\032\333" +
    "\001\002\000\026\013\054\016\061\025\052\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\012\023\123\026\122\027\121\032\335\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\026\122\027\121\032\337\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\012\023\123\026\122" +
    "\027\121\032\341\001\002\000\026\013\054\016\061\025" +
    "\052\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\012\023\123\026\122\027\121\032" +
    "\343\001\002\000\026\013\054\016\061\025\052\057\050" +
    "\060\047\061\065\062\060\063\051\064\066\114\057\001" +
    "\002\000\012\023\123\026\122\027\121\032\345\001\002" +
    "\000\026\013\054\016\061\025\052\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\012" +
    "\017\347\023\123\026\122\027\121\001\002\000\004\024" +
    "\uff8b\001\002\000\026\013\054\016\061\025\052\057\050" +
    "\060\047\061\065\062\060\063\051\064\066\114\057\001" +
    "\002\000\012\023\123\026\122\027\121\032\352\001\002" +
    "\000\026\013\054\016\061\025\052\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\012" +
    "\023\123\026\122\027\121\032\354\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\017\356\023" +
    "\123\026\122\027\121\001\002\000\004\024\uff8d\001\002" +
    "\000\026\002\ufff6\015\ufff6\030\ufff6\036\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\046\ufff6\057\ufff6\001\002\000\010" +
    "\010\uffeb\024\uffeb\032\uffeb\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\017\363\023\123\026" +
    "\122\027\121\001\002\000\004\024\364\001\002\000\024" +
    "\030\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\046\uffc6\057\uffc6\001\002\000\026\002\uff76\015\uff76" +
    "\030\uff76\036\uff76\040\uff76\041\uff76\042\uff76\043\uff76\046" +
    "\uff76\057\uff76\001\002\000\026\013\054\016\061\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\012\017\370\023\123\026\122\027\121" +
    "\001\002\000\004\024\371\001\002\000\026\002\uffc7\015" +
    "\uffc7\030\uffc7\036\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\046\uffc7\057\uffc7\001\002\000\024\013\054\016\061\057" +
    "\050\060\047\061\065\062\060\063\051\064\066\114\057" +
    "\001\002\000\016\004\101\006\077\007\067\011\075\013" +
    "\071\017\374\001\002\000\004\014\375\001\002\000\006" +
    "\044\u0100\045\377\001\002\000\010\015\uffb1\044\uffb1\045" +
    "\uffb1\001\002\000\004\033\u0109\001\002\000\024\013\054" +
    "\016\061\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\010\015\u0103\044\u0100\045\377" +
    "\001\002\000\010\015\uffb2\044\uffb2\045\uffb2\001\002\000" +
    "\026\002\uffb3\015\uffb3\030\uffb3\036\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\046\uffb3\057\uffb3\001\002\000\016\004" +
    "\101\006\077\007\067\011\075\013\071\033\u0105\001\002" +
    "\000\004\014\u0106\001\002\000\020\030\032\036\024\040" +
    "\006\041\034\042\033\043\023\057\005\001\002\000\022" +
    "\015\u0108\030\032\036\024\040\006\041\034\042\033\043" +
    "\023\057\005\001\002\000\010\015\uffb0\044\uffb0\045\uffb0" +
    "\001\002\000\004\014\u010a\001\002\000\020\030\032\036" +
    "\024\040\006\041\034\042\033\043\023\057\005\001\002" +
    "\000\022\015\u010c\030\032\036\024\040\006\041\034\042" +
    "\033\043\023\057\005\001\002\000\010\015\uffaf\044\uffaf" +
    "\045\uffaf\001\002\000\004\002\001\001\002\000\004\016" +
    "\u010f\001\002\000\006\017\u0110\057\u0112\001\002\000\004" +
    "\014\u011a\001\002\000\024\002\uffae\030\uffae\036\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\046\uffae\057\uffae\001\002" +
    "\000\006\017\uffaa\032\uffaa\001\002\000\006\017\u0115\032" +
    "\u0114\001\002\000\004\057\u0119\001\002\000\004\014\u0116" +
    "\001\002\000\020\030\032\036\024\040\006\041\034\042" +
    "\033\043\023\057\005\001\002\000\022\015\u0118\030\032" +
    "\036\024\040\006\041\034\042\033\043\023\057\005\001" +
    "\002\000\024\002\uffad\030\uffad\036\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\046\uffad\057\uffad\001\002\000\006\017" +
    "\uffab\032\uffab\001\002\000\020\030\032\036\024\040\006" +
    "\041\034\042\033\043\023\057\005\001\002\000\022\015" +
    "\u011c\030\032\036\024\040\006\041\034\042\033\043\023" +
    "\057\005\001\002\000\024\002\uffac\030\uffac\036\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\046\uffac\057\uffac\001\002" +
    "\000\004\002\000\001\002\000\024\030\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\046\ufffe\057\ufffe" +
    "\001\002\000\024\002\uff72\030\uff72\036\uff72\040\uff72\041" +
    "\uff72\042\uff72\043\uff72\046\uff72\057\uff72\001\002\000\004" +
    "\016\u01e3\001\002\000\004\016\u01d4\001\002\000\004\024" +
    "\uff6c\001\002\000\004\024\uff64\001\002\000\004\016\u01d0" +
    "\001\002\000\004\016\u01b9\001\002\000\040\024\uff62\047" +
    "\162\050\157\052\151\053\150\054\152\055\143\056\153" +
    "\066\163\067\145\070\144\071\161\073\146\074\137\075" +
    "\154\001\002\000\004\016\u01ac\001\002\000\004\024\uff6a" +
    "\001\002\000\004\024\uff6b\001\002\000\004\016\u0195\001" +
    "\002\000\004\024\uff6d\001\002\000\004\016\u0190\001\002" +
    "\000\004\010\u018d\001\002\000\004\024\u018c\001\002\000" +
    "\004\010\u0189\001\002\000\004\024\uff66\001\002\000\004" +
    "\016\u017c\001\002\000\004\024\uff63\001\002\000\004\051" +
    "\u0179\001\002\000\004\024\u0178\001\002\000\004\024\uff69" +
    "\001\002\000\004\024\uff68\001\002\000\004\024\uff67\001" +
    "\002\000\004\010\u0175\001\002\000\004\024\uff61\001\002" +
    "\000\004\024\u0174\001\002\000\004\016\u0165\001\002\000" +
    "\004\016\u0158\001\002\000\004\010\u0155\001\002\000\004" +
    "\016\u0144\001\002\000\032\013\054\016\061\025\052\051" +
    "\236\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\072\243\114\057\001\002\000\004\024\u0143\001\002\000" +
    "\012\023\123\024\u0142\026\122\027\121\001\002\000\026" +
    "\002\uffc0\015\uffc0\030\uffc0\036\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\046\uffc0\057\uffc0\001\002\000\026\002\uffb9" +
    "\015\uffb9\030\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\046\uffb9\057\uffb9\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\023\123\026\122\027\121" +
    "\032\u0146\001\002\000\026\013\054\016\061\025\052\057" +
    "\050\060\047\061\065\062\060\063\051\064\066\114\057" +
    "\001\002\000\012\023\123\026\122\027\121\032\u0148\001" +
    "\002\000\026\013\054\016\061\025\052\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\012\023\123\026\122\027\121\032\u014a\001\002\000\026" +
    "\013\054\016\061\025\052\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\012\023\123" +
    "\026\122\027\121\032\u014c\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\023\123\026\122\027" +
    "\121\032\u014e\001\002\000\026\013\054\016\061\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\012\023\123\026\122\027\121\032\u0150" +
    "\001\002\000\026\013\054\016\061\025\052\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\012\023\123\026\122\027\121\032\u0152\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\017" +
    "\u0154\023\123\026\122\027\121\001\002\000\004\024\uff8a" +
    "\001\002\000\026\013\054\016\061\025\052\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\012\023\123\024\u0157\026\122\027\121\001\002\000" +
    "\026\002\uffbe\015\uffbe\030\uffbe\036\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\046\uffbe\057\uffbe\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\023\123\026" +
    "\122\027\121\032\u015a\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\023\123\026\122\027\121" +
    "\032\u015c\001\002\000\026\013\054\016\061\025\052\057" +
    "\050\060\047\061\065\062\060\063\051\064\066\114\057" +
    "\001\002\000\012\023\123\026\122\027\121\032\u015e\001" +
    "\002\000\026\013\054\016\061\025\052\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\012\023\123\026\122\027\121\032\u0160\001\002\000\026" +
    "\013\054\016\061\025\052\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\012\023\123" +
    "\026\122\027\121\032\u0162\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\017\u0164\023\123\026" +
    "\122\027\121\001\002\000\004\024\uff85\001\002\000\026" +
    "\013\054\016\061\025\052\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\012\023\123" +
    "\026\122\027\121\032\u0167\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\023\123\026\122\027" +
    "\121\032\u0169\001\002\000\026\013\054\016\061\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\012\023\123\026\122\027\121\032\u016b" +
    "\001\002\000\026\013\054\016\061\025\052\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\012\023\123\026\122\027\121\032\u016d\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\026\122\027\121\032\u016f\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\012\023\123\026\122" +
    "\027\121\032\u0171\001\002\000\026\013\054\016\061\025" +
    "\052\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\012\017\u0173\023\123\026\122\027" +
    "\121\001\002\000\004\024\uff86\001\002\000\026\002\uffba" +
    "\015\uffba\030\uffba\036\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\046\uffba\057\uffba\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\023\123\024\u0177\026\122" +
    "\027\121\001\002\000\026\002\uffbc\015\uffbc\030\uffbc\036" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffbc\057\uffbc" +
    "\001\002\000\026\002\uff6e\015\uff6e\030\uff6e\036\uff6e\040" +
    "\uff6e\041\uff6e\042\uff6e\043\uff6e\046\uff6e\057\uff6e\001\002" +
    "\000\004\016\u017a\001\002\000\004\017\u017b\001\002\000" +
    "\004\024\uff65\001\002\000\026\013\054\016\061\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\012\023\123\026\122\027\121\032\u017e" +
    "\001\002\000\026\013\054\016\061\025\052\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\012\023\123\026\122\027\121\032\u0180\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\026\122\027\121\032\u0182\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\012\023\123\026\122" +
    "\027\121\032\u0184\001\002\000\026\013\054\016\061\025" +
    "\052\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\012\023\123\026\122\027\121\032" +
    "\u0186\001\002\000\026\013\054\016\061\025\052\057\050" +
    "\060\047\061\065\062\060\063\051\064\066\114\057\001" +
    "\002\000\012\017\u0188\023\123\026\122\027\121\001\002" +
    "\000\004\024\uff84\001\002\000\026\013\054\016\061\025" +
    "\052\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\012\023\123\024\u018b\026\122\027" +
    "\121\001\002\000\026\002\uffbf\015\uffbf\030\uffbf\036\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffbf\057\uffbf\001" +
    "\002\000\026\002\uffbb\015\uffbb\030\uffbb\036\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\046\uffbb\057\uffbb\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\024\u018f\026\122\027\121\001\002\000\026\002\uffbd" +
    "\015\uffbd\030\uffbd\036\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\046\uffbd\057\uffbd\001\002\000\006\017\u0192\057\u0193" +
    "\001\002\000\004\017\u0194\001\002\000\004\024\uff81\001" +
    "\002\000\004\016\140\001\002\000\004\024\uff82\001\002" +
    "\000\026\013\054\016\061\025\052\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\012" +
    "\023\123\026\122\027\121\032\u0197\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\023\123\026" +
    "\122\027\121\032\u0199\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\023\123\026\122\027\121" +
    "\032\u019b\001\002\000\026\013\054\016\061\025\052\057" +
    "\050\060\047\061\065\062\060\063\051\064\066\114\057" +
    "\001\002\000\012\023\123\026\122\027\121\032\u019d\001" +
    "\002\000\026\013\054\016\061\025\052\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\012\023\123\026\122\027\121\032\u019f\001\002\000\026" +
    "\013\054\016\061\025\052\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\012\023\123" +
    "\026\122\027\121\032\u01a1\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\023\123\026\122\027" +
    "\121\032\u01a3\001\002\000\026\013\054\016\061\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\012\023\123\026\122\027\121\032\u01a5" +
    "\001\002\000\026\013\054\016\061\025\052\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\012\023\123\026\122\027\121\032\u01a7\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\026\122\027\121\032\u01a9\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\012\017\u01ab\023\123" +
    "\026\122\027\121\001\002\000\004\024\uff88\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\026\122\027\121\032\u01ae\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\012\023\123\026\122" +
    "\027\121\032\u01b0\001\002\000\026\013\054\016\061\025" +
    "\052\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\012\023\123\026\122\027\121\032" +
    "\u01b2\001\002\000\026\013\054\016\061\025\052\057\050" +
    "\060\047\061\065\062\060\063\051\064\066\114\057\001" +
    "\002\000\012\023\123\026\122\027\121\032\u01b4\001\002" +
    "\000\026\013\054\016\061\025\052\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\012" +
    "\023\123\026\122\027\121\032\u01b6\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\017\u01b8\023" +
    "\123\026\122\027\121\001\002\000\004\024\uff83\001\002" +
    "\000\026\013\054\016\061\025\052\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\012" +
    "\023\123\026\122\027\121\032\u01bb\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\023\123\026" +
    "\122\027\121\032\u01bd\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\023\123\026\122\027\121" +
    "\032\u01bf\001\002\000\026\013\054\016\061\025\052\057" +
    "\050\060\047\061\065\062\060\063\051\064\066\114\057" +
    "\001\002\000\012\023\123\026\122\027\121\032\u01c1\001" +
    "\002\000\026\013\054\016\061\025\052\057\050\060\047" +
    "\061\065\062\060\063\051\064\066\114\057\001\002\000" +
    "\012\023\123\026\122\027\121\032\u01c3\001\002\000\026" +
    "\013\054\016\061\025\052\057\050\060\047\061\065\062" +
    "\060\063\051\064\066\114\057\001\002\000\012\023\123" +
    "\026\122\027\121\032\u01c5\001\002\000\026\013\054\016" +
    "\061\025\052\057\050\060\047\061\065\062\060\063\051" +
    "\064\066\114\057\001\002\000\012\023\123\026\122\027" +
    "\121\032\u01c7\001\002\000\026\013\054\016\061\025\052" +
    "\057\050\060\047\061\065\062\060\063\051\064\066\114" +
    "\057\001\002\000\012\023\123\026\122\027\121\032\u01c9" +
    "\001\002\000\026\013\054\016\061\025\052\057\050\060" +
    "\047\061\065\062\060\063\051\064\066\114\057\001\002" +
    "\000\012\023\123\026\122\027\121\032\u01cb\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\026\122\027\121\032\u01cd\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\012\017\u01cf\023\123" +
    "\026\122\027\121\001\002\000\004\024\uff89\001\002\000" +
    "\006\017\u01d2\057\u0193\001\002\000\004\017\u01d3\001\002" +
    "\000\004\024\uff7f\001\002\000\004\024\uff80\001\002\000" +
    "\026\013\054\016\061\025\052\057\050\060\047\061\065" +
    "\062\060\063\051\064\066\114\057\001\002\000\012\023" +
    "\123\026\122\027\121\032\u01d6\001\002\000\026\013\054" +
    "\016\061\025\052\057\050\060\047\061\065\062\060\063" +
    "\051\064\066\114\057\001\002\000\012\023\123\026\122" +
    "\027\121\032\u01d8\001\002\000\026\013\054\016\061\025" +
    "\052\057\050\060\047\061\065\062\060\063\051\064\066" +
    "\114\057\001\002\000\012\023\123\026\122\027\121\032" +
    "\u01da\001\002\000\026\013\054\016\061\025\052\057\050" +
    "\060\047\061\065\062\060\063\051\064\066\114\057\001" +
    "\002\000\012\023\123\026\122\027\121\032\u01dc\001\002" +
    "\000\026\013\054\016\061\025\052\057\050\060\047\061" +
    "\065\062\060\063\051\064\066\114\057\001\002\000\012" +
    "\023\123\026\122\027\121\032\u01de\001\002\000\026\013" +
    "\054\016\061\025\052\057\050\060\047\061\065\062\060" +
    "\063\051\064\066\114\057\001\002\000\012\023\123\026" +
    "\122\027\121\032\u01e0\001\002\000\026\013\054\016\061" +
    "\025\052\057\050\060\047\061\065\062\060\063\051\064" +
    "\066\114\057\001\002\000\012\017\u01e2\023\123\026\122" +
    "\027\121\001\002\000\004\024\uff87\001\002\000\004\057" +
    "\u0193\001\002\000\004\017\u01e5\001\002\000\004\024\uff7e" +
    "\001\002\000\026\002\uff75\015\uff75\030\uff75\036\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\046\uff75\057\uff75\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\044\003\007\005\025\011\013\012\012\034" +
    "\024\037\003\043\016\044\010\045\017\047\020\050\034" +
    "\052\015\053\027\054\026\056\021\071\006\072\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\u0133\006" +
    "\u0138\007\u0122\013\u012f\014\u0136\015\u0135\016\u0134\017\u0128" +
    "\020\u0127\021\u0121\022\u012a\026\u0131\031\135\057\u0125\074" +
    "\141\077\154\100\157\001\001\000\032\003\007\005\025" +
    "\034\024\037\003\043\016\044\010\045\017\047\u011e\050" +
    "\034\052\015\054\026\071\006\001\001\000\002\001\001" +
    "\000\040\003\007\005\025\012\u011c\034\024\037\003\043" +
    "\016\044\010\045\017\047\020\050\034\052\015\053\u011d" +
    "\054\026\071\006\072\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\222\001" +
    "\001\000\002\001\001\000\020\034\055\044\054\060\062" +
    "\061\045\062\052\063\063\065\061\001\001\000\004\051" +
    "\036\001\001\000\004\052\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\007\004\042\005\041\034" +
    "\024\043\016\044\010\045\017\050\034\052\015\054\026" +
    "\071\006\001\001\000\002\001\001\000\026\003\007\005" +
    "\043\034\024\043\016\044\010\045\017\050\034\052\015" +
    "\054\026\071\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\135" +
    "\057\140\074\141\077\154\100\157\001\001\000\002\001" +
    "\001\000\020\034\055\044\054\060\062\061\045\062\134" +
    "\063\063\065\061\001\001\000\002\001\001\000\014\034" +
    "\055\044\054\060\132\063\063\065\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\034\055\044\054\060\062\061\045\062\116" +
    "\063\063\065\061\001\001\000\002\001\001\000\006\075" +
    "\072\076\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\055\044\054\060\115\063" +
    "\063\065\061\001\001\000\002\001\001\000\014\034\055" +
    "\044\054\060\112\063\063\065\061\001\001\000\014\034" +
    "\055\044\054\060\111\063\063\065\061\001\001\000\014" +
    "\034\055\044\054\060\110\063\063\065\061\001\001\000" +
    "\002\001\001\000\014\034\055\044\054\060\106\063\063" +
    "\065\061\001\001\000\002\001\001\000\014\034\055\044" +
    "\054\060\104\063\063\065\061\001\001\000\002\001\001" +
    "\000\014\034\055\044\054\060\101\063\063\065\061\001" +
    "\001\000\002\001\001\000\014\034\055\044\054\060\103" +
    "\063\063\065\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\055\044\054\060\114\063\063\065\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\127\063\063\065\061\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\126\063\063\065\061\001\001" +
    "\000\014\034\055\044\054\060\123\063\063\065\061\001" +
    "\001\000\002\001\001\000\014\034\055\044\054\060\125" +
    "\063\063\065\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\206\034\055" +
    "\035\205\044\054\060\062\061\045\062\210\063\063\065" +
    "\061\001\001\000\012\031\204\074\141\077\154\100\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\176\063\063\065\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\167\063\063\065\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\055" +
    "\044\054\060\172\063\063\065\061\001\001\000\002\001" +
    "\001\000\014\034\055\044\054\060\174\063\063\065\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\055" +
    "\044\054\060\202\063\063\065\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\213\063\063" +
    "\065\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\215\063\063" +
    "\065\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\007\004\220\005\041\034\024\043\016\044\010" +
    "\045\017\050\034\052\015\054\026\071\006\001\001\000" +
    "\026\003\007\005\043\034\024\043\016\044\010\045\017" +
    "\050\034\052\015\054\026\071\006\001\001\000\002\001" +
    "\001\000\004\070\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\023" +
    "\240\024\244\025\230\027\234\030\237\032\233\034\055" +
    "\044\054\060\062\061\045\062\243\063\063\065\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\135" +
    "\057\140\074\141\077\154\100\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\034\055" +
    "\044\054\060\062\061\045\062\260\063\063\065\061\067" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\250\063\063\065" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\065\257\073\255\001" +
    "\001\000\002\001\001\000\022\034\055\044\054\060\062" +
    "\061\045\062\260\063\063\065\061\067\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\264\063\063\065" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\065\257\073\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\302\063\063\065" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\310\063\063\065\061" +
    "\001\001\000\002\001\001\000\020\034\055\044\054\060" +
    "\062\061\045\062\312\063\063\065\061\001\001\000\002" +
    "\001\001\000\020\034\055\044\054\060\062\061\045\062" +
    "\314\063\063\065\061\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\316\063\063\065" +
    "\061\001\001\000\002\001\001\000\020\034\055\044\054" +
    "\060\062\061\045\062\320\063\063\065\061\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\322\063\063\065\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\325\063\063\065\061\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\327\063\063" +
    "\065\061\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\331\063\063\065\061\001\001" +
    "\000\002\001\001\000\020\034\055\044\054\060\062\061" +
    "\045\062\333\063\063\065\061\001\001\000\002\001\001" +
    "\000\020\034\055\044\054\060\062\061\045\062\335\063" +
    "\063\065\061\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\337\063\063\065\061\001" +
    "\001\000\002\001\001\000\020\034\055\044\054\060\062" +
    "\061\045\062\341\063\063\065\061\001\001\000\002\001" +
    "\001\000\020\034\055\044\054\060\062\061\045\062\343" +
    "\063\063\065\061\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\345\063\063\065\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\350\063\063\065\061" +
    "\001\001\000\002\001\001\000\020\034\055\044\054\060" +
    "\062\061\045\062\352\063\063\065\061\001\001\000\002" +
    "\001\001\000\020\034\055\044\054\060\062\061\045\062" +
    "\354\063\063\065\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\361\063\063\065\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\034\055\044\054\060\062" +
    "\061\045\062\366\063\063\065\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\055" +
    "\044\054\060\372\063\063\065\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\375\042\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\055\044" +
    "\054\060\u0103\063\063\065\061\001\001\000\004\041\u0101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\007\004\u0106\005\041" +
    "\034\024\043\016\044\010\045\017\050\034\052\015\054" +
    "\026\071\006\001\001\000\026\003\007\005\043\034\024" +
    "\043\016\044\010\045\017\050\034\052\015\054\026\071" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\007\004\u010a\005\041\034\024\043\016\044\010\045" +
    "\017\050\034\052\015\054\026\071\006\001\001\000\026" +
    "\003\007\005\043\034\024\043\016\044\010\045\017\050" +
    "\034\052\015\054\026\071\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\u0112\036" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\007\004\u0116\005\041\034\024\043\016" +
    "\044\010\045\017\050\034\052\015\054\026\071\006\001" +
    "\001\000\026\003\007\005\043\034\024\043\016\044\010" +
    "\045\017\050\034\052\015\054\026\071\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\007\004\u011a" +
    "\005\041\034\024\043\016\044\010\045\017\050\034\052" +
    "\015\054\026\071\006\001\001\000\026\003\007\005\043" +
    "\034\024\043\016\044\010\045\017\050\034\052\015\054" +
    "\026\071\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\031\204\074\141\077" +
    "\154\100\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\234\030\237\032\u013f\034\055\044\054\060\062\061\045" +
    "\062\u0140\063\063\065\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\u0144\063\063\065" +
    "\061\001\001\000\002\001\001\000\020\034\055\044\054" +
    "\060\062\061\045\062\u0146\063\063\065\061\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\u0148\063\063\065\061\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\u014a\063\063" +
    "\065\061\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\u014c\063\063\065\061\001\001" +
    "\000\002\001\001\000\020\034\055\044\054\060\062\061" +
    "\045\062\u014e\063\063\065\061\001\001\000\002\001\001" +
    "\000\020\034\055\044\054\060\062\061\045\062\u0150\063" +
    "\063\065\061\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\u0152\063\063\065\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\u0155\063\063\065\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\u0158\063\063\065\061\001" +
    "\001\000\002\001\001\000\020\034\055\044\054\060\062" +
    "\061\045\062\u015a\063\063\065\061\001\001\000\002\001" +
    "\001\000\020\034\055\044\054\060\062\061\045\062\u015c" +
    "\063\063\065\061\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\u015e\063\063\065\061" +
    "\001\001\000\002\001\001\000\020\034\055\044\054\060" +
    "\062\061\045\062\u0160\063\063\065\061\001\001\000\002" +
    "\001\001\000\020\034\055\044\054\060\062\061\045\062" +
    "\u0162\063\063\065\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\034\055\044\054\060\062\061\045\062" +
    "\u0165\063\063\065\061\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\u0167\063\063\065" +
    "\061\001\001\000\002\001\001\000\020\034\055\044\054" +
    "\060\062\061\045\062\u0169\063\063\065\061\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\u016b\063\063\065\061\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\u016d\063\063" +
    "\065\061\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\u016f\063\063\065\061\001\001" +
    "\000\002\001\001\000\020\034\055\044\054\060\062\061" +
    "\045\062\u0171\063\063\065\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\u0175\063\063\065\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\u017c\063\063\065" +
    "\061\001\001\000\002\001\001\000\020\034\055\044\054" +
    "\060\062\061\045\062\u017e\063\063\065\061\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\u0180\063\063\065\061\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\u0182\063\063" +
    "\065\061\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\u0184\063\063\065\061\001\001" +
    "\000\002\001\001\000\020\034\055\044\054\060\062\061" +
    "\045\062\u0186\063\063\065\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\034\055\044\054\060\062\061" +
    "\045\062\u0189\063\063\065\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\u018d\063\063\065\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u0190\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\034\055\044\054\060\062\061" +
    "\045\062\u0195\063\063\065\061\001\001\000\002\001\001" +
    "\000\020\034\055\044\054\060\062\061\045\062\u0197\063" +
    "\063\065\061\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\u0199\063\063\065\061\001" +
    "\001\000\002\001\001\000\020\034\055\044\054\060\062" +
    "\061\045\062\u019b\063\063\065\061\001\001\000\002\001" +
    "\001\000\020\034\055\044\054\060\062\061\045\062\u019d" +
    "\063\063\065\061\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\u019f\063\063\065\061" +
    "\001\001\000\002\001\001\000\020\034\055\044\054\060" +
    "\062\061\045\062\u01a1\063\063\065\061\001\001\000\002" +
    "\001\001\000\020\034\055\044\054\060\062\061\045\062" +
    "\u01a3\063\063\065\061\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\u01a5\063\063\065" +
    "\061\001\001\000\002\001\001\000\020\034\055\044\054" +
    "\060\062\061\045\062\u01a7\063\063\065\061\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\u01a9\063\063\065\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\u01ac\063\063\065\061\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\u01ae\063\063" +
    "\065\061\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\u01b0\063\063\065\061\001\001" +
    "\000\002\001\001\000\020\034\055\044\054\060\062\061" +
    "\045\062\u01b2\063\063\065\061\001\001\000\002\001\001" +
    "\000\020\034\055\044\054\060\062\061\045\062\u01b4\063" +
    "\063\065\061\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\u01b6\063\063\065\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\u01b9\063\063\065\061\001" +
    "\001\000\002\001\001\000\020\034\055\044\054\060\062" +
    "\061\045\062\u01bb\063\063\065\061\001\001\000\002\001" +
    "\001\000\020\034\055\044\054\060\062\061\045\062\u01bd" +
    "\063\063\065\061\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\u01bf\063\063\065\061" +
    "\001\001\000\002\001\001\000\020\034\055\044\054\060" +
    "\062\061\045\062\u01c1\063\063\065\061\001\001\000\002" +
    "\001\001\000\020\034\055\044\054\060\062\061\045\062" +
    "\u01c3\063\063\065\061\001\001\000\002\001\001\000\020" +
    "\034\055\044\054\060\062\061\045\062\u01c5\063\063\065" +
    "\061\001\001\000\002\001\001\000\020\034\055\044\054" +
    "\060\062\061\045\062\u01c7\063\063\065\061\001\001\000" +
    "\002\001\001\000\020\034\055\044\054\060\062\061\045" +
    "\062\u01c9\063\063\065\061\001\001\000\002\001\001\000" +
    "\020\034\055\044\054\060\062\061\045\062\u01cb\063\063" +
    "\065\061\001\001\000\002\001\001\000\020\034\055\044" +
    "\054\060\062\061\045\062\u01cd\063\063\065\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u01d0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\034\055\044\054\060\062\061\045\062\u01d4\063" +
    "\063\065\061\001\001\000\002\001\001\000\020\034\055" +
    "\044\054\060\062\061\045\062\u01d6\063\063\065\061\001" +
    "\001\000\002\001\001\000\020\034\055\044\054\060\062" +
    "\061\045\062\u01d8\063\063\065\061\001\001\000\002\001" +
    "\001\000\020\034\055\044\054\060\062\061\045\062\u01da" +
    "\063\063\065\061\001\001\000\002\001\001\000\020\034" +
    "\055\044\054\060\062\061\045\062\u01dc\063\063\065\061" +
    "\001\001\000\002\001\001\000\020\034\055\044\054\060" +
    "\062\061\045\062\u01de\063\063\065\061\001\001\000\002" +
    "\001\001\000\020\034\055\044\054\060\062\061\045\062" +
    "\u01e0\063\063\065\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\u01e3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public NodoFs regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public NodoFs RCCSS = new NodoFs("");
	 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {


    public String estado="";

  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs start_val = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= inicio_p1 inicio_p2 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Inicio"); nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RCCSS = nuevo; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= inicio_p2 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Inicio"); nuevo.add_NodoFs(e1); RCCSS = nuevo; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_p1 ::= inicio_p1 Es_Impo 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_NodoFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_p1 ::= Es_Impo 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("EST_IMP"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio_p2 ::= Cuerpo_funcion 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p2",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ES_VAR ::= var Lista_ID ES_VAR1 
            {
              NodoFs RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("DEC_VAR"); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ES_VAR1 ::= igu Exp_Log pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_VAR1 ::= igu ico fco pyc 
            {
              NodoFs RESULT =null;
		NodoFs nuevo = new NodoFs("Vector"); nuevo.valor="Vacio";RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ES_VAR1 ::= igu ico Lista_Datos fco pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ES_VAR1 ::= igu ill Lista_Objetos fll pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ES_VAR1 ::= igu Acc_venta pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ES_VAR1 ::= igu Acc_conte pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES_VAR1 ::= igu Acc_boton pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES_VAR1 ::= igu func_nat1 pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ES_VAR1 ::= pyc 
            {
              NodoFs RESULT =null;
		NodoFs nuevo = new NodoFs("nada"); nuevo.valor=";";RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Datos ::= Lista_Datos com Exp_Log 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_NodoFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Datos ::= Exp_Log 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Vector"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Objetos ::= Lista_Objetos com idva dop Dato_Obj 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo1 = new NodoFs(e2); nuevo1.add_NodoFs(e3); e1.add_NodoFs(nuevo1); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Objetos ::= idva dop Dato_Obj 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Objetos"); NodoFs nuevo1 = new NodoFs(e1); nuevo1.add_NodoFs(e2); nuevo.add_NodoFs(nuevo1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Dato_Obj ::= Dato_Pri 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Obj",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dato_Obj ::= ico Lista_Datos fco 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Obj",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Lista_ID ::= Lista_ID com idva 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_ListaFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_ID ::= idva 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("ListID"); nuevo.add_ListaFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp_Log ::= Exp_Log Sor Exp_Log 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="OR";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp_Log ::= Exp_Log and Exp_Log 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="AND";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp_Log ::= not Exp_Log 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="NOT";nuevo.add_NodoFs(e1);                      RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp_Log ::= Exp_Log fin Exp_Ari dop Exp_Ari 
            {
              NodoFs RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="Ternario"; nuevo.add_NodoFs(e3);nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_Log ::= Exp_Com 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_Com ::= Exp_Ari igu igu Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor="==";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_Com ::= Exp_Ari not igu Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor="!=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_Com ::= Exp_Ari Ex_may Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor=e3;nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_Com ::= Exp_Ari Ex_men Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor=e3;nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp_Com ::= Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ex_may ::= may 
            {
              String RESULT =null;
		RESULT=">";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ex_may ::= may igu 
            {
              String RESULT =null;
		RESULT=">=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ex_men ::= men 
            {
              String RESULT =null;
		RESULT="<";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ex_men ::= men igu 
            {
              String RESULT =null;
		RESULT="<=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp_Ari ::= Exp_Ari mas Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="+";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp_Ari ::= Exp_Ari nos Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="-";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp_Ari ::= Exp_Ari por Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="*";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_Ari ::= Exp_Ari div Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="/";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_Ari ::= Exp_Ari pot Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="^";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_Ari ::= ipa Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_Ari ::= nos Exp_Ari 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Dato Negado"); nuevo.add_NodoFs(e1);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp_Ari ::= Dato_Posfa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Dato_Posfa ::= Dato_Pri 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Dato_Posfa ::= Es_tipo_id 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Dato_Posfa ::= nulo 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dato_Posfa ::= Es_lla_fun 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dato_Posfa ::= idva recur_nat 
            {
              NodoFs RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Nativas"); nuevo.valor=e2;nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dato_Posfa ::= Es_tipo_id dmas 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Autoincremento"); nuevo.add_NodoFs(e1);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dato_Posfa ::= Es_tipo_id dnos 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Autodecremento"); nuevo.add_NodoFs(e1);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dato_Pri ::= nume 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Dato_Pri ::= cade 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Dato_Pri ::= deci 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Dato_Pri ::= verd 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Dato_Pri ::= fals 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Es_Impr ::= impr ipa Exp_Log fpa pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		NodoFs nuevo = new NodoFs("Imprimir"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impr",42, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Es_Impo ::= impo ipa Exp_Log fpa pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		NodoFs nuevo = new NodoFs("Imprimir"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impo",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Es_Si ::= si ipa Exp_Log fpa ill Estu_Cuerpo fll 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Si"); nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Si",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Es_sino ::= sino ill Estu_Cuerpo fll 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Sino"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sino",39, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Estru_si ::= Estru_si sino Es_Si 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		 e1.add_NodoFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Estru_si ::= Estru_si Es_sino 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		 e1.add_NodoFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Estru_si ::= Es_Si 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("EST_SI"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Es_asig ::= Es_tipo_id igu Exp_Log pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Es_asig ::= Es_tipo_id por igu Exp_Log pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="*=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Es_asig ::= Es_tipo_id div igu Exp_Log pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="/=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Es_asig ::= Es_tipo_id mas igu Exp_Log pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="+=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Es_asig ::= Es_tipo_id nos igu Exp_Log pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="-=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Es_asig ::= Es_tipo_id dmas pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="Autoincremento";nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Es_asig ::= Es_tipo_id dnos pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="Autodecremento";nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Es_asig ::= Es_tipo_id igu func_nat1 pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="Funcion";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Es_tipo_id ::= idva ico Exp_Log fco 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("ID"); 	nuevo.add_NodoFs(e2); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Es_tipo_id ::= idva 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("ID"); 	nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Es_tipo_id ::= idva idpu 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("ID"); nuevo.add_ListaFs(e2);	nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Es_tipo_id ::= idva ico Exp_Log fco idpu 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("ID"); nuevo.add_ListaFs("especial");nuevo.add_NodoFs(e2); nuevo.add_ListaFs(e3);	nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Es_tipo_id ::= idva idpu ico Exp_Log fco 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("ID"); nuevo.add_ListaFs("objeto"); nuevo.add_NodoFs(e3); nuevo.add_ListaFs(e2);	nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Es_sele ::= sele ipa Exp_Ari fpa ill Cuerpo_sele fll 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("ES_SEL"); 	nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sele",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Cuerpo_sele ::= Cuerpo_sele tipo_sele 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_NodoFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Cuerpo_sele ::= tipo_sele 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("CU_SEL"); 	nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_sele ::= caso Exp_Ari dop ill Estu_Cuerpo fll 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("caso"); 	nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_sele ::= defe dop ill Estu_Cuerpo fll 
            {
              NodoFs RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("defecto"); nuevo.add_NodoFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Es_func ::= func idva ipa Es_fun1 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e2.valor=e1; e2.add_ListaFs("funcion"); RESULT=e2;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Es_fun1 ::= Lista_parametros fpa ill Estu_Cuerpo fll 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("funcion"); nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Es_fun1 ::= fpa ill Estu_Cuerpo fll 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("funcion"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Lista_parametros ::= Lista_parametros com idva 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_ListaFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Lista_parametros ::= idva 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Parametros"); nuevo.add_ListaFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Es_lla_fun ::= idva ipa Es_lla_fun1 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e2.valor=e1; RESULT=e2;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Es_lla_fun1 ::= fpa 
            {
              NodoFs RESULT =null;
		NodoFs nuevo = new NodoFs("llamadafun"); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Es_lla_fun1 ::= Lista_Aritmetica fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("llamadafun"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Lista_Aritmetica ::= Lista_Aritmetica com Exp_Log 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_NodoFs(e2);RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Lista_Aritmetica ::= Exp_Log 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Parametros"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // recur_nat ::= recur_nat func_nat 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_NodoFs(e2); RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",45, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // recur_nat ::= func_nat 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("funciones"); nuevo.valor="nativas"; nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",45, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // func_nat ::= Tipo_Fun ipa idva fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("filtros"); nuevo.valor=e1; nuevo.add_ListaFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // func_nat ::= Tipos_Acc_Ord 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("ordenamiento"); nuevo.valor=e1; RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // func_nat ::= Tipo_Obte ipa Exp_Ari fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("obtencion"); nuevo.valor=e1; nuevo.add_NodoFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func_nat ::= opno ipa Exp_Ari com Exp_Ari fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("obtencion"); nuevo.valor="ObtenerporNombre"; nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // func_nat1 ::= func_leer 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // func_nat1 ::= func_gxml 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipo_Fun ::= filt 
            {
              String RESULT =null;
		RESULT="filtrar";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipo_Fun ::= busc 
            {
              String RESULT =null;
		RESULT="buscar";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipo_Fun ::= map 
            {
              String RESULT =null;
		RESULT="map";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Tipo_Fun ::= redu 
            {
              String RESULT =null;
		RESULT="reduce";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Tipo_Fun ::= todo 
            {
              String RESULT =null;
		RESULT="todos";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Tipo_Fun ::= algu 
            {
              String RESULT =null;
		RESULT="algunos";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Tipos_Acc_Ord ::= desc 
            {
              String RESULT =null;
		RESULT="descendente";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Tipos_Acc_Ord ::= asce 
            {
              String RESULT =null;
		RESULT="ascendente";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Tipos_Acc_Ord ::= inve 
            {
              String RESULT =null;
		RESULT="invertir";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Tipos_Acc_Ord ::= maxi 
            {
              String RESULT =null;
		RESULT="maximo";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Tipos_Acc_Ord ::= mini 
            {
              String RESULT =null;
		RESULT="minimo";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // func_leer ::= lgxm ipa Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("leergxml"); 	 nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_leer",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // func_gxml ::= cada ipa Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("arrayarchivo"); nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_gxml",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Tipo_Obte ::= opet 
            {
              String RESULT =null;
		RESULT="obt_etiquieta";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Tipo_Obte ::= opid 
            {
              String RESULT =null;
		RESULT="obt_ID";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Acc_venta ::= cven ipa Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Ventana");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_venta",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Acc_conte ::= idva ccon ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Contenedor");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6);RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_conte",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Acc_boton ::= idva cbot ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e7 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e8 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e9 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Boton");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6);  nuevo.add_NodoFs(e7); nuevo.add_NodoFs(e8); nuevo.add_NodoFs(e9); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_boton",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-20)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Acc_texto ::= ctex ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e7 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e8 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("label");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6);  nuevo.add_NodoFs(e7); nuevo.add_NodoFs(e8);  RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_texto",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Acc_ctext ::= ccte ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-19)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-19)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-19)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e7 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e8 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e9 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e10 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e11left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e11 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("texto");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6);  nuevo.add_NodoFs(e7); nuevo.add_NodoFs(e8); nuevo.add_NodoFs(e9);nuevo.add_NodoFs(e10); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_ctext",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Acc_Atext ::= cate ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-19)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-19)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-19)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e7 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e8 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e9 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e10 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e11left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e11 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("Area");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6);  nuevo.add_NodoFs(e7); nuevo.add_NodoFs(e8); nuevo.add_NodoFs(e9);nuevo.add_NodoFs(e10); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Atext",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Acc_Cnume ::= ccnu ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e7 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("numero");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6);  nuevo.add_NodoFs(e7); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Cnume",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Acc_despl ::= cdes ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e7 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("desplegable");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6);  nuevo.add_NodoFs(e7);  RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_despl",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Acc_image ::= cima ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("imagen");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_image",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Acc_video ::= cvid ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("video");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_video",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Acc_repro ::= crep ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).right;
		NodoFs e3 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).right;
		NodoFs e4 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		NodoFs e5 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e6 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("reproductor");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); nuevo.add_NodoFs(e3); nuevo.add_NodoFs(e4); nuevo.add_NodoFs(e5); nuevo.add_NodoFs(e6); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_repro",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Acc_alcar ::= acar ipa Es_lla_fun fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("cargar");  nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Acc_alcar ::= acar ipa fpa 
            {
              NodoFs RESULT =null;
		NodoFs nuevo = new NodoFs("cargar");  RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Acc_alcer ::= acer ipa Es_lla_fun fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("cerrar");  nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Acc_alcer ::= acer ipa fpa 
            {
              NodoFs RESULT =null;
		NodoFs nuevo = new NodoFs("cerrar");   RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Acc_alcli ::= acli ipa Es_lla_fun fpa 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("click");  nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcli",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Cuerpo_general ::= ES_VAR 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Cuerpo_general ::= Es_Impr 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Cuerpo_general ::= Estru_si 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Cuerpo_general ::= Es_sele 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Cuerpo_general ::= Es_asig 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Cuerpo_general ::= Es_acc_ID 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Cuerpo_general ::= reto Exp_Log pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("retornar");  nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Cuerpo_general ::= Es_lla_fun pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Cuerpo_general ::= dete pyc 
            {
              NodoFs RESULT =null;
		NodoFs nuevo = new NodoFs("Detener");  RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Estu_Cuerpo ::= Estu_Cuerpo Cuerpo_general 
            {
              NodoFs RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e2.add_NodoFs(e1); RESULT=e2;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Estu_Cuerpo ::= Cuerpo_general 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Cuerpo");  nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		e1.add_NodoFs(e2);RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Cuerpo_funcion ::= Es_DeAu 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		NodoFs nuevo = new NodoFs("Cuerpo");  nuevo.add_NodoFs(e1); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Es_DeAu ::= Cuerpo_general 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Es_DeAu ::= Es_func 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Es_acc_ID ::= Es_tipo_id accion_ID pyc 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		NodoFs e2 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		NodoFs nuevo = new NodoFs("ID_ACCION");  nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_acc_ID",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // accion_ID ::= Acc_texto 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // accion_ID ::= Acc_ctext 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // accion_ID ::= Acc_Atext 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // accion_ID ::= Acc_Cnume 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // accion_ID ::= Acc_despl 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // accion_ID ::= Acc_image 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // accion_ID ::= Acc_video 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // accion_ID ::= Acc_repro 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // accion_ID ::= pun cada ipa fpa 
            {
              NodoFs RESULT =null;
		NodoFs nuevo = new NodoFs("arrayarchivo"); RESULT=nuevo;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // accion_ID ::= Acc_alcar 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // accion_ID ::= Acc_alcli 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // accion_ID ::= recur_nat 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // accion_ID ::= Acc_alcer 
            {
              NodoFs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		NodoFs e1 = (NodoFs)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		RESULT=e1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
