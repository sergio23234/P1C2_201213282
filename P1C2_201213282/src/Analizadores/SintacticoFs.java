
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFs.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symf.class;
}

  /** Default constructor. */
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\060\004\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\074\005" +
    "\000\002\073\005\000\002\073\006\000\002\073\007\000" +
    "\002\073\007\000\002\073\011\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\007\000\002\073" +
    "\005\000\002\073\003\000\002\072\005\000\002\072\003" +
    "\000\002\071\007\000\002\071\005\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\067\005\000\002\067\003\000\002\065" +
    "\005\000\002\065\005\000\002\065\004\000\002\065\003" +
    "\000\002\064\006\000\002\064\006\000\002\064\005\000" +
    "\002\064\005\000\002\064\003\000\002\063\003\000\002" +
    "\063\004\000\002\062\003\000\002\062\004\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\004\000" +
    "\002\061\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\056\007\000\002\055" +
    "\007\000\002\054\011\000\002\053\006\000\002\052\005" +
    "\000\002\052\004\000\002\052\003\000\002\050\006\000" +
    "\002\050\012\000\002\050\007\000\002\050\007\000\002" +
    "\050\007\000\002\050\007\000\002\050\010\000\002\050" +
    "\006\000\002\050\006\000\002\050\006\000\002\047\003" +
    "\000\002\043\006\000\002\043\003\000\002\046\011\000" +
    "\002\045\004\000\002\045\003\000\002\044\010\000\002" +
    "\044\007\000\002\042\006\000\002\041\007\000\002\041" +
    "\006\000\002\010\006\000\002\010\004\000\002\037\005" +
    "\000\002\040\003\000\002\040\004\000\002\036\005\000" +
    "\002\036\003\000\002\034\006\000\002\034\005\000\002" +
    "\034\006\000\002\035\003\000\002\035\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\031\006\000\002\030\006\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\025\012" +
    "\000\002\024\022\000\002\023\030\000\002\022\024\000" +
    "\002\021\032\000\002\017\032\000\002\020\022\000\002" +
    "\016\022\000\002\015\020\000\002\014\020\000\002\013" +
    "\020\000\002\007\006\000\002\007\005\000\002\006\006" +
    "\000\002\006\005\000\002\026\006\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\005" +
    "\004\000\002\004\004\000\002\004\003\000\002\003\006" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\005\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\075\004" +
    "\000\002\075\003\000\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e0\000\004\034\007\001\002\000\024\027\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe" +
    "\054\ufffe\001\002\000\024\027\134\033\131\034\007\035" +
    "\113\036\136\037\135\040\127\043\121\054\112\001\002" +
    "\000\004\002\110\001\002\000\004\016\010\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\017\001\002\000\044\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\031\uffeb\032\uffeb\001\002\000\050\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\016" +
    "\075\017\uffb9\020\076\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\031\uffb9\032\uffb9\001\002\000\044\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\031\uffe9\032\uffe9\001\002\000\044\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\031\uffbb\032\uffbb\001\002\000\024\013\015\016" +
    "\023\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\017\001\002\000\044\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\017\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf\032" +
    "\uffcf\001\002\000\044\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\017\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce\032\uffce" +
    "\001\002\000\044\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\017\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\032\uffcd\001" +
    "\002\000\044\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\017\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\031\uffec\032\uffec\001\002" +
    "\000\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\031\uffd0\032\uffd0\001\002\000" +
    "\026\013\015\016\023\024\044\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\017\031\001\002" +
    "\000\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\031\uffd1\032\uffd1\001\002\000" +
    "\044\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\031\uffea\032\uffea\001\002\000\044" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\031\uffe8\032\uffe8\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\004\023\042\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\017\001\002\000\024\013\015\016" +
    "\023\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\017\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\044\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\031\uffd5\032\uffd5\001\002\000\044\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\031\uffd4\032\uffd4\001\002\000\044\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\017" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\031\uffd7\032\uffd7\001\002\000\044\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031" +
    "\uffd8\032\uffd8\001\002\000\024\027\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\043\uffcb\054\uffcb\001" +
    "\002\000\044\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\017\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\032\uffd6\001\002" +
    "\000\026\013\015\016\023\024\044\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\040" +
    "\004\032\005\061\006\030\007\035\010\062\011\034\012" +
    "\060\013\033\017\uffdd\022\uffdd\023\uffdd\024\055\025\uffdd" +
    "\026\uffdd\032\uffdd\001\002\000\016\017\uffe2\022\uffe2\023" +
    "\uffe2\025\uffe2\026\uffe2\032\uffe2\001\002\000\010\017\050" +
    "\025\052\026\051\001\002\000\044\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\017\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\031" +
    "\uffd3\032\uffd3\001\002\000\026\013\015\016\023\024\044" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\017\001\002\000\026\013\015\016\023\024\044\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\017\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5" +
    "\032\uffe5\001\002\000\016\017\uffe4\022\uffe4\023\uffe4\025" +
    "\uffe4\026\uffe4\032\uffe4\001\002\000\004\010\071\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\024\013\015" +
    "\016\023\054\012\055\011\056\026\057\021\060\013\061" +
    "\027\111\017\001\002\000\026\010\066\013\uffdc\016\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\111" +
    "\uffdc\001\002\000\026\010\065\013\uffda\016\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\111\uffda\001" +
    "\002\000\004\010\063\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\017\001\002\000\030\004\032\006\030\007\035\011\034" +
    "\013\033\017\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\032" +
    "\uffe1\001\002\000\024\013\uffd9\016\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\111\uffd9\001\002\000" +
    "\024\013\uffdb\016\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\111\uffdb\001\002\000\030\004\032\006" +
    "\030\007\035\011\034\013\033\017\uffde\022\uffde\023\uffde" +
    "\025\uffde\026\uffde\032\uffde\001\002\000\030\004\032\006" +
    "\030\007\035\011\034\013\033\017\uffdf\022\uffdf\023\uffdf" +
    "\025\uffdf\026\uffdf\032\uffdf\001\002\000\024\013\015\016" +
    "\023\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\017\001\002\000\030\004\032\006\030\007\035\011" +
    "\034\013\033\017\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0" +
    "\032\uffe0\001\002\000\016\017\uffe3\022\uffe3\023\uffe3\025" +
    "\uffe3\026\uffe3\032\uffe3\001\002\000\044\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\031\uffd2\032\uffd2\001\002\000\026\013\015\016\023\017" +
    "\103\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\017\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\021" +
    "\100\001\002\000\046\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\017\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba" +
    "\032\uffba\001\002\000\044\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\017\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\031\uffae\032" +
    "\uffae\001\002\000\006\017\106\031\105\001\002\000\044" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\017\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\031\uffad\032\uffad\001\002\000\020\004" +
    "\032\006\030\007\035\011\034\013\033\017\uffaa\031\uffaa" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\044" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\031\uffac\032\uffac\001\002\000\020\004" +
    "\032\006\030\007\035\011\034\013\033\017\uffab\031\uffab" +
    "\001\002\000\004\002\001\001\002\000\024\002\uff6a\027" +
    "\uff6a\033\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\043\uff6a" +
    "\054\uff6a\001\002\000\020\004\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\013\uffb9\020\076\030\uffb9\001\002\000\004\023\u01e2" +
    "\001\002\000\026\002\uff7f\015\uff7f\027\uff7f\033\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\043\uff7f\054\uff7f\001\002" +
    "\000\026\002\uff84\015\uff84\027\uff84\033\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\043\uff84\054\uff84\001\002\000\014" +
    "\004\u01c1\006\u01c0\007\u01c4\010\u01c3\013\u01c2\001\002\000" +
    "\024\002\ufffd\027\134\033\131\035\113\036\136\037\135" +
    "\040\127\043\121\054\112\001\002\000\004\002\000\001" +
    "\002\000\004\054\u01ae\001\002\000\030\002\uffc6\015\uffc6" +
    "\027\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043" +
    "\uffc6\054\uffc6\062\uffc6\001\002\000\026\002\uff81\015\uff81" +
    "\027\uff81\033\uff81\035\uff81\036\uff81\037\uff81\040\uff81\043" +
    "\uff81\054\uff81\001\002\000\026\002\uff80\015\uff80\027\uff80" +
    "\033\uff80\035\uff80\036\uff80\037\uff80\040\uff80\043\uff80\054" +
    "\uff80\001\002\000\024\002\uff6c\027\uff6c\033\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\043\uff6c\054\uff6c\001\002\000" +
    "\016\004\uffbb\006\uffbb\007\uffbb\010\uffbb\013\uffbb\030\u0102" +
    "\001\002\000\004\016\357\001\002\000\026\002\uff83\015" +
    "\uff83\027\uff83\033\uff83\035\uff83\036\uff83\037\uff83\040\uff83" +
    "\043\uff83\054\uff83\001\002\000\004\016\353\001\002\000" +
    "\024\002\uff6b\027\uff6b\033\uff6b\035\uff6b\036\uff6b\037\uff6b" +
    "\040\uff6b\043\uff6b\054\uff6b\001\002\000\024\027\uffff\033" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\043\uffff" +
    "\054\uffff\001\002\000\004\054\161\001\002\000\004\016" +
    "\152\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\030\002\uff82\015\uff82\027\uff82\033\uff82\035\uff82\036\uff82" +
    "\037\uff82\040\uff82\043\uff82\054\uff82\062\140\001\002\000" +
    "\006\014\143\037\135\001\002\000\030\002\uffc7\015\uffc7" +
    "\027\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\043" +
    "\uffc7\054\uffc7\062\uffc7\001\002\000\030\002\uffc8\015\uffc8" +
    "\027\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\043" +
    "\uffc8\054\uffc8\062\uffc8\001\002\000\020\027\134\033\131" +
    "\035\113\036\136\037\135\040\127\054\112\001\002\000" +
    "\022\015\uff7b\027\uff7b\033\uff7b\035\uff7b\036\uff7b\037\uff7b" +
    "\040\uff7b\054\uff7b\001\002\000\022\015\147\027\134\033" +
    "\131\035\113\036\136\037\135\040\127\054\112\001\002" +
    "\000\022\015\uff7c\027\uff7c\033\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\040\uff7c\054\uff7c\001\002\000\030\002\uffc9\015\uffc9" +
    "\027\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\043" +
    "\uffc9\054\uffc9\062\uffc9\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\023\151\001\002\000\026\002" +
    "\uff7e\015\uff7e\027\uff7e\033\uff7e\035\uff7e\036\uff7e\037\uff7e" +
    "\040\uff7e\043\uff7e\054\uff7e\001\002\000\026\013\015\016" +
    "\023\024\044\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\010\017\154\025\052\026" +
    "\051\001\002\000\004\014\155\001\002\000\020\027\134" +
    "\033\131\035\113\036\136\037\135\040\127\054\112\001" +
    "\002\000\022\015\157\027\134\033\131\035\113\036\136" +
    "\037\135\040\127\054\112\001\002\000\030\002\uffca\015" +
    "\uffca\027\uffca\033\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\043\uffca\054\uffca\062\uffca\001\002\000\010\010\165\023" +
    "\163\031\162\001\002\000\010\010\uffe6\023\uffe6\031\uffe6" +
    "\001\002\000\004\054\352\001\002\000\026\002\ufff1\015" +
    "\ufff1\027\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\043\ufff1\054\ufff1\001\002\000\026\002\ufffc\015\ufffc\027" +
    "\ufffc\033\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\043\ufffc" +
    "\054\ufffc\001\002\000\040\013\015\014\177\016\023\020" +
    "\174\024\044\046\173\054\170\055\011\056\026\057\021" +
    "\060\013\061\027\067\200\073\167\111\017\001\002\000" +
    "\004\023\351\001\002\000\004\016\342\001\002\000\042" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\016\075\020\076\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\030\244\001\002\000\004\023\243\001" +
    "\002\000\004\023\uffa5\001\002\000\004\016\240\001\002" +
    "\000\026\013\015\016\023\021\232\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\004" +
    "\023\227\001\002\000\004\023\uffa6\001\002\000\004\054" +
    "\216\001\002\000\004\016\212\001\002\000\012\022\205" +
    "\023\204\025\052\026\051\001\002\000\004\023\203\001" +
    "\002\000\026\002\ufff5\015\ufff5\027\ufff5\033\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\043\ufff5\054\ufff5\001\002\000" +
    "\026\002\ufffb\015\ufffb\027\ufffb\033\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\043\ufffb\054\ufffb\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\016\004\032\006\030\007" +
    "\035\011\034\013\033\032\207\001\002\000\024\013\015" +
    "\016\023\054\012\055\011\056\026\057\021\060\013\061" +
    "\027\111\017\001\002\000\016\004\032\006\030\007\035" +
    "\011\034\013\033\023\211\001\002\000\026\002\ufff7\015" +
    "\ufff7\027\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\043\ufff7\054\ufff7\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\017\214\001\002\000\004\023\uff99\001\002\000\006" +
    "\015\222\031\221\001\002\000\004\032\217\001\002\000" +
    "\004\055\220\001\002\000\006\015\uffed\031\uffed\001\002" +
    "\000\004\054\224\001\002\000\004\023\223\001\002\000" +
    "\026\002\ufff8\015\ufff8\027\ufff8\033\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\043\ufff8\054\ufff8\001\002\000\004\032" +
    "\225\001\002\000\004\055\226\001\002\000\006\015\uffee" +
    "\031\uffee\001\002\000\026\002\ufff4\015\ufff4\027\ufff4\033" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\043\ufff4\054\ufff4" +
    "\001\002\000\006\021\235\031\234\001\002\000\020\004" +
    "\032\006\030\007\035\011\034\013\033\021\uffef\031\uffef" +
    "\001\002\000\004\023\233\001\002\000\026\002\ufffa\015" +
    "\ufffa\027\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\043\ufffa\054\ufffa\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\004\023\236\001\002\000\026\002\ufff9\015" +
    "\ufff9\027\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\043\ufff9\054\ufff9\001\002\000\020\004\032\006\030\007" +
    "\035\011\034\013\033\021\ufff0\031\ufff0\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\017\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\017\242\001\002\000\004\023" +
    "\uff98\001\002\000\026\002\ufff2\015\ufff2\027\ufff2\033\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\043\ufff2\054\ufff2\001" +
    "\002\000\042\044\266\045\263\047\256\050\255\051\257" +
    "\052\251\053\260\063\267\064\254\065\252\066\265\070" +
    "\253\071\246\072\261\074\270\102\250\001\002\000\004" +
    "\023\341\001\002\000\004\016\uff96\001\002\000\004\016" +
    "\336\001\002\000\004\016\313\001\002\000\004\016\uffa3" +
    "\001\002\000\004\016\uffa0\001\002\000\004\016\uff97\001" +
    "\002\000\004\016\uffa1\001\002\000\004\016\uff9b\001\002" +
    "\000\004\016\uff9c\001\002\000\004\016\uff9a\001\002\000" +
    "\004\016\uffa4\001\002\000\004\016\uff95\001\002\000\004" +
    "\016\311\001\002\000\004\016\uff9d\001\002\000\004\016" +
    "\306\001\002\000\004\016\uff9f\001\002\000\004\016\uff9e" +
    "\001\002\000\004\016\uffa2\001\002\000\004\016\271\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\273\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\275\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\017\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\277\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\017\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\031\301\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\016\004\032\006\030\007" +
    "\035\011\034\013\033\031\303\001\002\000\024\013\015" +
    "\016\023\054\012\055\011\056\026\057\021\060\013\061" +
    "\027\111\017\001\002\000\016\004\032\006\030\007\035" +
    "\011\034\013\033\017\305\001\002\000\004\023\uff93\001" +
    "\002\000\004\054\307\001\002\000\004\017\310\001\002" +
    "\000\004\023\uffa9\001\002\000\004\017\312\001\002\000" +
    "\004\023\uffa8\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\315\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\317\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\321" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\323\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\325\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\327\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\017\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\331\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\017\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\031\333\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\016\004\032\006\030\007" +
    "\035\011\034\013\033\017\335\001\002\000\004\023\uff92" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\017\340\001" +
    "\002\000\004\023\uffa7\001\002\000\026\002\ufff3\015\ufff3" +
    "\027\ufff3\033\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\043" +
    "\ufff3\054\ufff3\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\344\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\346\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\017\350" +
    "\001\002\000\004\023\uff94\001\002\000\026\002\ufff6\015" +
    "\ufff6\027\ufff6\033\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\043\ufff6\054\ufff6\001\002\000\010\010\uffe7\023\uffe7\031" +
    "\uffe7\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\017\355" +
    "\001\002\000\004\023\356\001\002\000\026\002\uffcc\015" +
    "\uffcc\027\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\043\uffcc\054\uffcc\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\017\361\001\002\000\004\014\362\001\002\000\006" +
    "\041\365\042\364\001\002\000\010\015\uffb6\041\uffb6\042" +
    "\uffb6\001\002\000\004\032\376\001\002\000\024\013\015" +
    "\016\023\054\012\055\011\056\026\057\021\060\013\061" +
    "\027\111\017\001\002\000\010\015\370\041\365\042\364" +
    "\001\002\000\010\015\uffb7\041\uffb7\042\uffb7\001\002\000" +
    "\026\002\uffb8\015\uffb8\027\uffb8\033\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\043\uffb8\054\uffb8\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\032\372\001\002" +
    "\000\004\014\373\001\002\000\020\027\134\033\131\035" +
    "\113\036\136\037\135\040\127\054\112\001\002\000\022" +
    "\015\375\027\134\033\131\035\113\036\136\037\135\040" +
    "\127\054\112\001\002\000\010\015\uffb5\041\uffb5\042\uffb5" +
    "\001\002\000\004\014\377\001\002\000\020\027\134\033" +
    "\131\035\113\036\136\037\135\040\127\054\112\001\002" +
    "\000\022\015\u0101\027\134\033\131\035\113\036\136\037" +
    "\135\040\127\054\112\001\002\000\010\015\uffb4\041\uffb4" +
    "\042\uffb4\001\002\000\032\046\u010a\075\u0115\076\u0118\077" +
    "\u0113\100\u010b\101\u011a\103\u0119\104\u0116\105\u0110\106\u0114" +
    "\107\u0117\110\u0106\001\002\000\004\023\uff79\001\002\000" +
    "\004\023\uff75\001\002\000\004\023\uff6f\001\002\000\004" +
    "\016\u01aa\001\002\000\004\023\uff70\001\002\000\004\023" +
    "\uff76\001\002\000\004\023\u01a9\001\002\000\004\016\u01a7" +
    "\001\002\000\004\016\u0198\001\002\000\004\023\uff74\001" +
    "\002\000\004\023\uff78\001\002\000\004\023\uff77\001\002" +
    "\000\004\023\uff6e\001\002\000\004\016\u018b\001\002\000" +
    "\004\023\uff72\001\002\000\004\023\uff73\001\002\000\004" +
    "\016\u0174\001\002\000\004\016\u0171\001\002\000\004\016" +
    "\u0160\001\002\000\004\016\u0153\001\002\000\004\016\u014e" +
    "\001\002\000\004\016\u0137\001\002\000\004\016\u012a\001" +
    "\002\000\004\016\u011b\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\017\001\002\000\016\004\032\006\030\007\035\011\034" +
    "\013\033\031\u011d\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\u011f\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u0121\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0123\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0125" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0127\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\017\u0129\001\002" +
    "\000\004\023\uff8d\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\u012c\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u012e\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0130\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0132" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0134\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\017\u0136\001\002" +
    "\000\004\023\uff8c\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\u0139\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u013b\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u013d\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u013f" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0141\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0143\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u0145\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\017\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\031\u0147\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\017\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\031\u0149\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\016\004\032\006\030\007" +
    "\035\011\034\013\033\031\u014b\001\002\000\024\013\015" +
    "\016\023\054\012\055\011\056\026\057\021\060\013\061" +
    "\027\111\017\001\002\000\016\004\032\006\030\007\035" +
    "\011\034\013\033\017\u014d\001\002\000\004\023\uff90\001" +
    "\002\000\006\017\u0150\054\u0151\001\002\000\004\017\u0152" +
    "\001\002\000\004\023\uff88\001\002\000\004\016\075\001" +
    "\002\000\004\023\uff89\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\017\001\002\000\016\004\032\006\030\007\035\011\034" +
    "\013\033\031\u0155\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\u0157\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u0159\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u015b\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u015d" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\017\u015f\001" +
    "\002\000\004\023\uff8a\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\017\001\002\000\016\004\032\006\030\007\035\011\034" +
    "\013\033\031\u0162\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\u0164\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u0166\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0168\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u016a" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u016c\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u016e\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\017\u0170\001\002\000" +
    "\004\023\uff91\001\002\000\004\054\u0151\001\002\000\004" +
    "\017\u0173\001\002\000\004\023\uff85\001\002\000\024\013" +
    "\015\016\023\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\016\004\032\006\030\007" +
    "\035\011\034\013\033\031\u0176\001\002\000\024\013\015" +
    "\016\023\054\012\055\011\056\026\057\021\060\013\061" +
    "\027\111\017\001\002\000\016\004\032\006\030\007\035" +
    "\011\034\013\033\031\u0178\001\002\000\024\013\015\016" +
    "\023\054\012\055\011\056\026\057\021\060\013\061\027" +
    "\111\017\001\002\000\016\004\032\006\030\007\035\011" +
    "\034\013\033\031\u017a\001\002\000\024\013\015\016\023" +
    "\054\012\055\011\056\026\057\021\060\013\061\027\111" +
    "\017\001\002\000\016\004\032\006\030\007\035\011\034" +
    "\013\033\031\u017c\001\002\000\024\013\015\016\023\054" +
    "\012\055\011\056\026\057\021\060\013\061\027\111\017" +
    "\001\002\000\016\004\032\006\030\007\035\011\034\013" +
    "\033\031\u017e\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u0180\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u0182\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0184" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0186\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0188\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\017\u018a\001\002\000" +
    "\004\023\uff8f\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u018d\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u018f\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u0191" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u0193\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u0195\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\017\u0197\001\002\000" +
    "\004\023\uff8b\001\002\000\024\013\015\016\023\054\012" +
    "\055\011\056\026\057\021\060\013\061\027\111\017\001" +
    "\002\000\016\004\032\006\030\007\035\011\034\013\033" +
    "\031\u019a\001\002\000\024\013\015\016\023\054\012\055" +
    "\011\056\026\057\021\060\013\061\027\111\017\001\002" +
    "\000\016\004\032\006\030\007\035\011\034\013\033\031" +
    "\u019c\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\031\u019e" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\031\u01a0\001" +
    "\002\000\024\013\015\016\023\054\012\055\011\056\026" +
    "\057\021\060\013\061\027\111\017\001\002\000\016\004" +
    "\032\006\030\007\035\011\034\013\033\031\u01a2\001\002" +
    "\000\024\013\015\016\023\054\012\055\011\056\026\057" +
    "\021\060\013\061\027\111\017\001\002\000\016\004\032" +
    "\006\030\007\035\011\034\013\033\031\u01a4\001\002\000" +
    "\024\013\015\016\023\054\012\055\011\056\026\057\021" +
    "\060\013\061\027\111\017\001\002\000\016\004\032\006" +
    "\030\007\035\011\034\013\033\017\u01a6\001\002\000\004" +
    "\023\uff8e\001\002\000\004\017\u01a8\001\002\000\004\023" +
    "\uff71\001\002\000\026\002\uff7a\015\uff7a\027\uff7a\033\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\043\uff7a\054\uff7a\001" +
    "\002\000\006\017\u01ac\054\u0151\001\002\000\004\017\u01ad" +
    "\001\002\000\004\023\uff86\001\002\000\004\023\uff87\001" +
    "\002\000\004\016\u01af\001\002\000\006\017\u01b1\027\u01b0" +
    "\001\002\000\004\054\u01be\001\002\000\004\014\u01bb\001" +
    "\002\000\024\002\uffb3\027\uffb3\033\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\043\uffb3\054\uffb3\001\002\000\006\017" +
    "\u01b5\031\u01b4\001\002\000\004\027\u01b9\001\002\000\004" +
    "\014\u01b6\001\002\000\020\027\134\033\131\035\113\036" +
    "\136\037\135\040\127\054\112\001\002\000\022\015\u01b8" +
    "\027\134\033\131\035\113\036\136\037\135\040\127\054" +
    "\112\001\002\000\024\002\uffb2\027\uffb2\033\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\043\uffb2\054\uffb2\001\002\000" +
    "\004\054\u01ba\001\002\000\006\017\uffb0\031\uffb0\001\002" +
    "\000\020\027\134\033\131\035\113\036\136\037\135\040" +
    "\127\054\112\001\002\000\022\015\u01bd\027\134\033\131" +
    "\035\113\036\136\037\135\040\127\054\112\001\002\000" +
    "\024\002\uffb1\027\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\043\uffb1\054\uffb1\001\002\000\006\017\uffaf\031" +
    "\uffaf\001\002\000\024\002\uff6d\027\uff6d\033\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\043\uff6d\054\uff6d\001\002\000" +
    "\004\010\u01df\001\002\000\006\004\u01da\010\u01db\001\002" +
    "\000\006\010\u01d6\013\u01d5\001\002\000\032\013\015\016" +
    "\023\024\044\046\173\054\u01c8\055\011\056\026\057\021" +
    "\060\013\061\027\067\200\111\017\001\002\000\004\010" +
    "\u01c5\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\023\u01c7" +
    "\001\002\000\026\002\uffc2\015\uffc2\027\uffc2\033\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\043\uffc2\054\uffc2\001\002" +
    "\000\042\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\016\075\020\076\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\030\u01d2\001\002\000\004\023" +
    "\u01d1\001\002\000\012\022\u01cc\023\u01cb\025\052\026\051" +
    "\001\002\000\026\002\uffc5\015\uffc5\027\uffc5\033\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\054\uffc5\001\002" +
    "\000\026\013\015\016\023\024\044\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\010" +
    "\025\052\026\051\032\u01ce\001\002\000\026\013\015\016" +
    "\023\024\044\054\012\055\011\056\026\057\021\060\013" +
    "\061\027\111\017\001\002\000\010\023\u01d0\025\052\026" +
    "\051\001\002\000\026\002\uffc4\015\uffc4\027\uffc4\033\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\043\uffc4\054\uffc4\001" +
    "\002\000\026\002\uffbc\015\uffbc\027\uffbc\033\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\043\uffbc\054\uffbc\001\002\000" +
    "\036\044\266\045\263\047\256\050\255\051\257\052\251" +
    "\053\260\063\267\064\254\065\252\066\265\070\253\071" +
    "\246\072\261\001\002\000\004\023\u01d4\001\002\000\026" +
    "\002\uffbf\015\uffbf\027\uffbf\033\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\043\uffbf\054\uffbf\001\002\000\004\023\u01d9" +
    "\001\002\000\024\013\015\016\023\054\012\055\011\056" +
    "\026\057\021\060\013\061\027\111\017\001\002\000\016" +
    "\004\032\006\030\007\035\011\034\013\033\023\u01d8\001" +
    "\002\000\026\002\uffc0\015\uffc0\027\uffc0\033\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\043\uffc0\054\uffc0\001\002\000" +
    "\026\002\uffbd\015\uffbd\027\uffbd\033\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\043\uffbd\054\uffbd\001\002\000\004\023" +
    "\u01de\001\002\000\024\013\015\016\023\054\012\055\011" +
    "\056\026\057\021\060\013\061\027\111\017\001\002\000" +
    "\016\004\032\006\030\007\035\011\034\013\033\023\u01dd" +
    "\001\002\000\026\002\uffc1\015\uffc1\027\uffc1\033\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\043\uffc1\054\uffc1\001\002" +
    "\000\026\002\uffbe\015\uffbe\027\uffbe\033\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\043\uffbe\054\uffbe\001\002\000\024" +
    "\013\015\016\023\054\012\055\011\056\026\057\021\060" +
    "\013\061\027\111\017\001\002\000\016\004\032\006\030" +
    "\007\035\011\034\013\033\023\u01e1\001\002\000\026\002" +
    "\uffc3\015\uffc3\027\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\043\uffc3\054\uffc3\001\002\000\026\002\uff7d\015" +
    "\uff7d\027\uff7d\033\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d" +
    "\043\uff7d\054\uff7d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e0\000\010\011\004\055\003\060\005\001\001\000" +
    "\002\001\001\000\040\003\113\005\131\012\117\042\110" +
    "\043\125\046\122\047\115\050\123\051\124\052\136\054" +
    "\121\055\132\056\127\074\114\075\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\023\066\024\070\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\073\066\024\070\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\037\017" +
    "\043\013\047\015\061\044\064\045\065\046\066\024\070" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\042\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\040\066\024\070" +
    "\021\001\001\000\016\037\017\043\013\047\015\061\037" +
    "\066\024\070\021\001\001\000\016\037\017\043\013\047" +
    "\015\061\036\066\024\070\021\001\001\000\016\037\017" +
    "\043\013\047\015\061\035\066\024\070\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\037" +
    "\017\043\013\047\015\061\044\064\045\065\072\066\024" +
    "\070\021\001\001\000\006\062\056\063\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\037\017\043\013\047\015\061\044\064\045\065\053\066" +
    "\024\070\021\001\001\000\022\037\017\043\013\047\015" +
    "\061\044\064\045\065\052\066\024\070\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\067\066\024\070\021\001" +
    "\001\000\016\037\017\043\013\047\015\061\066\066\024" +
    "\070\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\037\017\043\013\047\015\061\063" +
    "\066\024\070\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\071\066\024\070" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\036\101\037\017\040\100\043\013\047" +
    "\015\061\103\066\024\070\021\001\001\000\016\037\017" +
    "\043\013\047\015\061\076\066\024\070\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\037" +
    "\017\043\013\047\015\061\106\066\024\070\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\113\005\131\042\110\043\125\046\122\047\115\050\123" +
    "\051\u01be\052\136\054\121\056\127\074\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\157\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\147\066\024\070\021\001\001\000\004\053\140\001" +
    "\001\000\004\054\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\113\004\144\005\143\043\125\046" +
    "\122\047\115\050\123\052\136\054\121\056\127\074\114" +
    "\001\001\000\002\001\001\000\026\003\113\005\145\043" +
    "\125\046\122\047\115\050\123\052\136\054\121\056\127" +
    "\074\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\037\017\043\013" +
    "\047\015\061\044\064\045\065\152\066\024\070\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\113" +
    "\004\155\005\143\043\125\046\122\047\115\050\123\052" +
    "\136\054\121\056\127\074\114\001\001\000\026\003\113" +
    "\005\145\043\125\046\122\047\115\050\123\052\136\054" +
    "\121\056\127\074\114\001\001\000\002\001\001\000\004" +
    "\073\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\023\174\024\201" +
    "\025\165\030\171\031\175\035\170\037\017\043\013\047" +
    "\015\061\044\064\045\065\200\066\024\070\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\037\017\043\013\047\015\061\230\066\024\070\021\072" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\205\066\024\070\021\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\207\066\024\070\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\037\017\043\013\047\015\061\212" +
    "\066\024\070\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\037\017" +
    "\043\013\047\015\061\236\066\024\070\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\240\066\024\070\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\246\032\261\033\263\034\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\017\043\013\047\015\061\271\066\024" +
    "\070\021\001\001\000\002\001\001\000\016\037\017\043" +
    "\013\047\015\061\273\066\024\070\021\001\001\000\002" +
    "\001\001\000\016\037\017\043\013\047\015\061\275\066" +
    "\024\070\021\001\001\000\002\001\001\000\016\037\017" +
    "\043\013\047\015\061\277\066\024\070\021\001\001\000" +
    "\002\001\001\000\016\037\017\043\013\047\015\061\301" +
    "\066\024\070\021\001\001\000\002\001\001\000\016\037" +
    "\017\043\013\047\015\061\303\066\024\070\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\017\043\013\047\015\061\313\066" +
    "\024\070\021\001\001\000\002\001\001\000\016\037\017" +
    "\043\013\047\015\061\315\066\024\070\021\001\001\000" +
    "\002\001\001\000\016\037\017\043\013\047\015\061\317" +
    "\066\024\070\021\001\001\000\002\001\001\000\016\037" +
    "\017\043\013\047\015\061\321\066\024\070\021\001\001" +
    "\000\002\001\001\000\016\037\017\043\013\047\015\061" +
    "\323\066\024\070\021\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\325\066\024\070\021\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\327\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\331\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\333\066\024\070\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\037\017\043\013\047\015\061" +
    "\336\066\024\070\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\342\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\344\066\024\070" +
    "\021\001\001\000\002\001\001\000\016\037\017\043\013" +
    "\047\015\061\346\066\024\070\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\353\066\024\070" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\017\043\013\047\015\061\357\066" +
    "\024\070\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\362\045\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\037\017\043\013\047\015\061\370" +
    "\066\024\070\021\001\001\000\004\044\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\113\004\373\005\143\043\125\046" +
    "\122\047\115\050\123\052\136\054\121\056\127\074\114" +
    "\001\001\000\026\003\113\005\145\043\125\046\122\047" +
    "\115\050\123\052\136\054\121\056\127\074\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\113\004" +
    "\377\005\143\043\125\046\122\047\115\050\123\052\136" +
    "\054\121\056\127\074\114\001\001\000\026\003\113\005" +
    "\145\043\125\046\122\047\115\050\123\052\136\054\121" +
    "\056\127\074\114\001\001\000\002\001\001\000\032\002" +
    "\u0108\006\u010e\007\u0106\013\u0110\014\u0111\015\u010b\016\u0103" +
    "\017\u010d\020\u0107\021\u010c\022\u0102\026\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\037\017\043\013\047\015\061" +
    "\u011b\066\024\070\021\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\u011d\066\024\070\021\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\u011f\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u0121\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u0123\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u0125\066\024\070" +
    "\021\001\001\000\002\001\001\000\016\037\017\043\013" +
    "\047\015\061\u0127\066\024\070\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\u012a\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u012c\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u012e\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u0130\066\024\070" +
    "\021\001\001\000\002\001\001\000\016\037\017\043\013" +
    "\047\015\061\u0132\066\024\070\021\001\001\000\002\001" +
    "\001\000\016\037\017\043\013\047\015\061\u0134\066\024" +
    "\070\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u0137\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u0139\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u013b\066\024\070" +
    "\021\001\001\000\002\001\001\000\016\037\017\043\013" +
    "\047\015\061\u013d\066\024\070\021\001\001\000\002\001" +
    "\001\000\016\037\017\043\013\047\015\061\u013f\066\024" +
    "\070\021\001\001\000\002\001\001\000\016\037\017\043" +
    "\013\047\015\061\u0141\066\024\070\021\001\001\000\002" +
    "\001\001\000\016\037\017\043\013\047\015\061\u0143\066" +
    "\024\070\021\001\001\000\002\001\001\000\016\037\017" +
    "\043\013\047\015\061\u0145\066\024\070\021\001\001\000" +
    "\002\001\001\000\016\037\017\043\013\047\015\061\u0147" +
    "\066\024\070\021\001\001\000\002\001\001\000\016\037" +
    "\017\043\013\047\015\061\u0149\066\024\070\021\001\001" +
    "\000\002\001\001\000\016\037\017\043\013\047\015\061" +
    "\u014b\066\024\070\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u014e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\u0153\066\024\070\021\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\u0155\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u0157\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u0159\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u015b\066\024\070" +
    "\021\001\001\000\002\001\001\000\016\037\017\043\013" +
    "\047\015\061\u015d\066\024\070\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\u0160\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u0162\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u0164\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u0166\066\024\070" +
    "\021\001\001\000\002\001\001\000\016\037\017\043\013" +
    "\047\015\061\u0168\066\024\070\021\001\001\000\002\001" +
    "\001\000\016\037\017\043\013\047\015\061\u016a\066\024" +
    "\070\021\001\001\000\002\001\001\000\016\037\017\043" +
    "\013\047\015\061\u016c\066\024\070\021\001\001\000\002" +
    "\001\001\000\016\037\017\043\013\047\015\061\u016e\066" +
    "\024\070\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0171\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\037\017\043\013\047\015\061\u0174\066\024" +
    "\070\021\001\001\000\002\001\001\000\016\037\017\043" +
    "\013\047\015\061\u0176\066\024\070\021\001\001\000\002" +
    "\001\001\000\016\037\017\043\013\047\015\061\u0178\066" +
    "\024\070\021\001\001\000\002\001\001\000\016\037\017" +
    "\043\013\047\015\061\u017a\066\024\070\021\001\001\000" +
    "\002\001\001\000\016\037\017\043\013\047\015\061\u017c" +
    "\066\024\070\021\001\001\000\002\001\001\000\016\037" +
    "\017\043\013\047\015\061\u017e\066\024\070\021\001\001" +
    "\000\002\001\001\000\016\037\017\043\013\047\015\061" +
    "\u0180\066\024\070\021\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\u0182\066\024\070\021\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\u0184\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u0186\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u0188\066\024\070\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\037\017\043\013\047\015\061" +
    "\u018b\066\024\070\021\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\u018d\066\024\070\021\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\u018f\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u0191\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u0193\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u0195\066\024\070" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\017\043\013\047\015\061\u0198\066\024\070\021\001" +
    "\001\000\002\001\001\000\016\037\017\043\013\047\015" +
    "\061\u019a\066\024\070\021\001\001\000\002\001\001\000" +
    "\016\037\017\043\013\047\015\061\u019c\066\024\070\021" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u019e\066\024\070\021\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u01a0\066\024\070" +
    "\021\001\001\000\002\001\001\000\016\037\017\043\013" +
    "\047\015\061\u01a2\066\024\070\021\001\001\000\002\001" +
    "\001\000\016\037\017\043\013\047\015\061\u01a4\066\024" +
    "\070\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u01aa\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u01b2\041\u01b1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\113\004\u01b6\005\143\043\125\046\122\047" +
    "\115\050\123\052\136\054\121\056\127\074\114\001\001" +
    "\000\026\003\113\005\145\043\125\046\122\047\115\050" +
    "\123\052\136\054\121\056\127\074\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\113\004\u01bb\005\143\043\125\046\122\047\115\050\123" +
    "\052\136\054\121\056\127\074\114\001\001\000\026\003" +
    "\113\005\145\043\125\046\122\047\115\050\123\052\136" +
    "\054\121\056\127\074\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\030\171\031\175\035" +
    "\u01c8\037\017\043\013\047\015\061\044\064\045\065\u01c9" +
    "\066\024\070\021\001\001\000\002\001\001\000\016\037" +
    "\017\043\013\047\015\061\u01c5\066\024\070\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\037\017\043\013\047\015\061\044\064\045\065\u01cc\066" +
    "\024\070\021\001\001\000\002\001\001\000\022\037\017" +
    "\043\013\047\015\061\044\064\045\065\u01ce\066\024\070" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\246\032\261\033\263\034\u01d2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\017\043\013\047\015\061\u01d6\066\024\070" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\017\043\013\047" +
    "\015\061\u01db\066\024\070\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\037\017\043" +
    "\013\047\015\061\u01df\066\024\070\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public Raiz regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public Raiz RCCSS;
	 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {


    public String estado="";

  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= inicio_p1 inicio_p2 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",46, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio_p1 ::= inicio_p1 Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_p1 ::= Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_p2 ::= Cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p2",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ES_VAR ::= var Lista_ID ES_VAR1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ES_VAR1 ::= igu Exp_Log pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ES_VAR1 ::= igu ico fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_VAR1 ::= igu ico Lista_Datos fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ES_VAR1 ::= igu ill Lista_Objetos fll pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ES_VAR1 ::= igu Exp_Log fin Exp_Ari dop Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ES_VAR1 ::= igu Acc_venta pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ES_VAR1 ::= igu Acc_conte pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES_VAR1 ::= igu Acc_boton pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES_VAR1 ::= igu idva pun func_nat pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ES_VAR1 ::= igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ES_VAR1 ::= pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Datos ::= Lista_Datos com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Datos ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Objetos ::= Lista_Objetos com idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Lista_Objetos ::= idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dato_Pri ::= nume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dato_Pri ::= cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dato_Pri ::= deci 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dato_Pri ::= verd 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Dato_Pri ::= fals 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_ID ::= Lista_ID com idva 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista_ID ::= idva 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_Log ::= Exp_Log or Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_Log ::= Exp_Log and Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_Log ::= not Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_Log ::= Exp_Com 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_Com ::= Exp_Ari igu igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp_Com ::= Exp_Ari not igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp_Com ::= Exp_Ari Ex_may Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp_Com ::= Exp_Ari Ex_men Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp_Com ::= Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ex_may ::= may 
            {
              Object RESULT =null;
		RESULT=">";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ex_may ::= may igu 
            {
              Object RESULT =null;
		RESULT=">=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ex_men ::= men 
            {
              Object RESULT =null;
		RESULT="<";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ex_men ::= men igu 
            {
              Object RESULT =null;
		RESULT="<=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_Ari ::= Exp_Ari mas Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_Ari ::= Exp_Ari nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_Ari ::= Exp_Ari por Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_Ari ::= Exp_Ari div Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp_Ari ::= Exp_Ari pot Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp_Ari ::= ipa Exp_Log fpa 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp_Ari ::= nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp_Ari ::= Dato_Posfa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dato_Posfa ::= Dato_Pri 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dato_Posfa ::= Es_tipo_id 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dato_Posfa ::= nulo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dato_Posfa ::= Es_lla_fun 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Es_Impr ::= impr ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impr",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Es_Impo ::= impo ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impo",43, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Es_Si ::= si ipa Exp_Log fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Si",42, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Es_sino ::= sino ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sino",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Estru_si ::= Estru_si sino Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Estru_si ::= Estru_si Es_sino 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Estru_si ::= Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Es_asig ::= Es_tipo_id igu Exp_Log pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Es_asig ::= Es_tipo_id igu Exp_Log fin Exp_Log dop Exp_Log pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Es_asig ::= Es_tipo_id por igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Es_asig ::= Es_tipo_id div igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Es_asig ::= Es_tipo_id mas igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Es_asig ::= Es_tipo_id nos igu Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Es_asig ::= Es_tipo_id igu idva pun func_nat pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Es_asig ::= Es_tipo_id mas mas pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Es_asig ::= Es_tipo_id nos nos pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Es_asig ::= Es_tipo_id igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Es_tipo_id ::= Es_tipo_id1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Es_tipo_id1 ::= idva ico Exp_Ari fco 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id1",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Es_tipo_id1 ::= idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id1",33, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Es_sele ::= sele ipa Exp_Ari fpa ill Cuerpo_sele fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sele",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Cuerpo_sele ::= Cuerpo_sele tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Cuerpo_sele ::= tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_sele ::= caso Exp_Ari dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_sele ::= defe dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Es_func ::= func idva ipa Es_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Es_fun1 ::= Lista_parametros fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Es_fun1 ::= fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Lista_parametros ::= Lista_parametros com var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Lista_parametros ::= var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Es_lla_fun ::= idva ipa Es_lla_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Es_lla_fun1 ::= fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Es_lla_fun1 ::= Lista_Aritmetica fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Lista_Aritmetica ::= Lista_Aritmetica com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Lista_Aritmetica ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func_nat ::= Tipo_Fun ipa idva fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // func_nat ::= Tipos_Acc_Ord ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // func_nat ::= Tipo_Obte ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // func_nat1 ::= func_leer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // func_nat1 ::= func_gxml 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Tipo_Fun ::= filt 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Tipo_Fun ::= busc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Tipo_Fun ::= map 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipo_Fun ::= redu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Tipo_Fun ::= todo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Tipo_Fun ::= algu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipos_Acc_Ord ::= desc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipos_Acc_Ord ::= asce 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipos_Acc_Ord ::= inve 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipos_Acc_Ord ::= maxi 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipos_Acc_Ord ::= mini 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // func_leer ::= lgxm ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_leer",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // func_gxml ::= cada ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_gxml",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Tipo_Obte ::= opet 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Tipo_Obte ::= opid 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Tipo_Obte ::= opno 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Acc_venta ::= cven ipa Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_venta",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Acc_conte ::= idva pun ccon ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_conte",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Acc_boton ::= idva pun cbot ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_boton",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-21)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Acc_texto ::= ctex ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_texto",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Acc_ctext ::= ccte ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_ctext",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Acc_Atext ::= cate ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Atext",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Acc_Cnume ::= ccnu ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Cnume",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Acc_despl ::= cdes ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_despl",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Acc_image ::= cima ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_image",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Acc_video ::= cvid ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_video",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Acc_repro ::= crep ipa Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_repro",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Acc_alcar ::= acar ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Acc_alcar ::= acar ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Acc_alcer ::= acer ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Acc_alcer ::= acer ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Acc_alcli ::= acli ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcli",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Cuerpo_general ::= ES_VAR 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Cuerpo_general ::= Es_Impr 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Cuerpo_general ::= Estru_si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Cuerpo_general ::= Es_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Cuerpo_general ::= Es_asig 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Cuerpo_general ::= Es_acc_ID 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Cuerpo_general ::= reto Exp_Ari pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Cuerpo_general ::= dete pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Estu_Cuerpo ::= Estu_Cuerpo Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Estu_Cuerpo ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Es_acc_ID ::= Es_tipo_id1 pun accion_ID pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_acc_ID",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // accion_ID ::= Acc_texto 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // accion_ID ::= Acc_ctext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // accion_ID ::= Acc_Atext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // accion_ID ::= Acc_Cnume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // accion_ID ::= Acc_despl 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // accion_ID ::= Acc_image 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // accion_ID ::= Acc_video 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // accion_ID ::= Acc_repro 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // accion_ID ::= cada ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // accion_ID ::= Acc_alcar 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // accion_ID ::= Acc_alcli 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // accion_ID ::= Acc_alcer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Cuerpo_funcion ::= Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Es_DeAu ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",39, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Es_DeAu ::= Es_func 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",39, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
