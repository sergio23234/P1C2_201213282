
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFs.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symf.class;
}

  /** Default constructor. */
  public SintacticoFs() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\061\004\000\002\061" +
    "\003\000\002\011\004\000\002\011\003\000\002\012\003" +
    "\000\002\077\005\000\002\076\005\000\002\076\006\000" +
    "\002\076\007\000\002\076\007\000\002\076\005\000\002" +
    "\076\005\000\002\076\005\000\002\076\005\000\002\076" +
    "\003\000\002\075\005\000\002\075\003\000\002\074\007" +
    "\000\002\074\005\000\002\072\005\000\002\072\003\000" +
    "\002\070\003\000\002\067\005\000\002\067\005\000\002" +
    "\067\004\000\002\067\007\000\002\067\003\000\002\066" +
    "\006\000\002\066\006\000\002\066\005\000\002\066\005" +
    "\000\002\066\003\000\002\065\003\000\002\065\004\000" +
    "\002\064\003\000\002\064\004\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\004\000\002\063\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\004\000\002\071\004\000\002" +
    "\071\004\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\057\007" +
    "\000\002\056\007\000\002\055\011\000\002\054\006\000" +
    "\002\053\005\000\002\053\004\000\002\053\003\000\002" +
    "\050\006\000\002\050\007\000\002\050\007\000\002\050" +
    "\007\000\002\050\007\000\002\050\006\000\002\050\006" +
    "\000\002\050\006\000\002\047\006\000\002\047\003\000" +
    "\002\047\004\000\002\047\007\000\002\046\011\000\002" +
    "\045\004\000\002\045\003\000\002\044\010\000\002\044" +
    "\007\000\002\042\006\000\002\042\006\000\002\041\007" +
    "\000\002\041\006\000\002\010\006\000\002\010\004\000" +
    "\002\037\005\000\002\040\003\000\002\040\004\000\002" +
    "\036\005\000\002\036\003\000\002\062\004\000\002\062" +
    "\003\000\002\034\006\000\002\034\003\000\002\034\006" +
    "\000\002\034\010\000\002\035\003\000\002\035\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\031\006\000\002\030\006\000" +
    "\002\027\003\000\002\027\003\000\002\025\012\000\002" +
    "\024\021\000\002\023\027\000\002\022\024\000\002\021" +
    "\032\000\002\017\032\000\002\020\022\000\002\016\022" +
    "\000\002\015\020\000\002\014\020\000\002\013\020\000" +
    "\002\007\006\000\002\007\005\000\002\006\006\000\002" +
    "\006\005\000\002\026\006\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\004\004\000\002\004\003\000\002" +
    "\003\005\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\006\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\100\004\000\002\100\003\000\002\052" +
    "\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\024\030\032\036\025\037\031\040\006\041" +
    "\034\042\033\043\023\046\015\057\005\001\002\000\024" +
    "\002\uff62\030\uff62\036\uff62\040\uff62\041\uff62\042\uff62\043" +
    "\uff62\046\uff62\057\uff62\001\002\000\106\004\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\013\uffb8\016\135\020\151\021\143\031" +
    "\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\073\uffb8\074" +
    "\uffb8\075\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\001" +
    "\002\000\004\024\u01e6\001\002\000\026\002\uff7e\015\uff7e" +
    "\030\uff7e\036\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\046" +
    "\uff7e\057\uff7e\001\002\000\026\002\uff79\015\uff79\030\uff79" +
    "\036\uff79\040\uff79\041\uff79\042\uff79\043\uff79\046\uff79\057" +
    "\uff79\001\002\000\100\004\u012d\006\u012e\007\u013b\010\u013d" +
    "\013\u0137\031\u0132\047\156\050\153\052\145\053\144\054" +
    "\146\055\137\056\147\066\157\067\141\070\140\071\155" +
    "\073\142\074\133\075\150\100\u013c\101\u0125\102\u012a\103" +
    "\u0121\104\u0139\106\u013a\107\u0127\110\u0130\111\u0120\112\u012b" +
    "\113\u0124\001\002\000\024\002\ufffc\030\032\036\025\040" +
    "\006\041\034\042\033\043\023\046\015\057\005\001\002" +
    "\000\004\002\uffff\001\002\000\024\030\032\036\025\037" +
    "\031\040\006\041\034\042\033\043\023\046\015\057\005" +
    "\001\002\000\004\057\u011a\001\002\000\030\002\uffc2\015" +
    "\uffc2\030\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\046\uffc2\057\uffc2\065\uffc2\001\002\000\026\002\uff7a\015" +
    "\uff7a\030\uff7a\036\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a" +
    "\046\uff7a\057\uff7a\001\002\000\026\002\uff7b\015\uff7b\030" +
    "\uff7b\036\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\046\uff7b" +
    "\057\uff7b\001\002\000\024\002\uff64\030\uff64\036\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\046\uff64\057\uff64\001\002" +
    "\000\004\002\u0119\001\002\000\004\016\u0106\001\002\000" +
    "\024\002\uff63\030\uff63\036\uff63\040\uff63\041\uff63\042\uff63" +
    "\043\uff63\046\uff63\057\uff63\001\002\000\004\016\u0102\001" +
    "\002\000\004\024\u0101\001\002\000\026\002\uff7d\015\uff7d" +
    "\030\uff7d\036\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\046" +
    "\uff7d\057\uff7d\001\002\000\024\030\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\046\ufffd\057\ufffd\001" +
    "\002\000\004\016\375\001\002\000\004\057\354\001\002" +
    "\000\004\016\346\001\002\000\026\013\066\016\062\025" +
    "\065\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\030\002\uff7c\015\uff7c\030\uff7c\036" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\046\uff7c\057\uff7c" +
    "\065\036\001\002\000\006\014\041\042\033\001\002\000" +
    "\030\002\uffc3\015\uffc3\030\uffc3\036\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\046\uffc3\057\uffc3\065\uffc3\001\002\000" +
    "\030\002\uffc4\015\uffc4\030\uffc4\036\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\046\uffc4\057\uffc4\065\uffc4\001\002\000" +
    "\020\030\044\036\025\040\006\041\034\042\033\043\023" +
    "\057\005\001\002\000\022\015\uff74\030\uff74\036\uff74\040" +
    "\uff74\041\uff74\042\uff74\043\uff74\057\uff74\001\002\000\022" +
    "\015\343\030\044\036\025\040\006\041\034\042\033\043" +
    "\023\057\005\001\002\000\004\057\046\001\002\000\010" +
    "\010\052\024\050\032\047\001\002\000\010\010\uffec\024" +
    "\uffec\032\uffec\001\002\000\004\057\341\001\002\000\026" +
    "\002\ufff2\015\ufff2\030\ufff2\036\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\046\ufff2\057\ufff2\001\002\000\026\002\ufffb" +
    "\015\ufffb\030\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\046\ufffb\057\ufffb\001\002\000\040\013\066\014\100" +
    "\016\062\021\073\025\065\051\072\057\056\060\070\061" +
    "\067\062\055\063\060\064\064\072\103\076\054\114\075" +
    "\001\002\000\004\024\340\001\002\000\004\016\331\001" +
    "\002\000\044\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\017\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\032\uffcd\033\uffcd\001\002" +
    "\000\106\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\016\135\020\151\021\143\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\034\uffb8\035\uffb8\047" +
    "\156\050\153\052\145\053\144\054\146\055\137\056\147" +
    "\066\157\067\141\070\140\071\155\073\142\074\133\075" +
    "\150\077\270\105\267\001\002\000\004\024\266\001\002" +
    "\000\044\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\017\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\001\002\000" +
    "\004\024\uff9e\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\050\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\017\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\032\uffd3\033\uffd3" +
    "\034\262\035\263\001\002\000\044\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\017\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\032" +
    "\uffc9\033\uffc9\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\024\013\066\016\062\057\114\060\070" +
    "\061\067\062\055\063\060\064\064\114\075\001\002\000" +
    "\044\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\032\uffcb\033\uffcb\001\002\000\044" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\017\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\032\uffcc\033\uffcc\001\002\000\004\024" +
    "\257\001\002\000\004\016\254\001\002\000\026\013\066" +
    "\016\062\022\246\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\044\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\017" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\032\uffd5\033\uffd5\001\002\000\044\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\017\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\032" +
    "\uffd2\033\uffd2\001\002\000\004\024\243\001\002\000\004" +
    "\024\uff9f\001\002\000\004\057\232\001\002\000\016\017" +
    "\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\032\uffe6\001\002" +
    "\000\040\004\117\005\217\006\116\007\123\010\220\011" +
    "\122\012\216\013\121\017\uffe1\023\uffe1\024\uffe1\025\213" +
    "\026\uffe1\027\uffe1\032\uffe1\001\002\000\004\016\210\001" +
    "\002\000\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\017\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\032\uffd1\033\uffd1\001\002" +
    "\000\016\017\uffeb\023\113\024\uffeb\026\112\027\111\032" +
    "\uffeb\001\002\000\004\024\110\001\002\000\044\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\017\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\032\uffd4\033\uffd4\001\002\000\026\002\ufff5\015" +
    "\ufff5\030\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\046\ufff5\057\ufff5\001\002\000\026\013\066\016\062\025" +
    "\065\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\024\013\066\016\062\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\112" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\016\135\017\uffb8\020\151\021\143\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\047\156\050\153\052\145\053\144" +
    "\054\146\055\137\056\147\066\157\067\141\070\140\071" +
    "\155\073\142\074\133\075\150\001\002\000\016\004\117" +
    "\006\116\007\123\011\122\013\121\033\120\001\002\000" +
    "\024\013\066\016\062\057\114\060\070\061\067\062\055" +
    "\063\060\064\064\114\075\001\002\000\024\013\066\016" +
    "\062\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\024\013\066\016\062\057\114\060" +
    "\070\061\067\062\055\063\060\064\064\114\075\001\002" +
    "\000\024\013\066\016\062\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\024\013\066" +
    "\016\062\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\024\013\066\016\062\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\044\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\017\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\032\uffd9\033\uffd9\001\002" +
    "\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\032\uffd8\033\uffd8\001\002\000" +
    "\044\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\032\uffdb\033\uffdb\001\002\000\030" +
    "\004\117\006\116\007\123\011\122\013\121\017\uffe7\023" +
    "\uffe7\024\uffe7\026\uffe7\027\uffe7\032\uffe7\001\002\000\044" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\017\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\032\uffdc\033\uffdc\001\002\000\044\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\017\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\032\uffda\033\uffda\001\002\000\100\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\017\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\032\uffa4\033\uffa4\047\uffa4\050\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\073\uffa4\074\uffa4\075\uffa4\001\002\000\004\016" +
    "\uff8f\001\002\000\004\016\203\001\002\000\026\013\066" +
    "\016\062\017\177\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\100\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\017" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\032\uffd0\033\uffd0\047\156\050\153\052\145\053\144\054" +
    "\146\055\137\056\147\066\157\067\141\070\140\071\155" +
    "\073\142\074\133\075\150\001\002\000\004\016\uff9c\001" +
    "\002\000\004\016\uff99\001\002\000\004\016\uff9a\001\002" +
    "\000\004\016\uff90\001\002\000\024\013\066\016\062\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\100\004\uff94\005\uff94\006\uff94\007\uff94\010" +
    "\uff94\011\uff94\012\uff94\013\uff94\017\uff94\022\uff94\023\uff94" +
    "\024\uff94\025\uff94\026\uff94\027\uff94\032\uff94\033\uff94\047" +
    "\uff94\050\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\066\uff94\067\uff94\070\uff94\071\uff94\073\uff94\074\uff94\075" +
    "\uff94\001\002\000\100\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\017\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\032\uff95\033\uff95" +
    "\047\uff95\050\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\066\uff95\067\uff95\070\uff95\071\uff95\073\uff95\074\uff95" +
    "\075\uff95\001\002\000\100\004\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\013\uff93\017\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\032\uff93\033" +
    "\uff93\047\uff93\050\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\066\uff93\067\uff93\070\uff93\071\uff93\073\uff93\074" +
    "\uff93\075\uff93\001\002\000\004\016\uff9d\001\002\000\004" +
    "\016\163\001\002\000\134\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\017\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\047\uffb7\050\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\073\uffb7\074\uffb7\075\uffb7\100\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\106\uffb7\107\uffb7\110\uffb7\111" +
    "\uffb7\112\uffb7\113\uffb7\001\002\000\100\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\017" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\032\uffa2\033\uffa2\047\uffa2\050\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\001\002\000\100\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96" +
    "\017\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\032\uff96\033\uff96\047\uff96\050\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\056\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\073\uff96\074\uff96\075\uff96\001\002\000\004\016\160" +
    "\001\002\000\004\016\uff98\001\002\000\100\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\017\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\032\uff97\033\uff97\047\uff97\050\uff97\052\uff97\053\uff97" +
    "\054\uff97\055\uff97\056\uff97\066\uff97\067\uff97\070\uff97\071" +
    "\uff97\073\uff97\074\uff97\075\uff97\001\002\000\004\016\uff9b" +
    "\001\002\000\004\057\161\001\002\000\004\017\162\001" +
    "\002\000\100\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\017\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\032\uffa3\033\uffa3\047\uffa3" +
    "\050\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\066" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\001\002\000\024\013\066\016\062\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\016" +
    "\004\117\006\116\007\123\011\122\013\121\032\165\001" +
    "\002\000\024\013\066\016\062\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\016\004" +
    "\117\006\116\007\123\011\122\013\121\017\167\001\002" +
    "\000\100\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\017\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\032\uffa0\033\uffa0\047\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\066\uffa0" +
    "\067\uffa0\070\uffa0\071\uffa0\073\uffa0\074\uffa0\075\uffa0\001" +
    "\002\000\016\004\117\006\116\007\123\011\122\013\121" +
    "\022\171\001\002\000\136\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\017\uffb9\020\172" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\047\uffb9\050\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\073\uffb9\074\uffb9\075\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\106\uffb9\107\uffb9\110" +
    "\uffb9\111\uffb9\112\uffb9\113\uffb9\001\002\000\134\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\017\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\047" +
    "\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\073\uffb6\074\uffb6\075" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\106\uffb6" +
    "\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\001\002\000" +
    "\100\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\017\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\032\uffa5\033\uffa5\047\uffa5\050\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\066\uffa5\067" +
    "\uffa5\070\uffa5\071\uffa5\073\uffa5\074\uffa5\075\uffa5\001\002" +
    "\000\044\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\017\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\032\uffaa\033\uffaa\001\002\000" +
    "\006\017\201\032\200\001\002\000\020\004\117\006\116" +
    "\007\123\011\122\013\121\017\uffa6\032\uffa6\001\002\000" +
    "\044\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\017\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\032\uffa9\033\uffa9\001\002\000\024" +
    "\013\066\016\062\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\044\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\017" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8" +
    "\032\uffa8\033\uffa8\001\002\000\020\004\117\006\116\007" +
    "\123\011\122\013\121\017\uffa7\032\uffa7\001\002\000\024" +
    "\013\066\016\062\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\016\004\117\006\116" +
    "\007\123\011\122\013\121\017\205\001\002\000\100\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\017\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\032\uffa1\033\uffa1\047\uffa1\050\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\056\uffa1\066\uffa1\067\uffa1\070" +
    "\uffa1\071\uffa1\073\uffa1\074\uffa1\075\uffa1\001\002\000\016" +
    "\017\uffea\023\113\024\uffea\026\uffea\027\uffea\032\uffea\001" +
    "\002\000\016\017\uffe9\023\113\024\uffe9\026\uffe9\027\uffe9" +
    "\032\uffe9\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\017\212\001\002\000\004\024\uff92\001" +
    "\002\000\004\010\227\001\002\000\024\013\066\016\062" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\024\013\066\016\062\057\114\060\070" +
    "\061\067\062\055\063\060\064\064\114\075\001\002\000" +
    "\026\010\224\013\uffe0\016\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\114\uffe0\001\002\000\026\010" +
    "\223\013\uffde\016\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\114\uffde\001\002\000\004\010\221\001" +
    "\002\000\024\013\066\016\062\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\030\004" +
    "\117\006\116\007\123\011\122\013\121\017\uffe5\023\uffe5" +
    "\024\uffe5\026\uffe5\027\uffe5\032\uffe5\001\002\000\024\013" +
    "\uffdd\016\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd" +
    "\064\uffdd\114\uffdd\001\002\000\024\013\uffdf\016\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\114\uffdf" +
    "\001\002\000\030\004\117\006\116\007\123\011\122\013" +
    "\121\017\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2\032\uffe2" +
    "\001\002\000\030\004\117\006\116\007\123\011\122\013" +
    "\121\017\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\032\uffe3" +
    "\001\002\000\024\013\066\016\062\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\030" +
    "\004\117\006\116\007\123\011\122\013\121\017\uffe4\023" +
    "\uffe4\024\uffe4\026\uffe4\027\uffe4\032\uffe4\001\002\000\006" +
    "\015\236\032\235\001\002\000\004\033\233\001\002\000" +
    "\004\060\234\001\002\000\006\015\uffee\032\uffee\001\002" +
    "\000\004\057\240\001\002\000\004\024\237\001\002\000" +
    "\026\002\ufff7\015\ufff7\030\ufff7\036\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\046\ufff7\057\ufff7\001\002\000\004\033" +
    "\241\001\002\000\004\060\242\001\002\000\006\015\uffef" +
    "\032\uffef\001\002\000\026\002\ufff4\015\ufff4\030\ufff4\036" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\046\ufff4\057\ufff4" +
    "\001\002\000\006\022\251\032\250\001\002\000\020\004" +
    "\117\006\116\007\123\011\122\013\121\022\ufff0\032\ufff0" +
    "\001\002\000\004\024\247\001\002\000\026\002\ufff9\015" +
    "\ufff9\030\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\046\ufff9\057\ufff9\001\002\000\024\013\066\016\062\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\024\252\001\002\000\026\002\ufff8\015" +
    "\ufff8\030\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\046\ufff8\057\ufff8\001\002\000\020\004\117\006\116\007" +
    "\123\011\122\013\121\022\ufff1\032\ufff1\001\002\000\026" +
    "\013\066\016\062\025\065\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\004\017\256" +
    "\001\002\000\004\024\uff91\001\002\000\026\002\ufffa\015" +
    "\ufffa\030\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\046\ufffa\057\ufffa\001\002\000\044\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\017\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\032" +
    "\uffd6\033\uffd6\001\002\000\016\017\uffe8\023\113\024\uffe8" +
    "\026\uffe8\027\uffe8\032\uffe8\001\002\000\044\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\017\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\032\uffcf\033\uffcf\001\002\000\044\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\017" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\032\uffce\033\uffce\001\002\000\012\017\265\023\113\026" +
    "\112\027\111\001\002\000\044\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\017\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\032\uffd7" +
    "\033\uffd7\001\002\000\026\002\ufff3\015\ufff3\030\ufff3\036" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\046\ufff3\057\ufff3" +
    "\001\002\000\004\016\306\001\002\000\004\016\271\001" +
    "\002\000\026\013\066\016\062\025\065\057\114\060\070" +
    "\061\067\062\055\063\060\064\064\114\075\001\002\000" +
    "\004\032\273\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\004\032\275\001\002\000\026\013\066" +
    "\016\062\025\065\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\004\032\277\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\301\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\303\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\017\305\001\002\000" +
    "\004\024\uff8d\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\004\032\310\001\002\000\026\013\066" +
    "\016\062\025\065\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\004\032\312\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\314\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\316\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\320\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\032" +
    "\322\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\032\324\001\002\000\026\013\066\016\062" +
    "\025\065\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\004\032\326\001\002\000\026" +
    "\013\066\016\062\025\065\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\004\017\330" +
    "\001\002\000\004\024\uff8c\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\333\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\032" +
    "\335\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\017\337\001\002\000\004\024\uff8e\001\002" +
    "\000\026\002\ufff6\015\ufff6\030\ufff6\036\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\046\ufff6\057\ufff6\001\002\000\010" +
    "\010\uffed\024\uffed\032\uffed\001\002\000\022\015\uff75\030" +
    "\uff75\036\uff75\040\uff75\041\uff75\042\uff75\043\uff75\057\uff75" +
    "\001\002\000\030\002\uffc5\015\uffc5\030\uffc5\036\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\046\uffc5\057\uffc5\065\uffc5" +
    "\001\002\000\004\024\345\001\002\000\026\002\uff78\015" +
    "\uff78\030\uff78\036\uff78\040\uff78\041\uff78\042\uff78\043\uff78" +
    "\046\uff78\057\uff78\001\002\000\026\013\066\016\062\025" +
    "\065\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\012\017\350\023\113\026\112\027" +
    "\111\001\002\000\004\014\351\001\002\000\020\030\044" +
    "\036\025\040\006\041\034\042\033\043\023\057\005\001" +
    "\002\000\022\015\353\030\044\036\025\040\006\041\034" +
    "\042\033\043\023\057\005\001\002\000\030\002\uffc6\015" +
    "\uffc6\030\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\046\uffc6\057\uffc6\065\uffc6\001\002\000\012\010\uffec\016" +
    "\355\024\uffec\032\uffec\001\002\000\006\017\357\030\356" +
    "\001\002\000\004\057\374\001\002\000\004\014\371\001" +
    "\002\000\024\002\uffaf\030\uffaf\036\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\046\uffaf\057\uffaf\001\002\000\006\017" +
    "\363\032\362\001\002\000\004\030\367\001\002\000\004" +
    "\014\364\001\002\000\020\030\044\036\025\040\006\041" +
    "\034\042\033\043\023\057\005\001\002\000\022\015\366" +
    "\030\044\036\025\040\006\041\034\042\033\043\023\057" +
    "\005\001\002\000\024\002\uffae\030\uffae\036\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\046\uffae\057\uffae\001\002\000" +
    "\004\057\370\001\002\000\006\017\uffac\032\uffac\001\002" +
    "\000\020\030\044\036\025\040\006\041\034\042\033\043" +
    "\023\057\005\001\002\000\022\015\373\030\044\036\025" +
    "\040\006\041\034\042\033\043\023\057\005\001\002\000" +
    "\024\002\uffad\030\uffad\036\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\046\uffad\057\uffad\001\002\000\006\017\uffab\032" +
    "\uffab\001\002\000\024\013\066\016\062\057\114\060\070" +
    "\061\067\062\055\063\060\064\064\114\075\001\002\000" +
    "\016\004\117\006\116\007\123\011\122\013\121\017\377" +
    "\001\002\000\004\024\u0100\001\002\000\024\030\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\046\uffc7" +
    "\057\uffc7\001\002\000\026\002\uff77\015\uff77\030\uff77\036" +
    "\uff77\040\uff77\041\uff77\042\uff77\043\uff77\046\uff77\057\uff77" +
    "\001\002\000\026\013\066\016\062\025\065\057\114\060" +
    "\070\061\067\062\055\063\060\064\064\114\075\001\002" +
    "\000\004\017\u0104\001\002\000\004\024\u0105\001\002\000" +
    "\026\002\uffc8\015\uffc8\030\uffc8\036\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\046\uffc8\057\uffc8\001\002\000\024\013" +
    "\066\016\062\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\016\004\117\006\116\007" +
    "\123\011\122\013\121\017\u0108\001\002\000\004\014\u0109" +
    "\001\002\000\006\044\u010c\045\u010b\001\002\000\010\015" +
    "\uffb3\044\uffb3\045\uffb3\001\002\000\004\033\u0115\001\002" +
    "\000\024\013\066\016\062\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\010\015\u010f" +
    "\044\u010c\045\u010b\001\002\000\010\015\uffb4\044\uffb4\045" +
    "\uffb4\001\002\000\026\002\uffb5\015\uffb5\030\uffb5\036\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\046\uffb5\057\uffb5\001" +
    "\002\000\016\004\117\006\116\007\123\011\122\013\121" +
    "\033\u0111\001\002\000\004\014\u0112\001\002\000\020\030" +
    "\044\036\025\040\006\041\034\042\033\043\023\057\005" +
    "\001\002\000\022\015\u0114\030\044\036\025\040\006\041" +
    "\034\042\033\043\023\057\005\001\002\000\010\015\uffb2" +
    "\044\uffb2\045\uffb2\001\002\000\004\014\u0116\001\002\000" +
    "\020\030\044\036\025\040\006\041\034\042\033\043\023" +
    "\057\005\001\002\000\022\015\u0118\030\044\036\025\040" +
    "\006\041\034\042\033\043\023\057\005\001\002\000\010" +
    "\015\uffb1\044\uffb1\045\uffb1\001\002\000\004\002\001\001" +
    "\002\000\004\016\u011b\001\002\000\006\017\357\030\356" +
    "\001\002\000\024\002\uffb0\030\uffb0\036\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\046\uffb0\057\uffb0\001\002\000\004" +
    "\002\000\001\002\000\024\030\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\046\ufffe\057\ufffe\001\002" +
    "\000\024\002\uff65\030\uff65\036\uff65\040\uff65\041\uff65\042" +
    "\uff65\043\uff65\046\uff65\057\uff65\001\002\000\004\016\u01e3" +
    "\001\002\000\004\016\u01d4\001\002\000\004\024\uff71\001" +
    "\002\000\004\024\uff69\001\002\000\004\016\u01d0\001\002" +
    "\000\004\016\u01b9\001\002\000\040\024\uff67\047\156\050" +
    "\153\052\145\053\144\054\146\055\137\056\147\066\157" +
    "\067\141\070\140\071\155\073\142\074\133\075\150\001" +
    "\002\000\004\016\u01ac\001\002\000\004\024\uff6f\001\002" +
    "\000\004\024\uff70\001\002\000\004\016\u0195\001\002\000" +
    "\004\016\u0190\001\002\000\004\024\uff72\001\002\000\006" +
    "\004\u018b\010\u018c\001\002\000\004\010\u0188\001\002\000" +
    "\004\024\uff6b\001\002\000\004\016\u017b\001\002\000\004" +
    "\024\uff68\001\002\000\004\051\u0178\001\002\000\004\024" +
    "\u0177\001\002\000\004\024\uff6e\001\002\000\004\024\uff6c" +
    "\001\002\000\004\024\uff6d\001\002\000\006\010\u0173\013" +
    "\u0172\001\002\000\004\024\uff66\001\002\000\004\016\u0163" +
    "\001\002\000\004\016\u0156\001\002\000\004\010\u0153\001" +
    "\002\000\004\016\u0142\001\002\000\032\013\066\016\062" +
    "\025\065\051\072\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\072\103\114\075\001\002\000\004\024\u0141" +
    "\001\002\000\004\024\u0140\001\002\000\026\002\uffc1\015" +
    "\uffc1\030\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\046\uffc1\057\uffc1\001\002\000\026\002\uffba\015\uffba\030" +
    "\uffba\036\uffba\040\uffba\041\uffba\042\uffba\043\uffba\046\uffba" +
    "\057\uffba\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\u0144\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\u0146\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\032" +
    "\u0148\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\032\u014a\001\002\000\026\013\066\016\062" +
    "\025\065\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\004\032\u014c\001\002\000\026" +
    "\013\066\016\062\025\065\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\004\032\u014e" +
    "\001\002\000\026\013\066\016\062\025\065\057\114\060" +
    "\070\061\067\062\055\063\060\064\064\114\075\001\002" +
    "\000\004\032\u0150\001\002\000\026\013\066\016\062\025" +
    "\065\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\004\017\u0152\001\002\000\004\024" +
    "\uff8b\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\024\u0155\001\002\000\026\002\uffbf\015\uffbf" +
    "\030\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046" +
    "\uffbf\057\uffbf\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\004\032\u0158\001\002\000\026\013\066" +
    "\016\062\025\065\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\004\032\u015a\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\u015c\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\u015e\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\u0160\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\017" +
    "\u0162\001\002\000\004\024\uff86\001\002\000\026\013\066" +
    "\016\062\025\065\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\004\032\u0165\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\u0167\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\u0169\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\u016b\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\032" +
    "\u016d\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\032\u016f\001\002\000\026\013\066\016\062" +
    "\025\065\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\004\017\u0171\001\002\000\004" +
    "\024\uff87\001\002\000\004\024\u0176\001\002\000\026\013" +
    "\066\016\062\025\065\057\114\060\070\061\067\062\055" +
    "\063\060\064\064\114\075\001\002\000\004\024\u0175\001" +
    "\002\000\026\002\uffbd\015\uffbd\030\uffbd\036\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\046\uffbd\057\uffbd\001\002\000" +
    "\026\002\uffbb\015\uffbb\030\uffbb\036\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\046\uffbb\057\uffbb\001\002\000\026\002" +
    "\uff73\015\uff73\030\uff73\036\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\046\uff73\057\uff73\001\002\000\004\016\u0179\001" +
    "\002\000\004\017\u017a\001\002\000\004\024\uff6a\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\u017d\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\u017f\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\u0181\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\032" +
    "\u0183\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\032\u0185\001\002\000\026\013\066\016\062" +
    "\025\065\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\004\017\u0187\001\002\000\004" +
    "\024\uff85\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\024\u018a\001\002\000\026\002\uffc0\015" +
    "\uffc0\030\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\046\uffc0\057\uffc0\001\002\000\004\024\u018f\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\024" +
    "\u018e\001\002\000\026\002\uffbe\015\uffbe\030\uffbe\036\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\046\uffbe\057\uffbe\001" +
    "\002\000\026\002\uffbc\015\uffbc\030\uffbc\036\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\046\uffbc\057\uffbc\001\002\000" +
    "\006\017\u0192\057\u0193\001\002\000\004\017\u0194\001\002" +
    "\000\004\024\uff82\001\002\000\004\016\135\001\002\000" +
    "\004\024\uff83\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\004\032\u0197\001\002\000\026\013\066" +
    "\016\062\025\065\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\004\032\u0199\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\u019b\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\u019d\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\u019f\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\032" +
    "\u01a1\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\032\u01a3\001\002\000\026\013\066\016\062" +
    "\025\065\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\004\032\u01a5\001\002\000\026" +
    "\013\066\016\062\025\065\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\004\032\u01a7" +
    "\001\002\000\026\013\066\016\062\025\065\057\114\060" +
    "\070\061\067\062\055\063\060\064\064\114\075\001\002" +
    "\000\004\032\u01a9\001\002\000\026\013\066\016\062\025" +
    "\065\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\004\017\u01ab\001\002\000\004\024" +
    "\uff89\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\032\u01ae\001\002\000\026\013\066\016\062" +
    "\025\065\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\004\032\u01b0\001\002\000\026" +
    "\013\066\016\062\025\065\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\004\032\u01b2" +
    "\001\002\000\026\013\066\016\062\025\065\057\114\060" +
    "\070\061\067\062\055\063\060\064\064\114\075\001\002" +
    "\000\004\032\u01b4\001\002\000\026\013\066\016\062\025" +
    "\065\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\004\032\u01b6\001\002\000\026\013" +
    "\066\016\062\025\065\057\114\060\070\061\067\062\055" +
    "\063\060\064\064\114\075\001\002\000\004\017\u01b8\001" +
    "\002\000\004\024\uff84\001\002\000\026\013\066\016\062" +
    "\025\065\057\114\060\070\061\067\062\055\063\060\064" +
    "\064\114\075\001\002\000\004\032\u01bb\001\002\000\026" +
    "\013\066\016\062\025\065\057\114\060\070\061\067\062" +
    "\055\063\060\064\064\114\075\001\002\000\004\032\u01bd" +
    "\001\002\000\026\013\066\016\062\025\065\057\114\060" +
    "\070\061\067\062\055\063\060\064\064\114\075\001\002" +
    "\000\004\032\u01bf\001\002\000\026\013\066\016\062\025" +
    "\065\057\114\060\070\061\067\062\055\063\060\064\064" +
    "\114\075\001\002\000\004\032\u01c1\001\002\000\026\013" +
    "\066\016\062\025\065\057\114\060\070\061\067\062\055" +
    "\063\060\064\064\114\075\001\002\000\004\032\u01c3\001" +
    "\002\000\026\013\066\016\062\025\065\057\114\060\070" +
    "\061\067\062\055\063\060\064\064\114\075\001\002\000" +
    "\004\032\u01c5\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\004\032\u01c7\001\002\000\026\013\066" +
    "\016\062\025\065\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\004\032\u01c9\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\u01cb\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\u01cd\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\017\u01cf\001\002\000" +
    "\004\024\uff8a\001\002\000\006\017\u01d2\057\u0193\001\002" +
    "\000\004\017\u01d3\001\002\000\004\024\uff80\001\002\000" +
    "\004\024\uff81\001\002\000\026\013\066\016\062\025\065" +
    "\057\114\060\070\061\067\062\055\063\060\064\064\114" +
    "\075\001\002\000\004\032\u01d6\001\002\000\026\013\066" +
    "\016\062\025\065\057\114\060\070\061\067\062\055\063" +
    "\060\064\064\114\075\001\002\000\004\032\u01d8\001\002" +
    "\000\026\013\066\016\062\025\065\057\114\060\070\061" +
    "\067\062\055\063\060\064\064\114\075\001\002\000\004" +
    "\032\u01da\001\002\000\026\013\066\016\062\025\065\057" +
    "\114\060\070\061\067\062\055\063\060\064\064\114\075" +
    "\001\002\000\004\032\u01dc\001\002\000\026\013\066\016" +
    "\062\025\065\057\114\060\070\061\067\062\055\063\060" +
    "\064\064\114\075\001\002\000\004\032\u01de\001\002\000" +
    "\026\013\066\016\062\025\065\057\114\060\070\061\067" +
    "\062\055\063\060\064\064\114\075\001\002\000\004\032" +
    "\u01e0\001\002\000\026\013\066\016\062\025\065\057\114" +
    "\060\070\061\067\062\055\063\060\064\064\114\075\001" +
    "\002\000\004\017\u01e2\001\002\000\004\024\uff88\001\002" +
    "\000\004\057\u0193\001\002\000\004\017\u01e5\001\002\000" +
    "\004\024\uff7f\001\002\000\026\002\uff76\015\uff76\030\uff76" +
    "\036\uff76\040\uff76\041\uff76\042\uff76\043\uff76\046\uff76\057" +
    "\uff76\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e4\000\044\003\007\005\023\011\013\012\012\037" +
    "\025\042\003\046\017\047\010\050\016\052\020\053\034" +
    "\055\015\056\027\057\026\061\021\077\006\100\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\u0132\006" +
    "\u0137\007\u0122\013\u012e\014\u0134\015\u0135\016\u0133\017\u0128" +
    "\020\u0127\021\u0121\022\u012b\026\u0130\027\133\032\151\033" +
    "\153\034\131\062\u0125\001\001\000\032\003\007\005\023" +
    "\037\025\042\003\046\017\047\010\050\016\052\u011e\053" +
    "\034\055\015\057\026\077\006\001\001\000\002\001\001" +
    "\000\040\003\007\005\023\012\u011c\037\025\042\003\046" +
    "\017\047\010\050\016\052\020\053\034\055\015\056\u011d" +
    "\057\026\077\006\100\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\044\001" +
    "\001\000\002\001\001\000\022\037\103\047\062\063\101" +
    "\066\100\067\104\070\343\071\073\073\106\001\001\000" +
    "\004\054\036\001\001\000\004\055\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\007\004\042\005" +
    "\041\037\025\046\017\047\010\050\016\053\034\055\015" +
    "\057\026\077\006\001\001\000\002\001\001\000\026\003" +
    "\007\005\341\037\025\046\017\047\010\050\016\053\034" +
    "\055\015\057\026\077\006\001\001\000\004\072\044\001" +
    "\001\000\004\076\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\023" +
    "\075\024\105\025\052\030\060\031\076\035\056\037\103" +
    "\047\062\063\101\066\100\067\104\070\070\071\073\073" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\133\032\151\033\153\034\131\062" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\037\103\047\062\063\101\066\100\067" +
    "\263\071\073\073\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\037\103\047\062\063\101\066\100\067" +
    "\260\071\073\073\106\001\001\000\014\037\103\047\062" +
    "\063\257\071\073\073\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\103\047\062\063\244\071\073\073\106\075\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\230\001\001\000\002\001" +
    "\001\000\006\064\214\065\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\037\103\047\062" +
    "\063\101\066\100\067\206\071\073\073\106\001\001\000" +
    "\020\037\103\047\062\063\101\066\100\067\205\071\073" +
    "\073\106\001\001\000\014\037\103\047\062\063\114\071" +
    "\073\073\106\001\001\000\014\027\133\032\151\033\153" +
    "\034\131\062\135\001\001\000\002\001\001\000\014\037" +
    "\103\047\062\063\130\071\073\073\106\001\001\000\014" +
    "\037\103\047\062\063\127\071\073\073\106\001\001\000" +
    "\014\037\103\047\062\063\126\071\073\073\106\001\001" +
    "\000\014\037\103\047\062\063\125\071\073\073\106\001" +
    "\001\000\014\037\103\047\062\063\124\071\073\073\106" +
    "\001\001\000\014\037\103\047\062\063\123\071\073\073" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\036\174\037\103\040\173\047\062\063\175\071" +
    "\073\073\106\001\001\000\012\027\133\032\151\033\153" +
    "\034\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\037\103\047\062" +
    "\063\167\071\073\073\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\103\047\062\063\163\071\073" +
    "\073\106\001\001\000\002\001\001\000\014\037\103\047" +
    "\062\063\165\071\073\073\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\037" +
    "\103\047\062\063\201\071\073\073\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\037\103\047\062\063" +
    "\203\071\073\073\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\037" +
    "\103\047\062\063\101\066\100\067\104\070\210\071\073" +
    "\073\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\103\047\062\063\225\071\073" +
    "\073\106\001\001\000\014\037\103\047\062\063\224\071" +
    "\073\073\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\037\103\047\062\063\221\071" +
    "\073\073\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\037\103\047\062\063\227\071\073\073\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\037\103\047\062\063\252\071\073\073\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\037\103\047\062\063\101\066\100\067\104\070\254" +
    "\071\073\073\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\037\103\047\062\063\101\066\100\067" +
    "\104\070\271\071\073\073\106\001\001\000\002\001\001" +
    "\000\022\037\103\047\062\063\101\066\100\067\104\070" +
    "\273\071\073\073\106\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\275\071" +
    "\073\073\106\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\277\071\073\073" +
    "\106\001\001\000\002\001\001\000\022\037\103\047\062" +
    "\063\101\066\100\067\104\070\301\071\073\073\106\001" +
    "\001\000\002\001\001\000\022\037\103\047\062\063\101" +
    "\066\100\067\104\070\303\071\073\073\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\037\103\047\062" +
    "\063\101\066\100\067\104\070\306\071\073\073\106\001" +
    "\001\000\002\001\001\000\022\037\103\047\062\063\101" +
    "\066\100\067\104\070\310\071\073\073\106\001\001\000" +
    "\002\001\001\000\022\037\103\047\062\063\101\066\100" +
    "\067\104\070\312\071\073\073\106\001\001\000\002\001" +
    "\001\000\022\037\103\047\062\063\101\066\100\067\104" +
    "\070\314\071\073\073\106\001\001\000\002\001\001\000" +
    "\022\037\103\047\062\063\101\066\100\067\104\070\316" +
    "\071\073\073\106\001\001\000\002\001\001\000\022\037" +
    "\103\047\062\063\101\066\100\067\104\070\320\071\073" +
    "\073\106\001\001\000\002\001\001\000\022\037\103\047" +
    "\062\063\101\066\100\067\104\070\322\071\073\073\106" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\324\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\326\071\073\073\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\331\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\333\071\073\073\106\001\001\000\002" +
    "\001\001\000\022\037\103\047\062\063\101\066\100\067" +
    "\104\070\335\071\073\073\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\037\103\047\062\063\101\066\100\067" +
    "\346\071\073\073\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\007\004\351\005\041\037\025\046" +
    "\017\047\010\050\016\053\034\055\015\057\026\077\006" +
    "\001\001\000\026\003\007\005\341\037\025\046\017\047" +
    "\010\050\016\053\034\055\015\057\026\077\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\360\041" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\007\004\364\005\041\037\025\046\017" +
    "\047\010\050\016\053\034\055\015\057\026\077\006\001" +
    "\001\000\026\003\007\005\341\037\025\046\017\047\010" +
    "\050\016\053\034\055\015\057\026\077\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\007\004\371\005\041\037\025\046\017\047\010\050" +
    "\016\053\034\055\015\057\026\077\006\001\001\000\026" +
    "\003\007\005\341\037\025\046\017\047\010\050\016\053" +
    "\034\055\015\057\026\077\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\037\103\047\062\063\375\071" +
    "\073\073\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\037\103\047" +
    "\062\063\101\066\100\067\104\070\u0102\071\073\073\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\103\047\062\063\u0106\071\073\073\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u0109\045\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\037\103\047\062\063\u010f\071\073\073\106\001" +
    "\001\000\004\044\u010d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\007\004\u0112\005\041\037\025\046\017\047\010\050\016" +
    "\053\034\055\015\057\026\077\006\001\001\000\026\003" +
    "\007\005\341\037\025\046\017\047\010\050\016\053\034" +
    "\055\015\057\026\077\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\007\004\u0116\005\041\037\025" +
    "\046\017\047\010\050\016\053\034\055\015\057\026\077" +
    "\006\001\001\000\026\003\007\005\341\037\025\046\017" +
    "\047\010\050\016\053\034\055\015\057\026\077\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\360\041\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\133" +
    "\032\151\033\153\034\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\030\060\031\076\035\u013d" +
    "\037\103\047\062\063\101\066\100\067\104\070\u013e\071" +
    "\073\073\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\037\103\047" +
    "\062\063\101\066\100\067\104\070\u0142\071\073\073\106" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\u0144\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u0146\071\073\073\106\001\001\000\002" +
    "\001\001\000\022\037\103\047\062\063\101\066\100\067" +
    "\104\070\u0148\071\073\073\106\001\001\000\002\001\001" +
    "\000\022\037\103\047\062\063\101\066\100\067\104\070" +
    "\u014a\071\073\073\106\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\u014c\071" +
    "\073\073\106\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\u014e\071\073\073" +
    "\106\001\001\000\002\001\001\000\022\037\103\047\062" +
    "\063\101\066\100\067\104\070\u0150\071\073\073\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\u0153\071\073\073" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\u0156\071" +
    "\073\073\106\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\u0158\071\073\073" +
    "\106\001\001\000\002\001\001\000\022\037\103\047\062" +
    "\063\101\066\100\067\104\070\u015a\071\073\073\106\001" +
    "\001\000\002\001\001\000\022\037\103\047\062\063\101" +
    "\066\100\067\104\070\u015c\071\073\073\106\001\001\000" +
    "\002\001\001\000\022\037\103\047\062\063\101\066\100" +
    "\067\104\070\u015e\071\073\073\106\001\001\000\002\001" +
    "\001\000\022\037\103\047\062\063\101\066\100\067\104" +
    "\070\u0160\071\073\073\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\037\103\047\062\063\101\066\100" +
    "\067\104\070\u0163\071\073\073\106\001\001\000\002\001" +
    "\001\000\022\037\103\047\062\063\101\066\100\067\104" +
    "\070\u0165\071\073\073\106\001\001\000\002\001\001\000" +
    "\022\037\103\047\062\063\101\066\100\067\104\070\u0167" +
    "\071\073\073\106\001\001\000\002\001\001\000\022\037" +
    "\103\047\062\063\101\066\100\067\104\070\u0169\071\073" +
    "\073\106\001\001\000\002\001\001\000\022\037\103\047" +
    "\062\063\101\066\100\067\104\070\u016b\071\073\073\106" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\u016d\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u016f\071\073\073\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\037" +
    "\103\047\062\063\101\066\100\067\104\070\u0173\071\073" +
    "\073\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\u017b\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u017d\071\073\073\106\001\001\000\002" +
    "\001\001\000\022\037\103\047\062\063\101\066\100\067" +
    "\104\070\u017f\071\073\073\106\001\001\000\002\001\001" +
    "\000\022\037\103\047\062\063\101\066\100\067\104\070" +
    "\u0181\071\073\073\106\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\u0183\071" +
    "\073\073\106\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\u0185\071\073\073" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\u0188\071" +
    "\073\073\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u018c\071\073\073\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u0190\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\u0195\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u0197\071\073\073\106\001\001\000\002" +
    "\001\001\000\022\037\103\047\062\063\101\066\100\067" +
    "\104\070\u0199\071\073\073\106\001\001\000\002\001\001" +
    "\000\022\037\103\047\062\063\101\066\100\067\104\070" +
    "\u019b\071\073\073\106\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\u019d\071" +
    "\073\073\106\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\u019f\071\073\073" +
    "\106\001\001\000\002\001\001\000\022\037\103\047\062" +
    "\063\101\066\100\067\104\070\u01a1\071\073\073\106\001" +
    "\001\000\002\001\001\000\022\037\103\047\062\063\101" +
    "\066\100\067\104\070\u01a3\071\073\073\106\001\001\000" +
    "\002\001\001\000\022\037\103\047\062\063\101\066\100" +
    "\067\104\070\u01a5\071\073\073\106\001\001\000\002\001" +
    "\001\000\022\037\103\047\062\063\101\066\100\067\104" +
    "\070\u01a7\071\073\073\106\001\001\000\002\001\001\000" +
    "\022\037\103\047\062\063\101\066\100\067\104\070\u01a9" +
    "\071\073\073\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\037\103\047\062\063\101\066\100\067\104" +
    "\070\u01ac\071\073\073\106\001\001\000\002\001\001\000" +
    "\022\037\103\047\062\063\101\066\100\067\104\070\u01ae" +
    "\071\073\073\106\001\001\000\002\001\001\000\022\037" +
    "\103\047\062\063\101\066\100\067\104\070\u01b0\071\073" +
    "\073\106\001\001\000\002\001\001\000\022\037\103\047" +
    "\062\063\101\066\100\067\104\070\u01b2\071\073\073\106" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\u01b4\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u01b6\071\073\073\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\u01b9\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u01bb\071\073\073\106\001\001\000\002" +
    "\001\001\000\022\037\103\047\062\063\101\066\100\067" +
    "\104\070\u01bd\071\073\073\106\001\001\000\002\001\001" +
    "\000\022\037\103\047\062\063\101\066\100\067\104\070" +
    "\u01bf\071\073\073\106\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\u01c1\071" +
    "\073\073\106\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\u01c3\071\073\073" +
    "\106\001\001\000\002\001\001\000\022\037\103\047\062" +
    "\063\101\066\100\067\104\070\u01c5\071\073\073\106\001" +
    "\001\000\002\001\001\000\022\037\103\047\062\063\101" +
    "\066\100\067\104\070\u01c7\071\073\073\106\001\001\000" +
    "\002\001\001\000\022\037\103\047\062\063\101\066\100" +
    "\067\104\070\u01c9\071\073\073\106\001\001\000\002\001" +
    "\001\000\022\037\103\047\062\063\101\066\100\067\104" +
    "\070\u01cb\071\073\073\106\001\001\000\002\001\001\000" +
    "\022\037\103\047\062\063\101\066\100\067\104\070\u01cd" +
    "\071\073\073\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u01d0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\037\103\047\062\063" +
    "\101\066\100\067\104\070\u01d4\071\073\073\106\001\001" +
    "\000\002\001\001\000\022\037\103\047\062\063\101\066" +
    "\100\067\104\070\u01d6\071\073\073\106\001\001\000\002" +
    "\001\001\000\022\037\103\047\062\063\101\066\100\067" +
    "\104\070\u01d8\071\073\073\106\001\001\000\002\001\001" +
    "\000\022\037\103\047\062\063\101\066\100\067\104\070" +
    "\u01da\071\073\073\106\001\001\000\002\001\001\000\022" +
    "\037\103\047\062\063\101\066\100\067\104\070\u01dc\071" +
    "\073\073\106\001\001\000\002\001\001\000\022\037\103" +
    "\047\062\063\101\066\100\067\104\070\u01de\071\073\073" +
    "\106\001\001\000\002\001\001\000\022\037\103\047\062" +
    "\063\101\066\100\067\104\070\u01e0\071\073\073\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u01e3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public Raiz regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public Raiz RCCSS;
	 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFs$actions {


    public String estado="";

  private final SintacticoFs parser;

  /** Constructor */
  CUP$SintacticoFs$actions(SintacticoFs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action_part00000000(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFs$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFs$parser.done_parsing();
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= inicio_p1 inicio_p2 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= inicio_p2 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Start",47, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_p1 ::= inicio_p1 Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_p1 ::= Es_Impo 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p1",7, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio_p2 ::= Cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("inicio_p2",8, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ES_VAR ::= var Lista_ID ES_VAR1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR",61, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ES_VAR1 ::= igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_VAR1 ::= igu ico fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ES_VAR1 ::= igu ico Lista_Datos fco pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ES_VAR1 ::= igu ill Lista_Objetos fll pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ES_VAR1 ::= igu Acc_venta pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ES_VAR1 ::= igu Acc_conte pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES_VAR1 ::= igu Acc_boton pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES_VAR1 ::= igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ES_VAR1 ::= pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("ES_VAR1",60, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Datos ::= Lista_Datos com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Datos ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Datos",59, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Objetos ::= Lista_Objetos com idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Objetos ::= idva dop cade 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Objetos",58, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Lista_ID ::= Lista_ID com idva 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Lista_ID ::= idva 
            {
              Object RESULT =null;
		
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_ID",56, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp_Log1 ::= Exp_Log 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log1",54, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp_Log ::= Exp_Log or Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp_Log ::= Exp_Log and Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp_Log ::= not Exp_Log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp_Log ::= Exp_Log fin Exp_Ari dop Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp_Log ::= Exp_Com 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Log",53, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp_Com ::= Exp_Ari igu igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp_Com ::= Exp_Ari not igu Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp_Com ::= Exp_Ari Ex_may Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp_Com ::= Exp_Ari Ex_men Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp_Com ::= Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		System.out.println("Entro a La ultima Expresion");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Com",52, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ex_may ::= may 
            {
              Object RESULT =null;
		RESULT=">";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ex_may ::= may igu 
            {
              Object RESULT =null;
		RESULT=">=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_may",51, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ex_men ::= men 
            {
              Object RESULT =null;
		RESULT="<";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ex_men ::= men igu 
            {
              Object RESULT =null;
		RESULT="<=";
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Ex_men",50, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp_Ari ::= Exp_Ari mas Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;
		System.out.println("reconocio datos1");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp_Ari ::= Exp_Ari nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp_Ari ::= Exp_Ari por Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp_Ari ::= Exp_Ari div Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp_Ari ::= Exp_Ari pot Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp_Ari ::= ipa Exp_Log fpa 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp_Ari ::= nos Exp_Ari 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.peek()).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp_Ari ::= Dato_Posfa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Exp_Ari",49, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Dato_Posfa ::= Dato_Pri 
            {
              Object RESULT =null;
		System.out.println("entro a este estado primario");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Dato_Posfa ::= Es_tipo_id 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de tipos ID");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Dato_Posfa ::= nulo 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de nulo");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Dato_Posfa ::= Es_lla_fun 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de llamada a funcion");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dato_Posfa ::= idva recur_nat 
            {
              Object RESULT =null;
		System.out.println("entro a este estado de id.funcionesnativas");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dato_Posfa ::= Es_tipo_id dmas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dato_Posfa ::= Es_tipo_id dnos 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)).value;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Posfa",55, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dato_Pri ::= nume 
            {
              Object RESULT =null;
		System.out.println("Redujo numero");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dato_Pri ::= cade 
            {
              Object RESULT =null;
		System.out.println("Redujo cadena");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Dato_Pri ::= deci 
            {
              Object RESULT =null;
		System.out.println("Redujo decimal");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Dato_Pri ::= verd 
            {
              Object RESULT =null;
		System.out.println("Redujo falso");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Dato_Pri ::= fals 
            {
              Object RESULT =null;
		System.out.println("Redujo verdadero");
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Dato_Pri",57, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Es_Impr ::= impr ipa Exp_Log1 fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impr",45, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Es_Impo ::= impo ipa Exp_Ari fpa pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Impo",44, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Es_Si ::= si ipa Exp_Log fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_Si",43, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Es_sino ::= sino ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sino",42, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Estru_si ::= Estru_si sino Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Estru_si ::= Estru_si Es_sino 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Estru_si ::= Es_Si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estru_si",41, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Es_asig ::= Es_tipo_id igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Es_asig ::= Es_tipo_id por igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Es_asig ::= Es_tipo_id div igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Es_asig ::= Es_tipo_id mas igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Es_asig ::= Es_tipo_id nos igu Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Es_asig ::= Es_tipo_id mas mas pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Es_asig ::= Es_tipo_id nos nos pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Es_asig ::= Es_tipo_id igu func_nat1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_asig",38, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Es_tipo_id ::= idva ico Exp_Ari fco 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Es_tipo_id ::= idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Es_tipo_id ::= idva idpu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Es_tipo_id ::= idva ico Exp_Ari fco idpu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_tipo_id",37, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Es_sele ::= sele ipa Exp_Ari fpa ill Cuerpo_sele fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_sele",36, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Cuerpo_sele ::= Cuerpo_sele tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Cuerpo_sele ::= tipo_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_sele",35, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_sele ::= caso Exp_Ari dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_sele ::= defe dop ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("tipo_sele",34, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Es_func ::= func idva ipa Es_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Es_func ::= var idva ipa Es_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_func",32, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Es_fun1 ::= Lista_parametros fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Es_fun1 ::= fpa ill Estu_Cuerpo fll 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_fun1",31, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Lista_parametros ::= Lista_parametros com var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Lista_parametros ::= var idva 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_parametros",6, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Es_lla_fun ::= idva ipa Es_lla_fun1 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun",29, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Es_lla_fun1 ::= fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Es_lla_fun1 ::= Lista_Aritmetica fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_lla_fun1",30, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Lista_Aritmetica ::= Lista_Aritmetica com Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Lista_Aritmetica ::= Exp_Ari 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Lista_Aritmetica",28, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // recur_nat ::= recur_nat func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // recur_nat ::= func_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("recur_nat",48, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // func_nat ::= Tipo_Fun ipa idva fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // func_nat ::= Tipos_Acc_Ord 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // func_nat ::= Tipo_Obte ipa Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // func_nat ::= opno ipa Exp_Ari com Exp_Ari fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat",26, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func_nat1 ::= func_leer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // func_nat1 ::= func_gxml 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_nat1",27, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipo_Fun ::= filt 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipo_Fun ::= busc 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipo_Fun ::= map 
            {
              Object RESULT =null;
		RESULT=3;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipo_Fun ::= redu 
            {
              Object RESULT =null;
		RESULT=4;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Tipo_Fun ::= todo 
            {
              Object RESULT =null;
		RESULT=5;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Tipo_Fun ::= algu 
            {
              Object RESULT =null;
		RESULT=6;
              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Fun",25, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Tipos_Acc_Ord ::= desc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Tipos_Acc_Ord ::= asce 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Tipos_Acc_Ord ::= inve 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Tipos_Acc_Ord ::= maxi 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Tipos_Acc_Ord ::= mini 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipos_Acc_Ord",24, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // func_leer ::= lgxm ipa Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_leer",23, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // func_gxml ::= cada ipa Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("func_gxml",22, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Tipo_Obte ::= opet 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Tipo_Obte ::= opid 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Tipo_Obte",21, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Acc_venta ::= cven ipa Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_venta",19, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Acc_conte ::= idva ccon ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_conte",18, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Acc_boton ::= idva cbot ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_boton",17, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-20)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Acc_texto ::= ctex ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_texto",16, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Acc_ctext ::= ccte ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_ctext",15, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Acc_Atext ::= cate ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Atext",13, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-23)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Acc_Cnume ::= ccnu ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_Cnume",14, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Acc_despl ::= cdes ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_despl",12, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Acc_image ::= cima ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_image",11, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Acc_video ::= cvid ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_video",10, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Acc_repro ::= crep ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_repro",9, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Acc_alcar ::= acar ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Acc_alcar ::= acar ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcar",5, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Acc_alcer ::= acer ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Acc_alcer ::= acer ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcer",4, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Acc_alcli ::= acli ipa Es_lla_fun fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Acc_alcli",20, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Cuerpo_general ::= ES_VAR 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Cuerpo_general ::= Es_Impr 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Cuerpo_general ::= Estru_si 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Cuerpo_general ::= Es_sele 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Cuerpo_general ::= Es_asig 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Cuerpo_general ::= Es_acc_ID 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Cuerpo_general ::= reto Exp_Log1 pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Cuerpo_general ::= Es_lla_fun pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Cuerpo_general ::= dete pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_general",3, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Estu_Cuerpo ::= Estu_Cuerpo Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Estu_Cuerpo ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Estu_Cuerpo",2, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Es_acc_ID ::= Es_tipo_id accion_ID pyc 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_acc_ID",1, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // accion_ID ::= Acc_texto 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // accion_ID ::= Acc_ctext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // accion_ID ::= Acc_Atext 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // accion_ID ::= Acc_Cnume 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // accion_ID ::= Acc_despl 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // accion_ID ::= Acc_image 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // accion_ID ::= Acc_video 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // accion_ID ::= Acc_repro 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // accion_ID ::= pun cada ipa fpa 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // accion_ID ::= Acc_alcar 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // accion_ID ::= Acc_alcli 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // accion_ID ::= recur_nat 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // accion_ID ::= Acc_alcer 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("accion_ID",0, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.elementAt(CUP$SintacticoFs$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Cuerpo_funcion ::= Es_DeAu 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Cuerpo_funcion",62, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Es_DeAu ::= Cuerpo_general 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Es_DeAu ::= Es_func 
            {
              Object RESULT =null;

              CUP$SintacticoFs$result = parser.getSymbolFactory().newSymbol("Es_DeAu",40, ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFs$stack.peek()), RESULT);
            }
          return CUP$SintacticoFs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFs$do_action(
    int                        CUP$SintacticoFs$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFs$parser,
    java.util.Stack            CUP$SintacticoFs$stack,
    int                        CUP$SintacticoFs$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFs$do_action_part00000000(
                               CUP$SintacticoFs$act_num,
                               CUP$SintacticoFs$parser,
                               CUP$SintacticoFs$stack,
                               CUP$SintacticoFs$top);
    }
}

}
