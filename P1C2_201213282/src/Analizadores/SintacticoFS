package Analizadores;
import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFs.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
parser code {:
    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public Raiz regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public Raiz RCCSS;
	 :}
action code {:
    public String estado="";
:}
terminal mas,men,por,div,igu,pot,may,nos,ill,fll,ipa,fpa,ico,fco,fin,pyc,not,or,and,var,pun,com,dop;// Terminales
terminal impr,impo,dete,reto,si,sele,caso,defe,func,desc,asce,cada,inve,maxi,mini,busc,filt,idva,cade,deci,nume,verd,fals,sino;
terminal map,redu,todo,algu,lgxm,opet,opid,opno,cven,ccon,ctex,ccte,cate,ccnu,cdes,cbot,cima,crep,cvid,acli,acar,acer,nulo;
non terminal accion_ID,Es_acc_ID,Estu_Cuerpo,Cuerpo_general,Acc_alcer,Acc_alcar,Lista_parametros,inicio_p1,inicio_p2;
non terminal Acc_repro,Acc_video,Acc_image,Acc_despl,Acc_Atext,Acc_Cnume,Acc_ctext,Acc_texto,Acc_boton,Acc_conte,Acc_venta,Acc_alcli;
non terminal Tipo_Obte,func_gxml,func_leer,Tipos_Acc_Ord,Tipo_Fun,func_nat,func_nat1,Lista_Aritmetica,Es_lla_fun,Es_lla_fun1,Es_fun1,Es_func,Es_tipo_id1;
non terminal tipo_sele,Cuerpo_sele,Es_sele,Es_tipo_id,Es_asig,Es_asig1	,Es_DeAu,Estru_si,Es_sino,Es_Si,Es_Impo,Es_Impr,Expresion,Start;
non terminal recur_nat,Exp_Ari,Ex_men,Ex_may,Exp_Com,Exp_Log,Exp_Log1,Dato_Posfa,Lista_ID,Dato_Pri,Lista_Objetos,Lista_Datos,ES_VAR1,ES_VAR,Cuerpo_funcion;
precedence left  mas,nos,por,div,pot,or,and;
precedence right fin,not;
start with Start;


/*---------------------------- Inicio ----------------------------*/
Start ::= 	inicio_p1 inicio_p2
	|		inicio_p2;

inicio_p1 ::= 	inicio_p1 Es_Impo
		|		Es_Impo;

inicio_p2 ::=	Cuerpo_funcion;

/*---------------------------- Estructura Variable ----------------------------*/
ES_VAR ::= var Lista_ID ES_VAR1;

ES_VAR1 ::= igu Exp_Log1 pyc	 						//id = expresion_Aritmetica
		|	igu ico fco pyc	 						//id = [];
		|	igu ico Lista_Datos fco pyc	 			//id =[datos,datos,datos]
		|	igu ill Lista_Objetos fll pyc			//id={dato:"",dato:"",dato:""}
		//|	igu Exp_Log fin Exp_Ari dop Exp_Ari pyc	//id = Logica? Dato : Dato ; 
		|	igu Acc_venta pyc						// id = crear ventana 
		|	igu Acc_conte pyc						// id = crear contenedor
		|	igu Acc_boton pyc						// id = crear boton
//		| 	igu idva recur_nat pyc					// id = id.funcion_nativa*/
		| 	igu func_nat1 pyc						// id = funcion_nativa
		|	pyc ;
		
Lista_Datos ::= Lista_Datos com Exp_Ari				/* Exp , Exp*/
		|		Exp_Ari ;							/* Exp*/

Lista_Objetos ::= Lista_Objetos com idva dop cade 	/* Objetos , id : "objeto"*/
			|		idva dop cade;					/* id : "objeto"*/

Dato_Pri ::= 	nume			//numero
		|	 	cade			//cadena
		|		deci 			//decimales
		|		verd			//verdadero
		|		fals;			//falso

Lista_ID ::=	Lista_ID:e1 com idva	{::} 	//id,id
			|	idva					{::};	//id
		
/*!---------------------------- Estructura Operaciones ----------------------------!*/
/*Exp_log1 ::= Exp_Log2
*/
Exp_Log1 ::= 	Exp_Log	fin Exp_Ari dop Exp_Ari /*Exp_log? Num : num*/
		|	  	Exp_Log 		
		;
Exp_Log ::=	Exp_Log:e1	or 	Exp_Log:e2 			/*LOG || LOG*/
		|	Exp_Log:e1	and	Exp_Log:e2			/*LOG && LOG*/
		|	not			Exp_Log:e1				/* ! LOG*/
/*		|	ipa 		Exp_Log:e1 fpa			/*(	Dato  )*/		
		|	Exp_Com;							/*Comparacion*/
		
Exp_Com ::=	Exp_Ari:e1 igu igu		Exp_Ari:e2		/*ARI == ARI*/	
		|	Exp_Ari:e1 not igu		Exp_Ari:e2 		/*ARI != ARI*/
		|	Exp_Ari:e1 Ex_may:e3	Exp_Ari:e2 		/*ARI >= ARI*/
		|	Exp_Ari:e1 Ex_men:e3	Exp_Ari:e2 		/*ARI <= ARI*/
		|	Dato_Posfa:e1;

Ex_may ::=	may 		{:RESULT=">";:}			/* >  */
		|	may igu		{:RESULT=">=";:};		/* >= */
		

Ex_men ::=	men 		{:RESULT="<";:}			/* <  */
		|	men igu		{:RESULT="<=";:};		/* <= */
		

Exp_Ari ::= Exp_Ari:e1 mas Exp_Ari:e2			/*DATO + DATO*/
		|	Exp_Ari:e1 nos Exp_Ari:e2			/*DATO - DATO*/
		|	Exp_Ari:e1 por Exp_Ari:e2			/*DATO * DATO*/
		|	Exp_Ari:e1 div Exp_Ari:e2			/*DATO / DATO*/
		|	Exp_Ari:e1 pot Exp_Ari:e2			/*DATO ^ DATO*/
		|	ipa 	Exp_Log:e1 	fpa				/*(	Dato  )*/
		|	nos		Exp_Ari:e1					/*-Dato*/
		|	Es_tipo_id:e1 mas mas 				/*ID ++*/
		|	Es_tipo_id:e1 nos nos  				/*ID--*/
		|	Dato_Posfa;

Dato_Posfa ::= Dato_Pri
			|	Es_tipo_id
			|	nulo
			|	Es_lla_fun
			|	idva recur_nat;

/*---------------------------- Estructura Imprimir ----------------------------*/
Es_Impr ::= impr ipa Exp_Log1 fpa pyc ;			/*Imprimir(EXPRESION);*/

/*---------------------------- Estructura Importar ----------------------------*/
Es_Impo ::= impo ipa Exp_Ari fpa pyc ;			/*Importar(Expresion);*/

/*---------------------------- Estructura Si ----------------------------*/

Es_Si ::=	si ipa Exp_Log fpa ill Estu_Cuerpo fll; 			/*si (Exp_log){CUERPO}*/

Es_sino ::= sino ill Estu_Cuerpo fll;						/*sino {CUERPO}*/

Estru_si ::= Estru_si sino Es_Si			/*Si() sino si(){}*/
			|Estru_si Es_sino				/*Si() sino {}*/
			|Es_Si;							/*Si()*/


/*---------------------------- Estructura Asignacion ----------------------------*/
Es_asig ::= Es_tipo_id igu Exp_Log1	pyc								/*ID  = Expresion_Ar*/
		//|	Es_tipo_id igu Exp_Log fin Exp_Log dop Exp_Log pyc	/*ID  = Expresion_Log? Expresion:Expresion*/
		|	Es_tipo_id por igu Exp_Log1	pyc							/*ID *= Expresion_Ar*/
		|	Es_tipo_id div igu Exp_Log1	pyc							/*ID /= Expresion_Ar*/
		|	Es_tipo_id mas igu Exp_Log1	pyc							/*ID += Expresion_Ar*/
		|	Es_tipo_id nos igu Exp_Log1	pyc							/*ID -= Expresion_Ar*/
//		|	Es_tipo_id igu idva recur_nat pyc						/*ID = ID.Funcion_nativa()	*/
		|	Es_tipo_id mas mas	pyc									/*ID++;*/ 										
		|	Es_tipo_id nos nos  pyc 								/*ID--;*/
		|	Es_tipo_id igu func_nat1 pyc;							/*ID = Funcion_nativa()	*/ 
		
Es_tipo_id ::= 	Es_tipo_id1 							/*ID*/
		|		Es_tipo_id1 pun idva 					/*ID.id*/
		;
		
Es_tipo_id1 ::= idva ico Exp_Ari fco 					/*ID[num]*/
		|		idva ;
			
/*---------------------------- Estructura Selecciona ----------------------------*/		
Es_sele ::= sele ipa Exp_Ari fpa ill Cuerpo_sele fll;	/*seleciona (Exp_Ari){ casos}*/

Cuerpo_sele ::= Cuerpo_sele tipo_sele
		|		tipo_sele;

tipo_sele ::= 	caso Exp_Ari dop ill Estu_Cuerpo fll		/*caso Exp_Ari : */
			|	defe 		 dop ill Estu_Cuerpo fll;		/*defecto : */
			
/*---------------------------- Estructura funcion ----------------------------*/			
Es_func ::= func idva ipa  Es_fun1									/*funcion id (*/
		|	var  idva ipa  Es_fun1;		
Es_fun1 ::=   Lista_parametros 	fpa	ill	Estu_Cuerpo	fll				/*parametros ) {}*/
			| fpa				ill		Estu_Cuerpo fll ;			/*) {}*/

Lista_parametros ::= Lista_parametros com var idva				/*Lista prametros com var id*/
				|	 var idva;									/*var idva*/
			
/*LLamada de una funcion*/
Es_lla_fun ::= idva ipa Es_lla_fun1; 					/*ID(param,param,etc)  */

Es_lla_fun1 ::=  fpa 
		|		Lista_Aritmetica fpa;
		
Lista_Aritmetica ::=	Lista_Aritmetica com Exp_Ari					/*Lista , param*/
				|		Exp_Ari ;										/*param*/
				
/*---------------------------- Funciones Navitas de arreglos ----------------------------*/

recur_nat ::= 	recur_nat func_nat				/*.funcionnativa.funcionnativa|*/
			|	func_nat ;						/*.funcionantiva*/
			/*|	pun idva;*/
			
func_nat ::= Tipo_Fun ipa idva fpa  				/*funciones de filtrar y otros--->Solo creacion o asignacio de variable*/
			|Tipos_Acc_Ord  						/* funciones de ordenamiento--->Solo creacion o asignacio de variable*/
			|Tipo_Obte ipa Exp_Ari fpa				/*Funciones de obtencion--->Solo creacion o asignacio de variable*/
			|opno ipa Exp_Ari com Exp_Ari fpa ;		/*ObtenerporNombre("nombre",id);*/
			
func_nat1 ::= func_leer								/*Crear array desde archivo--->Solo creacion o asignacio de variable */				
			 |func_gxml;							/*Leer Gxml --->Solo creacion o asignacio de variable*/
	/*		 |Es_lla_fun;							*Funciones normales 	--->Solo creacion o asignacio de variable*/
	
Tipo_Fun ::= filt	{:RESULT=1;:}								/*Funcion Filtrar*/
		|	 busc	{:RESULT=2;:}								/*Funcion buscar*/
		|	 map	{:RESULT=3;:}								/*Funcion map*/
		|	 redu	{:RESULT=4;:}								/*Funcion reduce*/
		|	 todo	{:RESULT=5;:}								/*Funcion todos*/
		|	 algu	{:RESULT=6;:};								/*Funcion algunos*/
		
Tipos_Acc_Ord ::= 	desc  							/*Descendente */
				|	asce  							/*Ascendente */
				|	inve 							/*Invertir */
				|	maxi 							/*Maximo */
				|	mini ;							/*Minimo */
				
func_leer ::= lgxm ipa Exp_Log1 fpa ;				/*LeerGxml(expresion);*/

func_gxml ::= cada ipa Exp_Log1 fpa ;				/*Creararraydesdearchivo(expresion);*/					
			
		
Tipo_Obte ::= 	opet								/*ObtenerporEtiqueta();*/
			|	opid;								/*ObtenerporId();*/
											
			
/*---------------------------- Acciones de 	Crear ----------------------------*/				
Acc_venta ::= cven ipa Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ; /*CrearVentana--->Solo creacion o asignacio de variable */ 

Acc_conte ::= idva ccon	ipa Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ; /*Crear contenedor--->Solo creacion o asignacio de variable */

Acc_boton ::= idva cbot  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ;/*Crear boton--->Solo creacion o asignacio de variable*/

Acc_texto ::= ctex  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ; /*Crear texto--->Solo accion sobre variable*/

Acc_ctext ::= ccte  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ; /*Crear Caja texto--->Solo accion sobre variable*/

Acc_Atext ::= cate  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ;/*Crear Area texto--->Solo accion sobre variable*/

Acc_Cnume ::= ccnu  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ;/*Crear control numerico--->Solo accion sobre variable*/

Acc_despl ::= cdes  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ;/*Crear desplegable--->Solo accion sobre variable*/

Acc_image ::= cima  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ;/*Crear Imagen--->Solo accion sobre variable*/

Acc_video ::= cvid  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ;/*Crear Video--->Solo accion sobre variable*/

Acc_repro ::= crep  ipa  Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 com Exp_Log1 fpa ;/*Crear Reproductor--->Solo accion sobre variable*/

/*---------------------------- Acciones de Botones y otros ----------------------------*/
Acc_alcar ::= acar ipa Es_lla_fun fpa				/*Alcargar(Metodo)--->Solo accion sobre variable*/
			| acar ipa fpa ;						/*Alcargar()--->Solo accion sobre variable*/
			
Acc_alcer ::= acer ipa Es_lla_fun fpa				/*Alcerrar(Metodo)--->Solo accion sobre variable*/
			| acer ipa fpa ;						/*Alcerrar()--->Solo accion sobre variable*/
			
Acc_alcli ::= acli ipa Es_lla_fun fpa ;				/*Alclick(Metodo)--->Solo accion sobre variable*/
			
/*---------------------------- Estructura del cuerpo ----------------------------*/			
Cuerpo_general ::= 	ES_VAR				/*Estructura variable*/
			|		Es_Impr				/*Estructura imprimir*/
			|		Estru_si			/*Estructura si*/
			| 		Es_sele				/*Estructura Selecciona*/
			|		Es_asig				/*Estructura de asignacion */
			|		Es_acc_ID			/*Estructura acciones ID */
			|		reto Exp_Log1 pyc	/*Retornar expresion*/
			|		Es_lla_fun pyc 		/*Llamada a una funcion*/
			| 		dete pyc;			/*Detener ;*/

Estu_Cuerpo ::=  Estu_Cuerpo Cuerpo_general		/*Estructura Cuerpo*/
				| Cuerpo_general				/*Cuerpo */	
				;
				
/*---------------------------- Estructura acciones ID ----------------------------*/				
Es_acc_ID ::= Es_tipo_id1 accion_ID pyc ; /*ID . Accion ID*/

accion_ID ::= 	Acc_texto
			|	Acc_ctext
			|	Acc_Atext
			|	Acc_Cnume
			|	Acc_despl
			|	Acc_image
			|	Acc_video
			|	Acc_repro
			|	pun cada ipa fpa		/*Creararraydesdearchivo();--->Solo accion sobre variable*/
			|	Acc_alcar
			|	Acc_alcli
			|	recur_nat
			|	Acc_alcer; 

Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu
				|  Es_DeAu;
				
Es_DeAu ::= Cuerpo_general
		|	Es_func;