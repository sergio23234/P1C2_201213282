package Analizadores;
import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentFs.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
parser code {:
    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
		NodoError Nerror = new NodoError("sintactico");
		Nerror.descripcion = "caracter no reconocido: "+ s.value;
		Nerror.linea = String.valueOf(s.left+1);
		Nerror.columna = String.valueOf(s.right+1);
		errores.add(Nerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public Raiz regresar_raiz(){
        return RCCSS;
    }
	 public ArrayList<NodoError> errores = new ArrayList();
	 public Raiz RCCSS;
	 :}
action code {:
    public String estado="";
:}
terminal mas,men,por,div,igu,pot,may,nos,ill,fll,ipa,fpa,idpu,ico,fco,fin,pyc,not,Sor,and,var,pun,com,dop,dmas,dnos;// Terminales
terminal impr,impo,dete,reto,si,sele,caso,defe,func,desc,asce,cada,inve,maxi,mini,busc,filt,idva,cade,deci,nume,verd,fals,sino;
terminal map,redu,todo,algu,lgxm,opet,opid,opno,cven,ccon,ctex,ccte,cate,ccnu,cdes,cbot,cima,crep,cvid,acli,acar,acer,nulo;
non terminal accion_ID,Es_acc_ID,Estu_Cuerpo,Cuerpo_general,Acc_alcer,Acc_alcar,Lista_parametros,inicio_p1,inicio_p2;
non terminal Acc_repro,Acc_video,Acc_image,Acc_despl,Acc_Atext,Acc_Cnume,Acc_ctext,Acc_texto,Acc_boton,Acc_conte,Acc_venta,Acc_alcli;
non terminal Tipo_Obte,func_gxml,func_leer,Tipos_Acc_Ord,Tipo_Fun,func_nat,func_nat1,Lista_Aritmetica,Es_lla_fun,Es_lla_fun1,Es_fun1,Es_func,Es_tipo_id1;
non terminal tipo_sele,Cuerpo_sele,Es_sele,Es_tipo_id,Es_asig,Es_asig1	,Es_DeAu,Estru_si,Es_sino,Es_Si,Es_Impo,Es_Impr,Expresion,Start;
non terminal recur_nat,Exp_Ari,Exp_Com,Exp_Log,Dato_Posfa,Lista_ID,Dato_Pri,Lista_Objetos,Lista_Datos,ES_VAR1,ES_VAR,Cuerpo_funcion;
non terminal String Ex_men,Ex_may;
precedence left  mas,nos,por,div,pot,Sor,and;
precedence right fin,not;
start with Start;


/*---------------------------- Inicio ----------------------------*/
Start ::= 	inicio_p1 inicio_p2
	|		inicio_p2;

inicio_p1 ::= 	inicio_p1 Es_Impo
		|		Es_Impo;

inicio_p2 ::=	Cuerpo_funcion;

/*---------------------------- Estructura Variable ----------------------------*/
ES_VAR ::= var Lista_ID ES_VAR1;

ES_VAR1 ::= igu Exp_Log pyc	 						//id = expresion_Aritmetica
		|	igu ico fco pyc	 						//id = [];
		|	igu ico Lista_Datos fco pyc	 			//id =[datos,datos,datos]
		|	igu ill Lista_Objetos fll pyc			//id={dato:"",dato:"",dato:""}
		//|	igu Exp_Log fin Exp_Ari dop Exp_Ari pyc	//id = Logica? Dato : Dato ; 
		|	igu Acc_venta pyc						// id = crear ventana 
		|	igu Acc_conte pyc						// id = crear contenedor
		|	igu Acc_boton pyc						// id = crear boton
//		| 	igu idva recur_nat pyc					// id = id.funcion_nativa*/
		| 	igu func_nat1 pyc						// id = funcion_nativa
		|	pyc ;
		
Lista_Datos ::= Lista_Datos com Exp_Ari				/* Exp , Exp*/
		|		Exp_Ari ;							/* Exp*/

Lista_Objetos ::= Lista_Objetos com idva dop cade 	/* Objetos , id : "objeto"*/
			|		idva dop cade;					/* id : "objeto"*/


Lista_ID ::=	Lista_ID:e1 com idva	{::} 	//id,id
			|	idva					{::};	//id
		
/*!---------------------------- Estructura Operaciones ----------------------------!*/
		
Exp_Log ::=	Exp_Log:e1	Sor Exp_Log:e2 					{:NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="OR";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*LOG || LOG*/
		|	Exp_Log:e1	and	Exp_Log:e2					{:NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="AND";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*LOG && LOG*/
		|	not			Exp_Log:e1						{:NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="NOT";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/* ! LOG*/
		|	Exp_Log	fin Exp_Ari:e1 dop Exp_Ari:e2		{:NodoFs nuevo = new NodoFs("OPE_L"); nuevo.valor="Ternario";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*Ternario*/
		|	Exp_Com 									{:RESULT=e1;:}/*Comparacion*/	
		;
		
Exp_Com ::=	Exp_Ari:e1 igu igu		Exp_Ari:e2			{:NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor="==";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ARI == ARI*/	
		|	Exp_Ari:e1 not igu		Exp_Ari:e2 			{:NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor="!=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ARI != ARI*/
		|	Exp_Ari:e1 Ex_may:e3	Exp_Ari:e2 			{:NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor=e3;nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ARI >= ARI*/
		|	Exp_Ari:e1 Ex_men:e3	Exp_Ari:e2 			{:NodoFs nuevo = new NodoFs("OPE_C"); nuevo.valor=e3;nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ARI <= ARI*/
		|	Exp_Ari:e1;

Ex_may ::=	may 		{:RESULT=">";:}			/* >  */
		|	may igu		{:RESULT=">=";:};		/* >= */
		

Ex_men ::=	men 		{:RESULT="<";:}			/* <  */
		|	men igu		{:RESULT="<=";:};		/* <= */
		

Exp_Ari ::= Exp_Ari:e1 mas Exp_Ari:e2				{:NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="+";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*DATO + DATO*/
		|	Exp_Ari:e1 nos Exp_Ari:e2				{:NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="-";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*DATO - DATO*/
		|	Exp_Ari:e1 por Exp_Ari:e2				{:NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="*";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*DATO * DATO*/
		|	Exp_Ari:e1 div Exp_Ari:e2				{:NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="/";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*DATO / DATO*/
		|	Exp_Ari:e1 pot Exp_Ari:e2				{:NodoFs nuevo = new NodoFs("OPE_A"); nuevo.valor="^";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*DATO ^ DATO*/
		|	ipa 	Exp_Log:e1 	fpa					{:RESULT=e1;:}/*(	Dato  )*/
		|	nos		Exp_Ari:e1						{:NodoFs nuevo = new NodoFs("Dato Negado"); nuevo.add_NodoFs(e1);RESULT=nuevo;:}/*-Dato*/
		|	Dato_Posfa:e1							{:RESULT=e1;:}
		;

Dato_Posfa ::= 	Dato_Pri:e1						{:RESULT=e1;:}
			|	Es_tipo_id:e1					{:RESULT=e1;:}
			|	nulo:e1							{:NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;:}
			|	Es_lla_fun:e1					{:RESULT=e1;:}
			|	idva recur_nat:e1				{:RESULT=e1;:}
			|	Es_tipo_id:e1 dmas 				{:NodoFs nuevo = new NodoFs("Autoincremento"); nuevo.add_NodoFs(e1);RESULT=nuevo;:}	/*ID ++*/
			|	Es_tipo_id:e1 dnos  			{:NodoFs nuevo = new NodoFs("Autodecremento"); nuevo.add_NodoFs(e1);RESULT=nuevo;:}	/*ID--*/
		;

Dato_Pri ::= 	nume:e1			{:NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;:}//numero
		|	 	cade:e1			{:NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;:}//cadena
		|		deci:e1 		{:NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;:}//decimales
		|		verd:e1			{:NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;:}//verdadero
		|		fals:e1			{:NodoFs nuevo = new NodoFs("Dato"); nuevo.valor=e1; RESULT=nuevo;:};//falso

/*---------------------------- Estructura Imprimir ----------------------------*/
Es_Impr ::= impr ipa Exp_Log:e1 fpa pyc 		{:NodoFs nuevo = new NodoFs("Imprimir"); nuevo.add_NodoFs(e1); RESULT=nuevo;:}	/*Imprimir(EXPRESION);*/
				;
/*---------------------------- Estructura Importar ----------------------------*/
Es_Impo ::= impo ipa Exp_Ari fpa pyc 			{:NodoFs nuevo = new NodoFs("Imprimir"); nuevo.add_NodoFs(e1); RESULT=nuevo;:}/*Importar(Expresion);*/
				;
				
/*---------------------------- Estructura Si ----------------------------*/

Es_Si ::=	si ipa Exp_Log:e1 fpa ill Estu_Cuerpo:e2 fll 	{:NodoFs nuevo = new NodoFs("Si"); nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RESULT=nuevo;:}/*si (Exp_log){CUERPO}*/
			;
			
Es_sino ::= sino ill Estu_Cuerpo:e2 fll						{:NodoFs nuevo = new NodoFs("Sino"); nuevo.add_NodoFs(e1); RESULT=nuevo;:}/*sino {CUERPO}*/
			;
		
Estru_si ::= Estru_si:e1 sino Es_Si:e3		{: e1.add_NodoFs(e2); RESULT=nuevo;:}/*Si() sino si(){}*/
			|Estru_si:e1 Es_sino:e2			{: e1.add_NodoFs(e2); RESULT=nuevo;:}/*Si() sino {}*/
			|Es_Si:e1						{:NodoFs nuevo = new NodoFs("EST_SI"); nuevo.add_NodoFs(e1); RESULT=nuevo;:}/*Si()*/
			;

/*---------------------------- Estructura Asignacion ----------------------------*/
Es_asig ::= Es_tipo_id:e1 igu 	  Exp_Log:e2	pyc					{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ID  = Expresion_Ar*/
		|	Es_tipo_id:e1 por igu Exp_Log:e2	pyc					{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="*=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ID *= Expresion_Ar*/
		|	Es_tipo_id:e1 div igu Exp_Log:e2	pyc					{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="/=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ID /= Expresion_Ar*/
		|	Es_tipo_id:e1 mas igu Exp_Log:e2	pyc					{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="+=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ID += Expresion_Ar*/
		|	Es_tipo_id:e1 nos igu Exp_Log:e2	pyc					{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="-=";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ID -= Expresion_Ar*/
		|	Es_tipo_id:e1 dmas	pyc									{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="Autoincremento";nuevo.add_NodoFs(e1); RESULT=nuevo;:}/*ID++;*/ 										
		|	Es_tipo_id:e1 dnos  pyc 								{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="Autodecremento";nuevo.add_NodoFs(e1); RESULT=nuevo;:}/*ID--;*/
		|	Es_tipo_id:e1 igu func_nat1:e2 pyc						{:NodoFs nuevo = new NodoFs("AS_ID"); nuevo.valor="Funcion";nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*ID = Funcion_nativa()	*/ 
		;
		
Es_tipo_id ::=  idva ico Exp_Ari fco 								/*ID[num]*/
		|		idva 
		|		idva idpu
		|		idva ico Exp_Ari fco  idpu;	
/*---------------------------- Estructura Selecciona ----------------------------*/		
Es_sele ::= sele ipa Exp_Ari:e1 fpa ill Cuerpo_sele:e2 fll	 {:NodoFs nuevo = new NodoFs("ES_SEL"); 	nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*seleciona (Exp_Ari){ casos}*/
		;

Cuerpo_sele ::= Cuerpo_sele:e1 tipo_sele:e2			{:e1.add_NodoFs(e2); RESULT=e1;:}
		|		tipo_sele:e1						{:NodoFs nuevo = new NodoFs("CU_SEL"); 	nuevo.add_NodoFs(e1); RESULT=nuevo;:}
		;

tipo_sele ::= 	caso Exp_Ari:e1 dop ill Estu_Cuerpo:e2 fll		{:NodoFs nuevo = new NodoFs("caso"); 	nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*caso Exp_Ari : */
			|	defe 		    dop ill Estu_Cuerpo:e2 fll		{:NodoFs nuevo = new NodoFs("defecto"); nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2);RESULT=nuevo;:}/*defecto : */
			;
			
/*---------------------------- Estructura funcion ----------------------------*/			
Es_func ::= func idva ipa  Es_fun1									/*funcion id (*/
		|	var  idva ipa  Es_fun1;		
Es_fun1 ::=   Lista_parametros 	fpa	ill	Estu_Cuerpo	fll				/*parametros ) {}*/
			| fpa				ill		Estu_Cuerpo fll ;			/*) {}*/

Lista_parametros ::= Lista_parametros com var idva				/*Lista prametros com var id*/
				|	 var idva;									/*var idva*/
			
/*LLamada de una funcion*/
Es_lla_fun ::= idva ipa Es_lla_fun1; 					/*ID(param,param,etc)  */

Es_lla_fun1 ::=  fpa 
		|		Lista_Aritmetica fpa;
		
Lista_Aritmetica ::=	Lista_Aritmetica com Exp_Ari					/*Lista , param*/
				|		Exp_Ari ;										/*param*/
				
/*---------------------------- Funciones Navitas de arreglos ----------------------------*/

recur_nat ::= 	recur_nat:e1 func_nat:e2				{:e1.add_NodoFs(e2); RESULT=e1;:}/*.funcionnativa.funcionnativa|*/
			|	func_nat:e1								{:NodoFs nuevo = new NodoFs("funciones"); nuevo.valor="nativas"; nuevo.add_NodoFs(e1); RESULT=nuevo;:};/*.funcionantiva*/
		
			
func_nat ::= Tipo_Fun:e1 ipa idva:e2 fpa  				{:NodoFs nuevo = new NodoFs("filtros"); nuevo.valor=e1; nuevo.add_NodoFs(e2); RESULT=nuevo;:}/*funciones de filtrar y otros--->Solo creacion o asignacio de variable*/
			|Tipos_Acc_Ord:e1  							{:NodoFs nuevo = new NodoFs("ordenamiento"); nuevo.valor=e1; RESULT=nuevo;:}/* funciones de ordenamiento--->Solo creacion o asignacio de variable*/
			|Tipo_Obte:e1 ipa Exp_Ari:e2 fpa			{:NodoFs nuevo = new NodoFs("obtencion"); nuevo.valor=e1; nuevo.add_NodoFs(e2); RESULT=nuevo;:}	/*Funciones de obtencion--->Solo creacion o asignacio de variable*/
			|opno ipa Exp_Ari:e1 com Exp_Ari:e2 fpa 	{:NodoFs nuevo = new NodoFs("obtencion"); nuevo.valor=e1; nuevo.add_NodoFs(e1); nuevo.add_NodoFs(e2); RESULT=nuevo;:};/*ObtenerporNombre("nombre",id);*/
			
func_nat1 ::= func_leer:e1								{:RESULT=e1;:}/*Crear array desde archivo--->Solo creacion o asignacio de variable */				
			 |func_gxml:e1								{:RESULT=e1;:};/*Leer Gxml --->Solo creacion o asignacio de variable*/
	
Tipo_Fun ::= filt										{:RESULT="filtrar";:}/*Funcion Filtrar*/
		|	 busc										{:RESULT="buscar";:}/*Funcion buscar*/
		|	 map										{:RESULT="map";:}/*Funcion map*/
		|	 redu										{:RESULT="reduce";:}/*Funcion reduce*/
		|	 todo										{:RESULT="todos";:}/*Funcion todos*/
		|	 algu										{:RESULT="algunos";:};/*Funcion algunos*/
		
Tipos_Acc_Ord ::= 	desc  								{:RESULT="descendente";:}/*Descendente */
				|	asce  								{:RESULT="ascendente";:}/*Ascendente */
				|	inve 								{:RESULT="invertir";:}/*Invertir */
				|	maxi 								{:RESULT="maximo";:}/*Maximo */
				|	mini 								{:RESULT="minimo";:};/*Minimo */

func_leer ::= lgxm ipa Exp_Log:e1 fpa 					{:NodoFs nuevo = new NodoFs("leergxml"); 	 nuevo.add_NodoFs(e1); RESULT=nuevo;:};/*LeerGxml(expresion);*/

func_gxml ::= cada ipa Exp_Log:e1 fpa 					{:NodoFs nuevo = new NodoFs("arrayarchivo"); nuevo.add_NodoFs(e1); RESULT=nuevo;:};/*Creararraydesdearchivo(expresion);*/					


Tipo_Obte ::= 	opet									{:RESULT="obt_etiquieta";:}/*ObtenerporEtiqueta();*/
			|	opid									{:RESULT="obt_ID";:};/*ObtenerporId();*/


/*---------------------------- Acciones de 	Crear ----------------------------*/				
Acc_venta ::= cven ipa Exp_Log com Exp_Log com Exp_Log fpa ; /*CrearVentana--->Solo creacion o asignacio de variable */ 

Acc_conte ::= idva ccon	ipa Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ; /*Crear contenedor--->Solo creacion o asignacio de variable */

Acc_boton ::= idva cbot  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ;/*Crear boton--->Solo creacion o asignacio de variable*/

Acc_texto ::= ctex  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ; /*Crear texto--->Solo accion sobre variable*/

Acc_ctext ::= ccte  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ; /*Crear Caja texto--->Solo accion sobre variable*/

Acc_Atext ::= cate  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ;/*Crear Area texto--->Solo accion sobre variable*/

Acc_Cnume ::= ccnu  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ;/*Crear control numerico--->Solo accion sobre variable*/

Acc_despl ::= cdes  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ;/*Crear desplegable--->Solo accion sobre variable*/

Acc_image ::= cima  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ;/*Crear Imagen--->Solo accion sobre variable*/

Acc_video ::= cvid  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ;/*Crear Video--->Solo accion sobre variable*/

Acc_repro ::= crep  ipa  Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log com Exp_Log fpa ;/*Crear Reproductor--->Solo accion sobre variable*/

/*---------------------------- Acciones de Botones y otros ----------------------------*/
Acc_alcar ::= acar ipa Es_lla_fun fpa				/*Alcargar(Metodo)--->Solo accion sobre variable*/
			| acar ipa fpa ;						/*Alcargar()--->Solo accion sobre variable*/
			
Acc_alcer ::= acer ipa Es_lla_fun fpa				/*Alcerrar(Metodo)--->Solo accion sobre variable*/
			| acer ipa fpa ;						/*Alcerrar()--->Solo accion sobre variable*/
			
Acc_alcli ::= acli ipa Es_lla_fun fpa ;				/*Alclick(Metodo)--->Solo accion sobre variable*/
			
/*---------------------------- Estructura del cuerpo ----------------------------*/			
Cuerpo_general ::= 	ES_VAR				/*Estructura variable*/
			|		Es_Impr				/*Estructura imprimir*/
			|		Estru_si			/*Estructura si*/
			| 		Es_sele				/*Estructura Selecciona*/
			|		Es_asig				/*Estructura de asignacion */
			|		Es_acc_ID			/*Estructura acciones ID */
			|		reto Exp_Log pyc	/*Retornar expresion*/
			|		Es_lla_fun pyc 		/*Llamada a una funcion*/
			| 		dete pyc;			/*Detener ;*/

Estu_Cuerpo ::=  Estu_Cuerpo Cuerpo_general		/*Estructura Cuerpo*/
				| Cuerpo_general				/*Cuerpo */	
				;
				
/*---------------------------- Estructura acciones ID ----------------------------*/				
Es_acc_ID ::= Es_tipo_id accion_ID pyc ; /*ID . Accion ID*/

accion_ID ::= 	Acc_texto
			|	Acc_ctext
			|	Acc_Atext
			|	Acc_Cnume
			|	Acc_despl
			|	Acc_image
			|	Acc_video
			|	Acc_repro
			|	pun cada ipa fpa		/*Creararraydesdearchivo();--->Solo accion sobre variable*/
			|	Acc_alcar
			|	Acc_alcli
			|	recur_nat
			|	Acc_alcer; 

Cuerpo_funcion ::= Cuerpo_funcion Es_DeAu
				|  Es_DeAu;
				
Es_DeAu ::= Cuerpo_general
		|	Es_func;