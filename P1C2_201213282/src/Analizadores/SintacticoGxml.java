
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentGxml.NodoGxml;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGxml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGxml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\046\003\000\002\002" +
    "\004\000\002\002\003\000\002\043\004\000\002\043\003" +
    "\000\002\044\004\000\002\044\003\000\002\003\011\000" +
    "\002\045\004\000\002\045\003\000\002\004\013\000\002" +
    "\005\004\000\002\005\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\007\004\000\002\007\003\000\002\010\013\000" +
    "\002\011\004\000\002\011\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\024\004" +
    "\000\002\024\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\047\002\000\002\014\014\000\002\015\004\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\017\013\000\002" +
    "\020\004\000\002\020\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\022" +
    "\004\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\027\005\000\002\030\013\000\002\030\010\000" +
    "\002\031\004\000\002\031\003\000\002\032\005\000\002" +
    "\050\002\000\002\033\014\000\002\033\010\000\002\051" +
    "\002\000\002\034\013\000\002\025\013\000\002\026\004" +
    "\000\002\026\003\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\036" +
    "\013\000\002\037\004\000\002\037\003\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\041\003\000\002\041\003\000\002\042\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\004\011\010\001\002\000\004\011\010\001" +
    "\002\000\006\002\ufffa\011\ufffa\001\002\000\004\011\ufffc" +
    "\001\002\000\004\002\u012e\001\002\000\006\041\015\043" +
    "\u0128\001\002\000\006\002\ufffe\011\014\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffb\011\ufffb\001\002\000" +
    "\004\041\015\001\002\000\014\012\022\021\017\030\024" +
    "\047\020\051\021\001\002\000\016\012\022\013\040\021" +
    "\017\030\024\047\020\051\021\001\002\000\004\014\035" +
    "\001\002\000\004\014\033\001\002\000\004\014\031\001" +
    "\002\000\004\014\027\001\002\000\016\012\ufff4\013\ufff4" +
    "\021\ufff4\030\ufff4\047\ufff4\051\ufff4\001\002\000\004\014" +
    "\025\001\002\000\004\053\026\001\002\000\016\012\ufff1" +
    "\013\ufff1\021\ufff1\030\ufff1\047\ufff1\051\ufff1\001\002\000" +
    "\004\053\030\001\002\000\016\012\ufff3\013\ufff3\021\ufff3" +
    "\030\ufff3\047\ufff3\051\ufff3\001\002\000\004\006\032\001" +
    "\002\000\016\012\ufff0\013\ufff0\021\ufff0\030\ufff0\047\ufff0" +
    "\051\ufff0\001\002\000\004\006\034\001\002\000\016\012" +
    "\uffef\013\uffef\021\uffef\030\uffef\047\uffef\051\uffef\001\002" +
    "\000\004\053\036\001\002\000\016\012\ufff2\013\ufff2\021" +
    "\ufff2\030\ufff2\047\ufff2\051\ufff2\001\002\000\016\012\ufff5" +
    "\013\ufff5\021\ufff5\030\ufff5\047\ufff5\051\ufff5\001\002\000" +
    "\004\011\041\001\002\000\004\044\046\001\002\000\004" +
    "\011\044\001\002\000\004\011\uffed\001\002\000\006\016" +
    "\047\044\046\001\002\000\004\011\uffee\001\002\000\020" +
    "\012\054\015\056\017\055\022\057\026\061\027\060\030" +
    "\052\001\002\000\004\041\050\001\002\000\004\013\051" +
    "\001\002\000\006\002\ufff6\011\ufff6\001\002\000\004\014" +
    "\u0126\001\002\000\022\012\uffea\013\uffea\015\uffea\017\uffea" +
    "\022\uffea\026\uffea\027\uffea\030\uffea\001\002\000\004\014" +
    "\u0124\001\002\000\004\014\u0122\001\002\000\004\014\u0120" +
    "\001\002\000\004\014\u011e\001\002\000\004\014\u011c\001" +
    "\002\000\004\014\u011a\001\002\000\022\012\054\013\063" +
    "\015\056\017\055\022\057\026\061\027\060\030\052\001" +
    "\002\000\004\011\073\001\002\000\022\012\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\022\uffeb\026\uffeb\027\uffeb\030\uffeb\001" +
    "\002\000\004\011\uffe0\001\002\000\004\011\uffe1\001\002" +
    "\000\004\011\uffdc\001\002\000\004\011\uffdf\001\002\000" +
    "\004\011\uffde\001\002\000\004\011\u0116\001\002\000\014" +
    "\004\076\005\100\025\077\031\101\050\075\001\002\000" +
    "\004\011\uffdd\001\002\000\036\015\270\017\267\020\275" +
    "\021\276\022\271\027\272\030\263\032\266\033\274\034" +
    "\262\035\261\036\273\037\264\040\257\001\002\000\022" +
    "\015\222\017\220\021\227\022\223\024\225\027\224\036" +
    "\226\052\216\001\002\000\020\015\105\017\104\022\106" +
    "\027\107\034\103\036\110\046\102\001\002\000\022\015" +
    "\154\017\153\020\156\030\151\035\150\036\155\037\152" +
    "\040\145\001\002\000\020\015\105\017\104\022\106\027" +
    "\107\034\103\036\110\046\102\001\002\000\004\014\143" +
    "\001\002\000\004\014\141\001\002\000\004\014\137\001" +
    "\002\000\004\014\135\001\002\000\004\014\133\001\002" +
    "\000\004\014\131\001\002\000\004\014\127\001\002\000" +
    "\022\013\uffa2\015\uffa2\017\uffa2\022\uffa2\027\uffa2\034\uffa2" +
    "\036\uffa2\046\uffa2\001\002\000\022\013\113\015\105\017" +
    "\104\022\106\027\107\034\103\036\110\046\102\001\002" +
    "\000\006\011\120\055\117\001\002\000\022\013\uffa3\015" +
    "\uffa3\017\uffa3\022\uffa3\027\uffa3\034\uffa3\036\uffa3\046\uffa3" +
    "\001\002\000\004\011\uff9a\001\002\000\006\011\uff99\055" +
    "\126\001\002\000\006\011\ufff7\055\ufff7\001\002\000\004" +
    "\005\100\001\002\000\004\011\122\001\002\000\004\016" +
    "\123\001\002\000\004\031\124\001\002\000\004\013\125" +
    "\001\002\000\004\011\uff98\001\002\000\006\011\ufff8\055" +
    "\ufff8\001\002\000\004\053\130\001\002\000\022\013\uffa1" +
    "\015\uffa1\017\uffa1\022\uffa1\027\uffa1\034\uffa1\036\uffa1\046" +
    "\uffa1\001\002\000\004\054\132\001\002\000\022\013\uff9d" +
    "\015\uff9d\017\uff9d\022\uff9d\027\uff9d\034\uff9d\036\uff9d\046" +
    "\uff9d\001\002\000\004\054\134\001\002\000\022\013\uff9e" +
    "\015\uff9e\017\uff9e\022\uff9e\027\uff9e\034\uff9e\036\uff9e\046" +
    "\uff9e\001\002\000\004\054\136\001\002\000\022\013\uffa0" +
    "\015\uffa0\017\uffa0\022\uffa0\027\uffa0\034\uffa0\036\uffa0\046" +
    "\uffa0\001\002\000\004\054\140\001\002\000\022\013\uff9f" +
    "\015\uff9f\017\uff9f\022\uff9f\027\uff9f\034\uff9f\036\uff9f\046" +
    "\uff9f\001\002\000\004\006\142\001\002\000\022\013\uff9b" +
    "\015\uff9b\017\uff9b\022\uff9b\027\uff9b\034\uff9b\036\uff9b\046" +
    "\uff9b\001\002\000\004\053\144\001\002\000\022\013\uff9c" +
    "\015\uff9c\017\uff9c\022\uff9c\027\uff9c\034\uff9c\036\uff9c\046" +
    "\uff9c\001\002\000\004\014\205\001\002\000\024\013\uffd8" +
    "\015\uffd8\017\uffd8\020\uffd8\030\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\001\002\000\024\013\176\015\154\017\153" +
    "\020\156\030\151\035\150\036\155\037\152\040\145\001" +
    "\002\000\004\014\173\001\002\000\004\014\171\001\002" +
    "\000\004\014\167\001\002\000\004\014\165\001\002\000" +
    "\004\014\163\001\002\000\004\014\161\001\002\000\004" +
    "\014\157\001\002\000\004\054\160\001\002\000\024\013" +
    "\uffd3\015\uffd3\017\uffd3\020\uffd3\030\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\001\002\000\004\053\162\001\002\000" +
    "\024\013\uffd7\015\uffd7\017\uffd7\020\uffd7\030\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\001\002\000\004\054\164\001" +
    "\002\000\024\013\uffd6\015\uffd6\017\uffd6\020\uffd6\030\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002\000\004\054" +
    "\166\001\002\000\024\013\uffd5\015\uffd5\017\uffd5\020\uffd5" +
    "\030\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002\000" +
    "\004\053\170\001\002\000\024\013\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\030\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\001" +
    "\002\000\004\053\172\001\002\000\024\013\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\030\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\001\002\000\004\053\174\001\002\000\024\013\uffd4" +
    "\015\uffd4\017\uffd4\020\uffd4\030\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\001\002\000\024\013\uffd9\015\uffd9\017\uffd9" +
    "\020\uffd9\030\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001" +
    "\002\000\004\055\117\001\002\000\006\011\uffdb\055\126" +
    "\001\002\000\004\011\201\001\002\000\004\016\202\001" +
    "\002\000\004\005\203\001\002\000\004\013\204\001\002" +
    "\000\004\011\uffda\001\002\000\004\053\206\001\002\000" +
    "\024\013\uffd0\015\uffd0\017\uffd0\020\uffd0\030\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\001\002\000\022\013\210\015" +
    "\105\017\104\022\106\027\107\034\103\036\110\046\102" +
    "\001\002\000\006\011\120\055\117\001\002\000\004\011" +
    "\212\001\002\000\004\016\213\001\002\000\004\025\214" +
    "\001\002\000\004\013\215\001\002\000\004\011\uffa4\001" +
    "\002\000\004\014\255\001\002\000\024\013\uffad\015\uffad" +
    "\017\uffad\021\uffad\022\uffad\024\uffad\027\uffad\036\uffad\052" +
    "\uffad\001\002\000\004\014\253\001\002\000\024\013\244" +
    "\015\222\017\220\021\227\022\223\024\225\027\224\036" +
    "\226\052\216\001\002\000\004\014\242\001\002\000\004" +
    "\014\240\001\002\000\004\014\236\001\002\000\004\014" +
    "\234\001\002\000\004\014\232\001\002\000\004\014\230" +
    "\001\002\000\004\053\231\001\002\000\024\013\uffab\015" +
    "\uffab\017\uffab\021\uffab\022\uffab\024\uffab\027\uffab\036\uffab" +
    "\052\uffab\001\002\000\004\053\233\001\002\000\024\013" +
    "\uffac\015\uffac\017\uffac\021\uffac\022\uffac\024\uffac\027\uffac" +
    "\036\uffac\052\uffac\001\002\000\004\053\235\001\002\000" +
    "\024\013\uffaa\015\uffaa\017\uffaa\021\uffaa\022\uffaa\024\uffaa" +
    "\027\uffaa\036\uffaa\052\uffaa\001\002\000\004\054\237\001" +
    "\002\000\024\013\uffa6\015\uffa6\017\uffa6\021\uffa6\022\uffa6" +
    "\024\uffa6\027\uffa6\036\uffa6\052\uffa6\001\002\000\004\054" +
    "\241\001\002\000\024\013\uffa7\015\uffa7\017\uffa7\021\uffa7" +
    "\022\uffa7\024\uffa7\027\uffa7\036\uffa7\052\uffa7\001\002\000" +
    "\004\054\243\001\002\000\024\013\uffa9\015\uffa9\017\uffa9" +
    "\021\uffa9\022\uffa9\024\uffa9\027\uffa9\036\uffa9\052\uffa9\001" +
    "\002\000\004\055\117\001\002\000\024\013\uffae\015\uffae" +
    "\017\uffae\021\uffae\022\uffae\024\uffae\027\uffae\036\uffae\052" +
    "\uffae\001\002\000\006\011\247\055\126\001\002\000\004" +
    "\016\250\001\002\000\004\004\251\001\002\000\004\013" +
    "\252\001\002\000\004\011\uffaf\001\002\000\004\054\254" +
    "\001\002\000\024\013\uffa8\015\uffa8\017\uffa8\021\uffa8\022" +
    "\uffa8\024\uffa8\027\uffa8\036\uffa8\052\uffa8\001\002\000\004" +
    "\053\256\001\002\000\024\013\uffa5\015\uffa5\017\uffa5\021" +
    "\uffa5\022\uffa5\024\uffa5\027\uffa5\036\uffa5\052\uffa5\001\002" +
    "\000\004\014\u0113\001\002\000\040\013\331\015\270\017" +
    "\267\020\275\021\276\022\271\027\272\030\263\032\266" +
    "\033\274\034\262\035\261\036\273\037\264\040\257\001" +
    "\002\000\004\014\327\001\002\000\004\014\325\001\002" +
    "\000\004\014\323\001\002\000\004\014\321\001\002\000" +
    "\040\013\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\001\002\000\004\014\317\001\002" +
    "\000\004\014\315\001\002\000\004\014\313\001\002\000" +
    "\004\014\311\001\002\000\004\014\307\001\002\000\004" +
    "\014\305\001\002\000\004\014\303\001\002\000\004\014" +
    "\301\001\002\000\004\014\277\001\002\000\004\053\300" +
    "\001\002\000\040\013\uffcb\015\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001\002\000\004\054" +
    "\302\001\002\000\040\013\uffc5\015\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\001\002\000\004" +
    "\054\304\001\002\000\040\013\uffc1\015\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\001\002\000" +
    "\004\053\306\001\002\000\040\013\uffcc\015\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\027\uffcc\030\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\001\002" +
    "\000\004\054\310\001\002\000\040\013\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\027\uffc7\030\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\001" +
    "\002\000\004\054\312\001\002\000\040\013\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\027\uffc8\030\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\001\002\000\004\054\314\001\002\000\040\013\uffca\015" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\027\uffca\030\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\001\002\000\004\054\316\001\002\000\040\013\uffc9" +
    "\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\027\uffc9\030" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\001\002\000\004\054\320\001\002\000\040\013" +
    "\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\027\uffc0" +
    "\030\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\001\002\000\004\053\322\001\002\000\040" +
    "\013\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\027" +
    "\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\001\002\000\004\053\324\001\002\000" +
    "\040\013\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\027\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\001\002\000\004\006\326\001\002" +
    "\000\040\013\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\001\002\000\004\053\330\001" +
    "\002\000\040\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\001\002\000\004\011\336" +
    "\001\002\000\040\013\uffce\015\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\001\002\000\004\011" +
    "\uffbd\001\002\000\004\011\uffbb\001\002\000\004\011\u010f" +
    "\001\002\000\006\042\340\045\341\001\002\000\004\011" +
    "\uffbc\001\002\000\004\013\u0107\001\002\000\006\013\342" +
    "\034\344\001\002\000\004\011\351\001\002\000\004\011" +
    "\uffba\001\002\000\004\014\345\001\002\000\004\006\346" +
    "\001\002\000\004\013\347\001\002\000\004\011\351\001" +
    "\002\000\004\011\375\001\002\000\004\023\353\001\002" +
    "\000\004\011\uffb6\001\002\000\006\013\354\046\355\001" +
    "\002\000\004\055\117\001\002\000\004\014\357\001\002" +
    "\000\004\011\uffb5\001\002\000\004\053\360\001\002\000" +
    "\004\013\361\001\002\000\004\055\117\001\002\000\006" +
    "\011\uffb4\055\126\001\002\000\004\011\364\001\002\000" +
    "\004\016\365\001\002\000\004\023\366\001\002\000\004" +
    "\013\367\001\002\000\004\011\uffb3\001\002\000\006\011" +
    "\371\055\126\001\002\000\004\016\372\001\002\000\004" +
    "\023\373\001\002\000\004\013\374\001\002\000\004\011" +
    "\uffb2\001\002\000\006\016\377\023\353\001\002\000\004" +
    "\011\uffb7\001\002\000\004\045\u0100\001\002\000\004\013" +
    "\u0101\001\002\000\004\011\uffb9\001\002\000\004\011\u0103" +
    "\001\002\000\006\016\u0104\023\353\001\002\000\004\045" +
    "\u0105\001\002\000\004\013\u0106\001\002\000\004\011\uffb8" +
    "\001\002\000\004\055\117\001\002\000\006\011\uffb1\055" +
    "\126\001\002\000\004\011\u010a\001\002\000\004\016\u010b" +
    "\001\002\000\004\042\u010c\001\002\000\004\013\u010d\001" +
    "\002\000\004\011\uffb0\001\002\000\004\011\uffbe\001\002" +
    "\000\010\016\u0110\042\340\045\341\001\002\000\004\050" +
    "\u0111\001\002\000\004\013\u0112\001\002\000\004\011\uffcf" +
    "\001\002\000\004\053\u0114\001\002\000\040\013\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\027\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\001\002\000\004\011\uffe2\001\002\000\016\004\076" +
    "\005\100\016\u0117\025\077\031\101\050\075\001\002\000" +
    "\004\044\u0118\001\002\000\004\013\u0119\001\002\000\004" +
    "\011\uffec\001\002\000\004\053\u011b\001\002\000\022\012" +
    "\uffe3\013\uffe3\015\uffe3\017\uffe3\022\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\001\002\000\004\054\u011d\001\002\000\022\012" +
    "\uffe5\013\uffe5\015\uffe5\017\uffe5\022\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\001\002\000\004\054\u011f\001\002\000\022\012" +
    "\uffe6\013\uffe6\015\uffe6\017\uffe6\022\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\001\002\000\004\054\u0121\001\002\000\022\012" +
    "\uffe8\013\uffe8\015\uffe8\017\uffe8\022\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\001\002\000\004\054\u0123\001\002\000\022\012" +
    "\uffe7\013\uffe7\015\uffe7\017\uffe7\022\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\001\002\000\004\053\u0125\001\002\000\022\012" +
    "\uffe9\013\uffe9\015\uffe9\017\uffe9\022\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\001\002\000\004\053\u0127\001\002\000\022\012" +
    "\uffe4\013\uffe4\015\uffe4\017\uffe4\022\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\001\002\000\004\013\u0129\001\002\000\004\055" +
    "\117\001\002\000\006\011\u012b\055\126\001\002\000\004" +
    "\043\u012c\001\002\000\004\013\u012d\001\002\000\004\011" +
    "\ufff9\001\002\000\004\002\001\001\002\000\004\011\ufffd" +
    "\001\002\000\006\002\uffff\011\014\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\016\002\011\003\005\004\004\043\003\044" +
    "\010\046\006\001\001\000\010\003\u012e\004\004\044\u012f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\015\006\022\001\001\000\004\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\041\010\042\001\001\000\002\001\001" +
    "\000\004\010\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\061\012\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\063\001\001\000\020" +
    "\013\065\014\064\017\067\024\071\025\070\036\073\042" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\u0114\014\064\017\067\025\070\036\073" +
    "\042\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\257\021\264\001\001\000\006\026\220\035\216" +
    "\001\001\000\006\037\206\040\110\001\001\000\006\015" +
    "\146\016\145\001\001\000\006\037\111\040\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\113\001\001\000" +
    "\010\014\114\041\120\045\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\176\001\001\000\004\047\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\113\001\001\000\010\014" +
    "\114\041\210\045\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\334\023" +
    "\332\027\336\034\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\u010d\027\336\034" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\342\001\001\000\006\031\u0101\032" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\347\032\351\001" +
    "\001\000\004\032\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\355\001\001\000\004\045\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\361\001\001\000\004\050" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u0107\001\001" +
    "\000\004\051\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\012\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public NodoGxml regresar_raiz(){
        return RCCSS;
    }
 /*codig de usuario */
 String total = "";
 public NodoGxml RCCSS = null;
 private Boolean texto_ini = false;
 //public ArrayList<Nodo> e = new ArrayList<Nodo>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGxml$actions {


    public String estado="";

  private final SintacticoGxml parser;

  /** Constructor */
  CUP$SintacticoGxml$actions(SintacticoGxml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action_part00000000(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGxml$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGxml$parser.done_parsing();
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= Ini 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoGxml e1 = (NodoGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Start",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Ini ::= Cuerpo_Ini Cuerpo_GEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Ini",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Ini ::= Cuerpo_GEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Ini",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cuerpo_Ini ::= Cuerpo_Ini ES_IMP 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Ini",33, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Cuerpo_Ini ::= ES_IMP 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Ini",33, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cuerpo_GEN ::= Cuerpo_GEN ES_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_GEN",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Cuerpo_GEN ::= ES_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_GEN",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_IMP ::= MAY RIMP MEN SUM_TEXT MAY RIMP MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_IMP",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SUM_TEXT ::= SUM_TEXT TEXT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		if(texto_ini){texto_ini=false; RESULT=e1.toString()+e2.toString();}else{RESULT=e1.toString()+" "+e2.toString(); }
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("SUM_TEXT",35, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SUM_TEXT ::= TEXT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		RESULT=e1.toString(); texto_ini=true;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("SUM_TEXT",35, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ES_VEN ::= MAY RVEN EST_VEN_COM MEN Cuerpo_Vent MAY DIA RVEN MEN 
            {
              NodoGxml RESULT =null;
		 System.out.println("llego a final ventana");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_VEN",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EST_VEN_COM ::= EST_VEN_COM EST_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN_COM",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EST_VEN_COM ::= EST_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN_COM",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EST_VEN ::= RID IGU CAD 
            {
              NodoGxml RESULT =null;
		 System.out.println("reconocio ID VEN");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EST_VEN ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EST_VEN ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EST_VEN ::= RAIN IGU MORE 
            {
              NodoGxml RESULT =null;
		 System.out.println("reconocio Acc Inicial");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EST_VEN ::= RAFI IGU MORE 
            {
              NodoGxml RESULT =null;
		 System.out.println("accion final VEN");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Cuerpo_Vent ::= Cuerpo_Vent ES_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Vent",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Cuerpo_Vent ::= ES_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Vent",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ES_CON ::= MAY RCON EST_CON_COM MEN Cuerpo_CONTE MAY DIA RCON MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_CON",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EST_CON_COM ::= EST_CON_COM EST_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON_COM",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EST_CON_COM ::= EST_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON_COM",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EST_CON ::= RID IGU CAD 
            {
              NodoGxml RESULT =null;
		 System.out.println("reconocio ID CON");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EST_CON ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;
		 System.out.println("reconocio ID CON");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EST_CON ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;
		 System.out.println("reconocio ID CON");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EST_CON ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EST_CON ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EST_CON ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EST_CON ::= RBOR IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Cuerpo_CONTE ::= Cuerpo_CONTE Tipo_Conte 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CONTE",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Cuerpo_CONTE ::= Tipo_Conte 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CONTE",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tipo_Conte ::= ES_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipo_Conte ::= ES_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Tipo_Conte ::= ES_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Tipo_Conte ::= ES_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo_Conte ::= ES_ENV 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$0 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
System.out.println("texto"+e1);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ES_TEX ::= MAY RTEX EST_TEX_COM MEN SUM_TEXT NT$0 MAY DIA RTEX MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_TEX",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EST_TEX_COM ::= EST_TEX_COM EST_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX_COM",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EST_TEX_COM ::= EST_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX_COM",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EST_TEX ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;
		 
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EST_TEX ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EST_TEX ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EST_TEX ::= RFUE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EST_TEX ::= RTAM IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EST_TEX ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EST_TEX ::= RNEG IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EST_TEX ::= RCUR IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ES_CTR ::= MAY RCTR EST_CTR_COM MEN Cuerpo_CTR MAY DIA RCTR MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_CTR",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EST_CTR_COM ::= EST_CTR_COM EST_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR_COM",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EST_CTR_COM ::= EST_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR_COM",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EST_CTR ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;
		System.out.println("reconocio Nombre Control");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EST_CTR ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EST_CTR ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EST_CTR ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EST_CTR ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EST_CTR ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EST_CTR ::= RFUE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EST_CTR ::= RTAM IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EST_CTR ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EST_CTR ::= RNEG IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EST_CTR ::= RCUR IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EST_CTR ::= RMAX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EST_CTR ::= RMIN IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EST_CTR ::= RACI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Cuerpo_CTR ::= Cuerpo_CTR Tipos_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CTR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Cuerpo_CTR ::= Tipos_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CTR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipos_CTR ::= ES_LDA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipos_CTR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Tipos_CTR ::= ES_DEF 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipos_CTR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ES_LDA ::= MAY RLDA EST_LDA_COM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_LDA",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EST_LDA_COM ::= RACI IGU MORE MEN Cuerpo_LDA MAY DIA RLDA MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_LDA_COM",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EST_LDA_COM ::= MEN Cuerpo_LDA MAY DIA RLDA MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_LDA_COM",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Cuerpo_LDA ::= Cuerpo_LDA ES_DA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_LDA",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Cuerpo_LDA ::= ES_DA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_LDA",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ES_DA ::= MAY RDAT EST_DA_COM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_DA",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$1 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
System.out.println("texto"+e1);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EST_DA_COM ::= REFE IGU CAD MEN SUM_TEXT NT$1 MAY DIA RDAT MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_DA_COM",25, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EST_DA_COM ::= MEN SUM_TEXT MAY DIA RDAT MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_DA_COM",25, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$2 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
System.out.println("texto"+e1);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ES_DEF ::= MAY RDEF MEN SUM_TEXT NT$2 MAY DIA RDEF MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_DEF",26, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ES_MUL ::= MAY RMUL EST_MUL_COM MEN SUM_TEXT MAY DIA RMUL MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_MUL",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EST_MUL_COM ::= EST_MUL_COM EST_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL_COM",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EST_MUL_COM ::= EST_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL_COM",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EST_MUL ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EST_MUL ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EST_MUL ::= RPAT IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EST_MUL ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EST_MUL ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EST_MUL ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EST_MUL ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EST_MUL ::= RAUT IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ES_BOT ::= MAY RBOT EST_BOT_COM MEN Cuerpo_BOT MAY DIA RBOT MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_BOT",28, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EST_BOT_COM ::= EST_BOT_COM EST_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT_COM",29, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EST_BOT_COM ::= EST_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT_COM",29, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EST_BOT ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EST_BOT ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EST_BOT ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EST_BOT ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EST_BOT ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EST_BOT ::= REFE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EST_BOT ::= RACI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Cuerpo_BOT ::= ES_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_BOT",31, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Cuerpo_BOT ::= SUM_TEXT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_BOT",31, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ES_ENV ::= MAY RENV EST_BOT_COM MEN Cuerpo_BOT MAY DIA RENV MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_ENV",32, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGxml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGxml$do_action_part00000000(
                               CUP$SintacticoGxml$act_num,
                               CUP$SintacticoGxml$parser,
                               CUP$SintacticoGxml$stack,
                               CUP$SintacticoGxml$top);
    }
}

}
