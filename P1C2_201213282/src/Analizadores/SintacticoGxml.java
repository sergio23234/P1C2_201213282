
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import Principal.NodoGxml;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGxml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGxml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\045\003\000\002\002" +
    "\004\000\002\043\004\000\002\043\003\000\002\044\004" +
    "\000\002\044\003\000\002\003\012\000\002\004\013\000" +
    "\002\005\004\000\002\005\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\007\004\000\002\007\003\000\002\010\013" +
    "\000\002\011\004\000\002\011\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\024" +
    "\004\000\002\024\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\013\000\002\015\004\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\017\013\000\002\020\004\000" +
    "\002\020\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\022\004\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\027" +
    "\013\000\002\030\005\000\002\031\004\000\002\031\003" +
    "\000\002\032\013\000\002\033\005\000\002\034\012\000" +
    "\002\025\013\000\002\026\004\000\002\026\003\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\036\013\000\002\037\004\000" +
    "\002\037\003\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\041\003\000\002\041\003" +
    "\000\002\042\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\004\007\007\001\002\000\004\007\023\001" +
    "\002\000\004\007\ufffd\001\002\000\004\002\020\001\002" +
    "\000\004\041\011\001\002\000\004\002\000\001\002\000" +
    "\004\011\012\001\002\000\004\053\013\001\002\000\004" +
    "\007\014\001\002\000\004\012\015\001\002\000\004\041" +
    "\016\001\002\000\004\011\017\001\002\000\004\007\ufffa" +
    "\001\002\000\004\002\001\001\002\000\004\007\ufffe\001" +
    "\002\000\006\002\ufffb\007\ufffb\001\002\000\006\037\027" +
    "\041\011\001\002\000\006\002\uffff\007\026\001\002\000" +
    "\006\002\ufffc\007\ufffc\001\002\000\004\037\027\001\002" +
    "\000\014\010\034\017\031\026\036\045\032\047\033\001" +
    "\002\000\016\010\034\011\052\017\031\026\036\045\032" +
    "\047\033\001\002\000\004\013\047\001\002\000\004\013" +
    "\045\001\002\000\004\013\043\001\002\000\004\013\041" +
    "\001\002\000\016\010\ufff7\011\ufff7\017\ufff7\026\ufff7\045" +
    "\ufff7\047\ufff7\001\002\000\004\013\037\001\002\000\004" +
    "\051\040\001\002\000\016\010\ufff4\011\ufff4\017\ufff4\026" +
    "\ufff4\045\ufff4\047\ufff4\001\002\000\004\051\042\001\002" +
    "\000\016\010\ufff6\011\ufff6\017\ufff6\026\ufff6\045\ufff6\047" +
    "\ufff6\001\002\000\004\006\044\001\002\000\016\010\ufff3" +
    "\011\ufff3\017\ufff3\026\ufff3\045\ufff3\047\ufff3\001\002\000" +
    "\004\006\046\001\002\000\016\010\ufff2\011\ufff2\017\ufff2" +
    "\026\ufff2\045\ufff2\047\ufff2\001\002\000\004\051\050\001" +
    "\002\000\016\010\ufff5\011\ufff5\017\ufff5\026\ufff5\045\ufff5" +
    "\047\ufff5\001\002\000\016\010\ufff8\011\ufff8\017\ufff8\026" +
    "\ufff8\045\ufff8\047\ufff8\001\002\000\004\007\053\001\002" +
    "\000\004\042\060\001\002\000\004\007\056\001\002\000" +
    "\004\007\ufff0\001\002\000\006\012\061\042\060\001\002" +
    "\000\004\007\ufff1\001\002\000\020\010\066\014\070\015" +
    "\067\020\071\024\073\025\072\026\064\001\002\000\004" +
    "\037\062\001\002\000\004\011\063\001\002\000\006\002" +
    "\ufff9\007\ufff9\001\002\000\004\013\u011f\001\002\000\022" +
    "\010\uffed\011\uffed\014\uffed\015\uffed\020\uffed\024\uffed\025" +
    "\uffed\026\uffed\001\002\000\004\013\u011d\001\002\000\004" +
    "\013\u011b\001\002\000\004\013\u0119\001\002\000\004\013" +
    "\u0117\001\002\000\004\013\u0115\001\002\000\004\013\u0113" +
    "\001\002\000\022\010\066\011\075\014\070\015\067\020" +
    "\071\024\073\025\072\026\064\001\002\000\004\007\105" +
    "\001\002\000\022\010\uffee\011\uffee\014\uffee\015\uffee\020" +
    "\uffee\024\uffee\025\uffee\026\uffee\001\002\000\004\007\uffe3" +
    "\001\002\000\004\007\uffe4\001\002\000\004\007\uffdf\001" +
    "\002\000\004\007\uffe2\001\002\000\004\007\uffe1\001\002" +
    "\000\004\007\u010f\001\002\000\014\004\110\005\112\023" +
    "\111\027\113\046\107\001\002\000\004\007\uffe0\001\002" +
    "\000\036\014\300\015\276\016\303\017\305\020\277\025" +
    "\301\026\272\030\275\031\304\032\271\033\270\034\302" +
    "\035\273\036\266\001\002\000\022\014\231\015\226\017" +
    "\236\020\232\022\234\025\233\034\235\050\225\001\002" +
    "\000\020\014\117\015\116\020\120\025\121\032\115\034" +
    "\122\044\114\001\002\000\022\014\164\015\163\016\166" +
    "\026\161\033\157\034\165\035\162\036\155\001\002\000" +
    "\020\014\117\015\116\020\120\025\121\032\115\034\122" +
    "\044\114\001\002\000\004\013\153\001\002\000\004\013" +
    "\151\001\002\000\004\013\147\001\002\000\004\013\145" +
    "\001\002\000\004\013\143\001\002\000\004\013\141\001" +
    "\002\000\004\013\137\001\002\000\022\011\uffaa\014\uffaa" +
    "\015\uffaa\020\uffaa\025\uffaa\032\uffaa\034\uffaa\044\uffaa\001" +
    "\002\000\022\011\125\014\117\015\116\020\120\025\121" +
    "\032\115\034\122\044\114\001\002\000\006\007\131\053" +
    "\130\001\002\000\022\011\uffab\014\uffab\015\uffab\020\uffab" +
    "\025\uffab\032\uffab\034\uffab\044\uffab\001\002\000\004\007" +
    "\uffa2\001\002\000\004\007\uffa1\001\002\000\004\005\112" +
    "\001\002\000\004\007\133\001\002\000\004\012\134\001" +
    "\002\000\004\027\135\001\002\000\004\011\136\001\002" +
    "\000\004\007\uffa0\001\002\000\004\051\140\001\002\000" +
    "\022\011\uffa9\014\uffa9\015\uffa9\020\uffa9\025\uffa9\032\uffa9" +
    "\034\uffa9\044\uffa9\001\002\000\004\052\142\001\002\000" +
    "\022\011\uffa5\014\uffa5\015\uffa5\020\uffa5\025\uffa5\032\uffa5" +
    "\034\uffa5\044\uffa5\001\002\000\004\052\144\001\002\000" +
    "\022\011\uffa6\014\uffa6\015\uffa6\020\uffa6\025\uffa6\032\uffa6" +
    "\034\uffa6\044\uffa6\001\002\000\004\052\146\001\002\000" +
    "\022\011\uffa8\014\uffa8\015\uffa8\020\uffa8\025\uffa8\032\uffa8" +
    "\034\uffa8\044\uffa8\001\002\000\004\052\150\001\002\000" +
    "\022\011\uffa7\014\uffa7\015\uffa7\020\uffa7\025\uffa7\032\uffa7" +
    "\034\uffa7\044\uffa7\001\002\000\004\006\152\001\002\000" +
    "\022\011\uffa3\014\uffa3\015\uffa3\020\uffa3\025\uffa3\032\uffa3" +
    "\034\uffa3\044\uffa3\001\002\000\004\051\154\001\002\000" +
    "\022\011\uffa4\014\uffa4\015\uffa4\020\uffa4\025\uffa4\032\uffa4" +
    "\034\uffa4\044\uffa4\001\002\000\004\013\214\001\002\000" +
    "\024\011\uffdc\014\uffdc\015\uffdc\016\uffdc\026\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\001\002\000\004\013\212\001" +
    "\002\000\024\011\204\014\164\015\163\016\166\026\161" +
    "\033\157\034\165\035\162\036\155\001\002\000\004\013" +
    "\201\001\002\000\004\013\177\001\002\000\004\013\175" +
    "\001\002\000\004\013\173\001\002\000\004\013\171\001" +
    "\002\000\004\013\167\001\002\000\004\052\170\001\002" +
    "\000\024\011\uffd7\014\uffd7\015\uffd7\016\uffd7\026\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002\000\004\051\172" +
    "\001\002\000\024\011\uffdb\014\uffdb\015\uffdb\016\uffdb\026" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\001\002\000\004" +
    "\052\174\001\002\000\024\011\uffda\014\uffda\015\uffda\016" +
    "\uffda\026\uffda\033\uffda\034\uffda\035\uffda\036\uffda\001\002" +
    "\000\004\052\176\001\002\000\024\011\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\026\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\001\002\000\004\051\200\001\002\000\024\011\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\026\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\001\002\000\004\051\202\001\002\000\024\011" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\026\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\001\002\000\024\011\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\026\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\001\002\000\004\053\205\001\002\000\004\007\206\001" +
    "\002\000\004\012\207\001\002\000\004\005\210\001\002" +
    "\000\004\011\211\001\002\000\004\007\uffde\001\002\000" +
    "\004\051\213\001\002\000\024\011\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\026\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\001" +
    "\002\000\004\051\215\001\002\000\024\011\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\026\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\001\002\000\022\011\217\014\117\015\116\020\120" +
    "\025\121\032\115\034\122\044\114\001\002\000\006\007" +
    "\131\053\130\001\002\000\004\007\221\001\002\000\004" +
    "\012\222\001\002\000\004\023\223\001\002\000\004\011" +
    "\224\001\002\000\004\007\uffac\001\002\000\004\013\264" +
    "\001\002\000\004\013\262\001\002\000\024\011\uffb5\014" +
    "\uffb5\015\uffb5\017\uffb5\020\uffb5\022\uffb5\025\uffb5\034\uffb5" +
    "\050\uffb5\001\002\000\024\011\253\014\231\015\226\017" +
    "\236\020\232\022\234\025\233\034\235\050\225\001\002" +
    "\000\004\013\251\001\002\000\004\013\247\001\002\000" +
    "\004\013\245\001\002\000\004\013\243\001\002\000\004" +
    "\013\241\001\002\000\004\013\237\001\002\000\004\051" +
    "\240\001\002\000\024\011\uffb3\014\uffb3\015\uffb3\017\uffb3" +
    "\020\uffb3\022\uffb3\025\uffb3\034\uffb3\050\uffb3\001\002\000" +
    "\004\051\242\001\002\000\024\011\uffb4\014\uffb4\015\uffb4" +
    "\017\uffb4\020\uffb4\022\uffb4\025\uffb4\034\uffb4\050\uffb4\001" +
    "\002\000\004\051\244\001\002\000\024\011\uffb2\014\uffb2" +
    "\015\uffb2\017\uffb2\020\uffb2\022\uffb2\025\uffb2\034\uffb2\050" +
    "\uffb2\001\002\000\004\052\246\001\002\000\024\011\uffae" +
    "\014\uffae\015\uffae\017\uffae\020\uffae\022\uffae\025\uffae\034" +
    "\uffae\050\uffae\001\002\000\004\052\250\001\002\000\024" +
    "\011\uffaf\014\uffaf\015\uffaf\017\uffaf\020\uffaf\022\uffaf\025" +
    "\uffaf\034\uffaf\050\uffaf\001\002\000\004\052\252\001\002" +
    "\000\024\011\uffb1\014\uffb1\015\uffb1\017\uffb1\020\uffb1\022" +
    "\uffb1\025\uffb1\034\uffb1\050\uffb1\001\002\000\004\053\255" +
    "\001\002\000\024\011\uffb6\014\uffb6\015\uffb6\017\uffb6\020" +
    "\uffb6\022\uffb6\025\uffb6\034\uffb6\050\uffb6\001\002\000\004" +
    "\007\256\001\002\000\004\012\257\001\002\000\004\004" +
    "\260\001\002\000\004\011\261\001\002\000\004\007\uffb7" +
    "\001\002\000\004\052\263\001\002\000\024\011\uffb0\014" +
    "\uffb0\015\uffb0\017\uffb0\020\uffb0\022\uffb0\025\uffb0\034\uffb0" +
    "\050\uffb0\001\002\000\004\051\265\001\002\000\024\011" +
    "\uffad\014\uffad\015\uffad\017\uffad\020\uffad\022\uffad\025\uffad" +
    "\034\uffad\050\uffad\001\002\000\004\013\u010c\001\002\000" +
    "\040\011\340\014\300\015\276\016\303\017\305\020\277" +
    "\025\301\026\272\030\275\031\304\032\271\033\270\034" +
    "\302\035\273\036\266\001\002\000\004\013\336\001\002" +
    "\000\004\013\334\001\002\000\004\013\332\001\002\000" +
    "\004\013\330\001\002\000\040\011\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\025\uffd1\026\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\001\002" +
    "\000\004\013\326\001\002\000\004\013\324\001\002\000" +
    "\004\013\322\001\002\000\004\013\320\001\002\000\004" +
    "\013\316\001\002\000\004\013\314\001\002\000\004\013" +
    "\312\001\002\000\004\013\310\001\002\000\004\013\306" +
    "\001\002\000\004\051\307\001\002\000\040\011\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\025\uffcf\026\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\001\002\000\004\052\311\001\002\000\040\011\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\025\uffc5\026" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\001\002\000\004\052\313\001\002\000\040\011" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\025\uffc9" +
    "\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\001\002\000\004\051\315\001\002\000\040" +
    "\011\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\025" +
    "\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\001\002\000\004\052\317\001\002\000" +
    "\040\011\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\025\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\001\002\000\004\052\321\001\002" +
    "\000\040\011\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\001\002\000\004\052\323\001" +
    "\002\000\040\011\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\001\002\000\004\052\325" +
    "\001\002\000\040\011\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002\000\004\052" +
    "\327\001\002\000\040\011\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\001\002\000\004" +
    "\051\331\001\002\000\040\011\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\001\002\000" +
    "\004\051\333\001\002\000\040\011\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\025\uffc8\026\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\001\002" +
    "\000\004\006\335\001\002\000\040\011\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\025\uffc3\026\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\001" +
    "\002\000\004\051\337\001\002\000\040\011\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\025\uffca\026\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\001\002\000\004\007\344\001\002\000\040\011\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\025\uffd2\026\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\001\002\000\004\007\uffc1\001\002\000\004\007\uffbf" +
    "\001\002\000\006\040\352\046\351\001\002\000\004\007" +
    "\350\001\002\000\004\007\uffc0\001\002\000\004\007\uffc2" +
    "\001\002\000\010\012\353\040\352\046\351\001\002\000" +
    "\004\032\365\001\002\000\004\011\356\001\002\000\004" +
    "\046\354\001\002\000\004\011\355\001\002\000\004\007" +
    "\uffd3\001\002\000\004\053\357\001\002\000\004\007\360" +
    "\001\002\000\004\012\361\001\002\000\004\040\362\001" +
    "\002\000\004\011\363\001\002\000\004\007\uffb8\001\002" +
    "\000\004\011\370\001\002\000\004\013\366\001\002\000" +
    "\004\006\367\001\002\000\004\011\uffbd\001\002\000\004" +
    "\007\372\001\002\000\004\007\u0107\001\002\000\004\021" +
    "\374\001\002\000\004\007\uffbb\001\002\000\004\044\376" +
    "\001\002\000\004\011\u0101\001\002\000\004\013\377\001" +
    "\002\000\004\051\u0100\001\002\000\004\011\uffb9\001\002" +
    "\000\004\053\u0102\001\002\000\004\007\u0103\001\002\000" +
    "\004\012\u0104\001\002\000\004\021\u0105\001\002\000\004" +
    "\011\u0106\001\002\000\004\007\uffba\001\002\000\006\012" +
    "\u0109\021\374\001\002\000\004\007\uffbc\001\002\000\004" +
    "\043\u010a\001\002\000\004\011\u010b\001\002\000\004\007" +
    "\uffbe\001\002\000\004\051\u010d\001\002\000\040\011\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\025\uffc6\026" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\001\002\000\004\007\uffe5\001\002\000\016\004" +
    "\110\005\112\012\u0110\023\111\027\113\046\107\001\002" +
    "\000\004\042\u0111\001\002\000\004\011\u0112\001\002\000" +
    "\004\007\uffef\001\002\000\004\051\u0114\001\002\000\022" +
    "\010\uffe6\011\uffe6\014\uffe6\015\uffe6\020\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\001\002\000\004\052\u0116\001\002\000\022" +
    "\010\uffe8\011\uffe8\014\uffe8\015\uffe8\020\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\001\002\000\004\052\u0118\001\002\000\022" +
    "\010\uffe9\011\uffe9\014\uffe9\015\uffe9\020\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\001\002\000\004\052\u011a\001\002\000\022" +
    "\010\uffeb\011\uffeb\014\uffeb\015\uffeb\020\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\001\002\000\004\052\u011c\001\002\000\022" +
    "\010\uffea\011\uffea\014\uffea\015\uffea\020\uffea\024\uffea\025" +
    "\uffea\026\uffea\001\002\000\004\051\u011e\001\002\000\022" +
    "\010\uffec\011\uffec\014\uffec\015\uffec\020\uffec\024\uffec\025" +
    "\uffec\026\uffec\001\002\000\004\051\u0120\001\002\000\022" +
    "\010\uffe7\011\uffe7\014\uffe7\015\uffe7\020\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\012\002\007\003\004\043\003\045\005\001" +
    "\001\000\010\003\020\004\021\044\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\027\006\034" +
    "\001\001\000\004\006\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\053\010\054\001\001\000\002\001\001\000\004\010" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\073\012\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\075\001\001\000\020\013\077\014" +
    "\076\017\101\024\103\025\102\036\105\042\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\u010d\014\076\017\101\025\102\036\105\042\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\266" +
    "\021\273\001\001\000\006\026\227\035\226\001\001\000" +
    "\006\037\215\040\122\001\001\000\006\015\157\016\155" +
    "\001\001\000\006\037\123\040\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\125\001\001\000\006\014\126" +
    "\041\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\125" +
    "\001\001\000\006\014\126\041\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\344" +
    "\023\341\027\345\034\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\346\027\345\034\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\363\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\370\032\372\001\001\000" +
    "\004\032\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right) +", Linea: "+(s.left+1)+ " no esperado");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public NodoGxml regresar_raiz(){
        return RCCSS;
    }
 /*codig de usuario */
 String total = "";
 public NodoGxml RCCSS = null;
 //public ArrayList<Nodo> e = new ArrayList<Nodo>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGxml$actions {


    public String estado="";

  private final SintacticoGxml parser;

  /** Constructor */
  CUP$SintacticoGxml$actions(SintacticoGxml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action_part00000000(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGxml$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGxml$parser.done_parsing();
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= Ini 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoGxml e1 = (NodoGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Start",35, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Ini ::= Cuerpo_Ini Cuerpo_GEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Ini",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cuerpo_Ini ::= Cuerpo_Ini ES_IMP 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Ini",33, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cuerpo_Ini ::= ES_IMP 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Ini",33, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Cuerpo_GEN ::= Cuerpo_GEN ES_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_GEN",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cuerpo_GEN ::= ES_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_GEN",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ES_IMP ::= MAY RIMP MEN TEXT MAY DIA RIMP MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_IMP",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ES_VEN ::= MAY RVEN EST_VEN_COM MEN Cuerpo_Vent MAY DIA RVEN MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_VEN",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EST_VEN_COM ::= EST_VEN_COM EST_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN_COM",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EST_VEN_COM ::= EST_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN_COM",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EST_VEN ::= RID IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EST_VEN ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EST_VEN ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EST_VEN ::= RAIN IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EST_VEN ::= RAFI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Cuerpo_Vent ::= Cuerpo_Vent ES_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Vent",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Cuerpo_Vent ::= ES_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Vent",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ES_CON ::= MAY RCON EST_CON_COM MEN Cuerpo_CONTE MAY DIA RCON MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_CON",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EST_CON_COM ::= EST_CON_COM EST_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON_COM",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EST_CON_COM ::= EST_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON_COM",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EST_CON ::= RID IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EST_CON ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EST_CON ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EST_CON ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EST_CON ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EST_CON ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EST_CON ::= RBOR IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Cuerpo_CONTE ::= Cuerpo_CONTE Tipo_Conte 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CONTE",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Cuerpo_CONTE ::= Tipo_Conte 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CONTE",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo_Conte ::= ES_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo_Conte ::= ES_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Tipo_Conte ::= ES_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tipo_Conte ::= ES_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipo_Conte ::= ES_ENV 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ES_TEX ::= MAY RTEX EST_TEX_COM MEN TEXT MAY DIA RTEX MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_TEX",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EST_TEX_COM ::= EST_TEX_COM EST_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX_COM",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EST_TEX_COM ::= EST_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX_COM",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EST_TEX ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EST_TEX ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EST_TEX ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EST_TEX ::= RFUE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EST_TEX ::= RTAM IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EST_TEX ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EST_TEX ::= RNEG IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EST_TEX ::= RCUR IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ES_CTR ::= MAY RCTR EST_CTR_COM MEN Cuerpo_CTR MAY DIA RCTR MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_CTR",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EST_CTR_COM ::= EST_CTR_COM EST_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR_COM",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EST_CTR_COM ::= EST_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR_COM",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EST_CTR ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EST_CTR ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EST_CTR ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EST_CTR ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EST_CTR ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EST_CTR ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EST_CTR ::= RFUE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EST_CTR ::= RTAM IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EST_CTR ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EST_CTR ::= RNEG IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EST_CTR ::= RCUR IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EST_CTR ::= RMAX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EST_CTR ::= RMIN IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EST_CTR ::= RACI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Cuerpo_CTR ::= Cuerpo_CTR Tipos_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CTR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Cuerpo_CTR ::= Tipos_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CTR",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipos_CTR ::= ES_LDA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipos_CTR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipos_CTR ::= ES_DEF 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipos_CTR",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ES_LDA ::= MAY RCTR EST_LDA_COM MEN Cuerpo_LDA MAY DIA RLDA MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_LDA",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EST_LDA_COM ::= RACI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_LDA_COM",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Cuerpo_LDA ::= Cuerpo_LDA ES_DA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_LDA",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Cuerpo_LDA ::= ES_DA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_LDA",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ES_DA ::= MAY RDAT EST_DA_COM MEN TEXT MAY DIA RDAT MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_DA",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EST_DA_COM ::= REFE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_DA_COM",25, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ES_DEF ::= MAY RDEF MEN TEXT MAY DIA RDEF MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_DEF",26, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ES_MUL ::= MAY RMUL EST_MUL_COM MEN TEXT MAY DIA RMUL MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_MUL",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EST_MUL_COM ::= EST_MUL_COM EST_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL_COM",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EST_MUL_COM ::= EST_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL_COM",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EST_MUL ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EST_MUL ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EST_MUL ::= RPAT IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EST_MUL ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EST_MUL ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EST_MUL ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EST_MUL ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EST_MUL ::= RAUT IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ES_BOT ::= MAY RBOT EST_BOT_COM MEN Cuerpo_BOT MAY DIA RBOT MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_BOT",28, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EST_BOT_COM ::= EST_BOT_COM EST_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT_COM",29, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EST_BOT_COM ::= EST_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT_COM",29, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EST_BOT ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EST_BOT ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EST_BOT ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EST_BOT ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EST_BOT ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EST_BOT ::= REFE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EST_BOT ::= RACI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Cuerpo_BOT ::= ES_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_BOT",31, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Cuerpo_BOT ::= TEXT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_BOT",31, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ES_ENV ::= MAY RENV EST_BOT_COM MEN Cuerpo_BOT MAY DIA RENV MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_ENV",32, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGxml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGxml$do_action_part00000000(
                               CUP$SintacticoGxml$act_num,
                               CUP$SintacticoGxml$parser,
                               CUP$SintacticoGxml$stack,
                               CUP$SintacticoGxml$top);
    }
}

}
