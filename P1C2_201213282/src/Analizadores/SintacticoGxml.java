
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import ComponentGxml.*;
import Principal.NodoError;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoGxml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoGxml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoGxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoGxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\047\003\000\002\002" +
    "\004\000\002\002\003\000\002\035\004\000\002\035\003" +
    "\000\002\036\004\000\002\036\003\000\002\040\003\000" +
    "\002\040\003\000\002\003\011\000\002\037\004\000\002" +
    "\037\003\000\002\050\002\000\002\004\014\000\002\041" +
    "\004\000\002\041\003\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\005\004\000\002\005\003\000\002\051\002\000\002" +
    "\006\014\000\002\043\004\000\002\043\003\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\016\004\000\002\016\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\052\002\000\002\010\014\000\002\045\004" +
    "\000\002\045\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\011" +
    "\013\000\002\012\004\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\014\004\000\002\014\003\000\002\015\003\000" +
    "\002\015\003\000\002\021\005\000\002\022\013\000\002" +
    "\022\010\000\002\023\004\000\002\023\003\000\002\024" +
    "\005\000\002\053\002\000\002\025\014\000\002\025\010" +
    "\000\002\054\002\000\002\026\013\000\002\017\013\000" +
    "\002\020\004\000\002\020\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\030\013\000\002\031\004\000\002\031\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\033\003\000\002\033\003\000\002\034\013" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\004\013\010\001\002\000\004\013\010\001" +
    "\002\000\006\002\ufffa\013\ufffa\001\002\000\004\013\ufffc" +
    "\001\002\000\004\002\u0132\001\002\000\006\043\015\045" +
    "\u012c\001\002\000\006\002\ufffe\013\014\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffb\013\ufffb\001\002\000" +
    "\004\043\015\001\002\000\014\014\022\023\017\032\024" +
    "\051\020\053\021\001\002\000\016\014\022\015\040\023" +
    "\017\032\024\051\020\053\021\001\002\000\004\016\035" +
    "\001\002\000\004\016\033\001\002\000\004\016\031\001" +
    "\002\000\004\016\027\001\002\000\016\014\ufff1\015\ufff1" +
    "\023\ufff1\032\ufff1\051\ufff1\053\ufff1\001\002\000\004\016" +
    "\025\001\002\000\004\055\026\001\002\000\016\014\uffee" +
    "\015\uffee\023\uffee\032\uffee\051\uffee\053\uffee\001\002\000" +
    "\004\055\030\001\002\000\016\014\ufff0\015\ufff0\023\ufff0" +
    "\032\ufff0\051\ufff0\053\ufff0\001\002\000\004\006\032\001" +
    "\002\000\016\014\uffed\015\uffed\023\uffed\032\uffed\051\uffed" +
    "\053\uffed\001\002\000\004\006\034\001\002\000\016\014" +
    "\uffec\015\uffec\023\uffec\032\uffec\051\uffec\053\uffec\001\002" +
    "\000\004\055\036\001\002\000\016\014\uffef\015\uffef\023" +
    "\uffef\032\uffef\051\uffef\053\uffef\001\002\000\016\014\ufff2" +
    "\015\ufff2\023\ufff2\032\ufff2\051\ufff2\053\ufff2\001\002\000" +
    "\004\013\ufff4\001\002\000\004\013\042\001\002\000\004" +
    "\046\047\001\002\000\004\013\045\001\002\000\004\013" +
    "\uffea\001\002\000\006\020\050\046\047\001\002\000\004" +
    "\013\uffeb\001\002\000\020\014\055\017\057\021\056\024" +
    "\060\030\062\031\061\032\053\001\002\000\004\043\051" +
    "\001\002\000\004\015\052\001\002\000\006\002\ufff3\013" +
    "\ufff3\001\002\000\004\016\u012a\001\002\000\022\014\uffe6" +
    "\015\uffe6\017\uffe6\021\uffe6\024\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\001\002\000\004\016\u0128\001\002\000\004\016\u0126" +
    "\001\002\000\004\016\u0124\001\002\000\004\016\u0122\001" +
    "\002\000\004\016\u0120\001\002\000\004\016\u011e\001\002" +
    "\000\022\014\055\015\064\017\057\021\056\024\060\030" +
    "\062\031\061\032\053\001\002\000\004\013\uffe9\001\002" +
    "\000\022\014\uffe7\015\uffe7\017\uffe7\021\uffe7\024\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\001\002\000\004\013\075\001\002" +
    "\000\004\013\uffdc\001\002\000\004\013\uffdd\001\002\000" +
    "\004\013\uffd8\001\002\000\004\013\uffdb\001\002\000\004" +
    "\013\uffda\001\002\000\004\013\u011a\001\002\000\014\004" +
    "\100\005\102\027\101\033\103\052\077\001\002\000\004" +
    "\013\uffd9\001\002\000\036\017\275\021\273\022\300\023" +
    "\302\024\274\031\276\032\267\034\272\035\301\036\265" +
    "\037\266\040\277\041\270\042\263\001\002\000\022\017" +
    "\226\021\223\023\233\024\227\026\231\031\230\040\232" +
    "\054\222\001\002\000\020\017\107\021\106\024\110\031" +
    "\111\036\105\040\112\050\104\001\002\000\022\017\156" +
    "\021\155\022\160\032\153\037\151\040\157\041\154\042" +
    "\147\001\002\000\020\017\107\021\106\024\110\031\111" +
    "\036\105\040\112\050\104\001\002\000\004\016\145\001" +
    "\002\000\004\016\143\001\002\000\004\016\141\001\002" +
    "\000\004\016\137\001\002\000\004\016\135\001\002\000" +
    "\004\016\133\001\002\000\004\016\131\001\002\000\022" +
    "\015\uff9e\017\uff9e\021\uff9e\024\uff9e\031\uff9e\036\uff9e\040" +
    "\uff9e\050\uff9e\001\002\000\022\015\115\017\107\021\106" +
    "\024\110\031\111\036\105\040\112\050\104\001\002\000" +
    "\006\013\122\057\121\001\002\000\022\015\uff9f\017\uff9f" +
    "\021\uff9f\024\uff9f\031\uff9f\036\uff9f\040\uff9f\050\uff9f\001" +
    "\002\000\004\013\uff96\001\002\000\006\013\uff95\057\130" +
    "\001\002\000\006\013\ufff5\057\ufff5\001\002\000\004\005" +
    "\102\001\002\000\004\013\124\001\002\000\004\020\125" +
    "\001\002\000\004\033\126\001\002\000\004\015\127\001" +
    "\002\000\004\013\uff94\001\002\000\006\013\ufff6\057\ufff6" +
    "\001\002\000\004\055\132\001\002\000\022\015\uff9d\017" +
    "\uff9d\021\uff9d\024\uff9d\031\uff9d\036\uff9d\040\uff9d\050\uff9d" +
    "\001\002\000\004\056\134\001\002\000\022\015\uff99\017" +
    "\uff99\021\uff99\024\uff99\031\uff99\036\uff99\040\uff99\050\uff99" +
    "\001\002\000\004\056\136\001\002\000\022\015\uff9a\017" +
    "\uff9a\021\uff9a\024\uff9a\031\uff9a\036\uff9a\040\uff9a\050\uff9a" +
    "\001\002\000\004\056\140\001\002\000\022\015\uff9c\017" +
    "\uff9c\021\uff9c\024\uff9c\031\uff9c\036\uff9c\040\uff9c\050\uff9c" +
    "\001\002\000\004\056\142\001\002\000\022\015\uff9b\017" +
    "\uff9b\021\uff9b\024\uff9b\031\uff9b\036\uff9b\040\uff9b\050\uff9b" +
    "\001\002\000\004\006\144\001\002\000\022\015\uff97\017" +
    "\uff97\021\uff97\024\uff97\031\uff97\036\uff97\040\uff97\050\uff97" +
    "\001\002\000\004\055\146\001\002\000\022\015\uff98\017" +
    "\uff98\021\uff98\024\uff98\031\uff98\036\uff98\040\uff98\050\uff98" +
    "\001\002\000\004\016\211\001\002\000\024\015\uffd4\017" +
    "\uffd4\021\uffd4\022\uffd4\032\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\001\002\000\004\016\207\001\002\000\024\015" +
    "\200\017\156\021\155\022\160\032\153\037\151\040\157" +
    "\041\154\042\147\001\002\000\004\016\175\001\002\000" +
    "\004\016\171\001\002\000\004\016\167\001\002\000\004" +
    "\016\165\001\002\000\004\016\163\001\002\000\004\016" +
    "\161\001\002\000\004\056\162\001\002\000\024\015\uffcf" +
    "\017\uffcf\021\uffcf\022\uffcf\032\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\001\002\000\004\055\164\001\002\000\024" +
    "\015\uffd3\017\uffd3\021\uffd3\022\uffd3\032\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\001\002\000\004\056\166\001\002" +
    "\000\024\015\uffd2\017\uffd2\021\uffd2\022\uffd2\032\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\004\056\170" +
    "\001\002\000\024\015\uffd1\017\uffd1\021\uffd1\022\uffd1\032" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000\006" +
    "\010\174\011\172\001\002\000\050\014\ufff8\015\ufff8\017" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\054\ufff8\001\002\000\024\015\uffcd" +
    "\017\uffcd\021\uffcd\022\uffcd\032\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\001\002\000\050\014\ufff9\015\ufff9\017\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\054\ufff9\001\002\000\004\055\176\001" +
    "\002\000\024\015\uffce\017\uffce\021\uffce\022\uffce\032\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\001\002\000\024\015" +
    "\uffd5\017\uffd5\021\uffd5\022\uffd5\032\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\001\002\000\004\057\121\001\002\000" +
    "\006\013\uffd7\057\130\001\002\000\004\013\203\001\002" +
    "\000\004\020\204\001\002\000\004\005\205\001\002\000" +
    "\004\015\206\001\002\000\004\013\uffd6\001\002\000\004" +
    "\055\210\001\002\000\024\015\uffd0\017\uffd0\021\uffd0\022" +
    "\uffd0\032\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\001\002" +
    "\000\006\010\174\011\172\001\002\000\024\015\uffcc\017" +
    "\uffcc\021\uffcc\022\uffcc\032\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\001\002\000\022\015\214\017\107\021\106\024" +
    "\110\031\111\036\105\040\112\050\104\001\002\000\006" +
    "\013\122\057\121\001\002\000\004\013\216\001\002\000" +
    "\004\020\217\001\002\000\004\027\220\001\002\000\004" +
    "\015\221\001\002\000\004\013\uffa0\001\002\000\004\016" +
    "\261\001\002\000\004\016\257\001\002\000\024\015\uffa9" +
    "\017\uffa9\021\uffa9\023\uffa9\024\uffa9\026\uffa9\031\uffa9\040" +
    "\uffa9\054\uffa9\001\002\000\024\015\250\017\226\021\223" +
    "\023\233\024\227\026\231\031\230\040\232\054\222\001" +
    "\002\000\004\016\246\001\002\000\004\016\244\001\002" +
    "\000\004\016\242\001\002\000\004\016\240\001\002\000" +
    "\004\016\236\001\002\000\004\016\234\001\002\000\004" +
    "\055\235\001\002\000\024\015\uffa7\017\uffa7\021\uffa7\023" +
    "\uffa7\024\uffa7\026\uffa7\031\uffa7\040\uffa7\054\uffa7\001\002" +
    "\000\004\055\237\001\002\000\024\015\uffa8\017\uffa8\021" +
    "\uffa8\023\uffa8\024\uffa8\026\uffa8\031\uffa8\040\uffa8\054\uffa8" +
    "\001\002\000\004\055\241\001\002\000\024\015\uffa6\017" +
    "\uffa6\021\uffa6\023\uffa6\024\uffa6\026\uffa6\031\uffa6\040\uffa6" +
    "\054\uffa6\001\002\000\004\056\243\001\002\000\024\015" +
    "\uffa2\017\uffa2\021\uffa2\023\uffa2\024\uffa2\026\uffa2\031\uffa2" +
    "\040\uffa2\054\uffa2\001\002\000\004\056\245\001\002\000" +
    "\024\015\uffa3\017\uffa3\021\uffa3\023\uffa3\024\uffa3\026\uffa3" +
    "\031\uffa3\040\uffa3\054\uffa3\001\002\000\004\056\247\001" +
    "\002\000\024\015\uffa5\017\uffa5\021\uffa5\023\uffa5\024\uffa5" +
    "\026\uffa5\031\uffa5\040\uffa5\054\uffa5\001\002\000\004\057" +
    "\121\001\002\000\024\015\uffaa\017\uffaa\021\uffaa\023\uffaa" +
    "\024\uffaa\026\uffaa\031\uffaa\040\uffaa\054\uffaa\001\002\000" +
    "\006\013\253\057\130\001\002\000\004\020\254\001\002" +
    "\000\004\004\255\001\002\000\004\015\256\001\002\000" +
    "\004\013\uffab\001\002\000\004\056\260\001\002\000\024" +
    "\015\uffa4\017\uffa4\021\uffa4\023\uffa4\024\uffa4\026\uffa4\031" +
    "\uffa4\040\uffa4\054\uffa4\001\002\000\006\010\174\011\172" +
    "\001\002\000\024\015\uffa1\017\uffa1\021\uffa1\023\uffa1\024" +
    "\uffa1\026\uffa1\031\uffa1\040\uffa1\054\uffa1\001\002\000\004" +
    "\016\u0117\001\002\000\040\015\335\017\275\021\273\022" +
    "\300\023\302\024\274\031\276\032\267\034\272\035\301" +
    "\036\265\037\266\040\277\041\270\042\263\001\002\000" +
    "\004\016\333\001\002\000\004\016\331\001\002\000\004" +
    "\016\327\001\002\000\004\016\325\001\002\000\040\015" +
    "\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\031\uffc9" +
    "\032\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\001\002\000\004\016\323\001\002\000\004" +
    "\016\321\001\002\000\004\016\317\001\002\000\004\016" +
    "\315\001\002\000\004\016\313\001\002\000\004\016\311" +
    "\001\002\000\004\016\307\001\002\000\004\016\305\001" +
    "\002\000\004\016\303\001\002\000\004\055\304\001\002" +
    "\000\040\015\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\001\002\000\004\056\306\001" +
    "\002\000\040\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\001\002\000\004\056\310" +
    "\001\002\000\040\015\uffc1\017\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\001\002\000\004\055" +
    "\312\001\002\000\040\015\uffc8\017\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\001\002\000\004" +
    "\056\314\001\002\000\040\015\uffc3\017\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\001\002\000" +
    "\004\056\316\001\002\000\040\015\uffc6\017\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\031\uffc6\032\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\001\002" +
    "\000\004\056\320\001\002\000\040\015\uffc4\017\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\031\uffc4\032\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\001" +
    "\002\000\004\056\322\001\002\000\040\015\uffc5\017\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\031\uffc5\032\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\001\002\000\004\056\324\001\002\000\040\015\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\031\uffbc\032\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\001\002\000\006\010\174\011\172\001\002\000\040" +
    "\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\031" +
    "\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\001\002\000\004\055\330\001\002\000" +
    "\040\015\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\001\002\000\004\055\332\001\002" +
    "\000\040\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\001\002\000\004\006\334\001" +
    "\002\000\040\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\001\002\000\004\013\342" +
    "\001\002\000\040\015\uffca\017\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\031\uffca\032\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\001\002\000\004\013" +
    "\uffb9\001\002\000\004\013\uffb7\001\002\000\004\013\u0113" +
    "\001\002\000\006\044\344\047\345\001\002\000\004\013" +
    "\uffb8\001\002\000\004\015\u010b\001\002\000\006\015\346" +
    "\036\350\001\002\000\004\013\355\001\002\000\004\013" +
    "\uffb6\001\002\000\004\016\351\001\002\000\004\006\352" +
    "\001\002\000\004\015\353\001\002\000\004\013\355\001" +
    "\002\000\004\013\u0101\001\002\000\004\025\357\001\002" +
    "\000\004\013\uffb2\001\002\000\006\015\360\050\362\001" +
    "\002\000\004\057\121\001\002\000\004\013\uffb1\001\002" +
    "\000\004\016\363\001\002\000\004\055\364\001\002\000" +
    "\004\015\365\001\002\000\004\057\121\001\002\000\006" +
    "\013\uffb0\057\130\001\002\000\004\013\370\001\002\000" +
    "\004\020\371\001\002\000\004\025\372\001\002\000\004" +
    "\015\373\001\002\000\004\013\uffaf\001\002\000\006\013" +
    "\375\057\130\001\002\000\004\020\376\001\002\000\004" +
    "\025\377\001\002\000\004\015\u0100\001\002\000\004\013" +
    "\uffae\001\002\000\006\020\u0103\025\357\001\002\000\004" +
    "\013\uffb3\001\002\000\004\047\u0104\001\002\000\004\015" +
    "\u0105\001\002\000\004\013\uffb5\001\002\000\004\013\u0107" +
    "\001\002\000\006\020\u0108\025\357\001\002\000\004\047" +
    "\u0109\001\002\000\004\015\u010a\001\002\000\004\013\uffb4" +
    "\001\002\000\004\057\121\001\002\000\006\013\uffad\057" +
    "\130\001\002\000\004\013\u010e\001\002\000\004\020\u010f" +
    "\001\002\000\004\044\u0110\001\002\000\004\015\u0111\001" +
    "\002\000\004\013\uffac\001\002\000\004\013\uffba\001\002" +
    "\000\010\020\u0114\044\344\047\345\001\002\000\004\052" +
    "\u0115\001\002\000\004\015\u0116\001\002\000\004\013\uffcb" +
    "\001\002\000\006\010\174\011\172\001\002\000\040\015" +
    "\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\031\uffbe" +
    "\032\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\001\002\000\004\013\uffde\001\002\000\016" +
    "\004\100\005\102\020\u011b\027\101\033\103\052\077\001" +
    "\002\000\004\046\u011c\001\002\000\004\015\u011d\001\002" +
    "\000\004\013\uffe8\001\002\000\006\010\174\011\172\001" +
    "\002\000\022\014\uffdf\015\uffdf\017\uffdf\021\uffdf\024\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\001\002\000\004\056\u0121\001" +
    "\002\000\022\014\uffe1\015\uffe1\017\uffe1\021\uffe1\024\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\001\002\000\004\056\u0123\001" +
    "\002\000\022\014\uffe2\015\uffe2\017\uffe2\021\uffe2\024\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\001\002\000\004\056\u0125\001" +
    "\002\000\022\014\uffe4\015\uffe4\017\uffe4\021\uffe4\024\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\001\002\000\004\056\u0127\001" +
    "\002\000\022\014\uffe3\015\uffe3\017\uffe3\021\uffe3\024\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\001\002\000\004\055\u0129\001" +
    "\002\000\022\014\uffe5\015\uffe5\017\uffe5\021\uffe5\024\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\001\002\000\004\055\u012b\001" +
    "\002\000\022\014\uffe0\015\uffe0\017\uffe0\021\uffe0\024\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\001\002\000\004\015\u012d\001" +
    "\002\000\004\057\121\001\002\000\006\013\u012f\057\130" +
    "\001\002\000\004\045\u0130\001\002\000\004\015\u0131\001" +
    "\002\000\004\013\ufff7\001\002\000\004\002\001\001\002" +
    "\000\004\013\ufffd\001\002\000\006\002\uffff\013\014\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\016\002\011\003\005\004\004\035\003\036" +
    "\010\047\006\001\001\000\010\003\u0132\004\004\036\u0133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\015\042\022\001\001\000\004\042\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\040\001\001\000\006\005\042\006\043" +
    "\001\001\000\002\001\001\000\004\006\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\062\044\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\064\001\001\000\004\051\065\001\001\000\002\001" +
    "\001\000\020\007\067\010\066\011\071\016\073\017\072" +
    "\030\075\034\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\u0118\010\066\011\071\017\072\030\075\034" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\263\013\270\001\001\000\006\020\224\027\223\001" +
    "\001\000\006\031\212\032\112\001\001\000\006\045\151" +
    "\046\147\001\001\000\006\031\113\032\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\115\001\001\000\010" +
    "\010\116\033\122\037\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\200\001\001\000\004\052" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\211\001\001\000\002" +
    "\001\001\000\004\032\115\001\001\000\010\010\116\033" +
    "\214\037\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\340\015\336\021\342\026\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\u0111\021" +
    "\342\026\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\346\001\001\000\006\023" +
    "\u0105\024\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\353\024" +
    "\355\001\001\000\004\024\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\360\001\001\000\004\037" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\365\001\001\000" +
    "\004\053\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u010b" +
    "\001\001\000\004\054\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u0117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\012\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoGxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoGxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoGxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right+1) +", Linea: "+(s.left+1)+ " no esperado"+s.sym);
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        /*Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;*/
    }
    public NodoGxml regresar_raiz(){
        return RCCSS;
    }
 /*codig de usuario */
 String total = "";
 public NodoGxml RCCSS = new NodoGxml();
 private Boolean texto_ini = false;
 public ArrayList<NodoError> errores = new ArrayList();
 //public ArrayList<Nodo> e = new ArrayList<Nodo>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoGxml$actions {


    public String estado="";

  private final SintacticoGxml parser;

  /** Constructor */
  CUP$SintacticoGxml$actions(SintacticoGxml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action_part00000000(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoGxml$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoGxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoGxml$parser.done_parsing();
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= Ini 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoGxml e1 = (NodoGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Start",37, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Ini ::= Cuerpo_Ini Cuerpo_GEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Ini",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Ini ::= Cuerpo_GEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Ini",0, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cuerpo_Ini ::= Cuerpo_Ini ES_IMP 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Ini",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Cuerpo_Ini ::= ES_IMP 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Ini",27, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cuerpo_GEN ::= Cuerpo_GEN ES_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_GEN",28, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Cuerpo_GEN ::= ES_VEN 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_GEN",28, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BOL ::= RVER 
            {
              String RESULT =null;
		RESULT ="verdadero";
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("BOL",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BOL ::= RFAL 
            {
              String RESULT =null;
		RESULT ="falso";
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("BOL",30, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ES_IMP ::= MAY RIMP MEN SUM_TEXT MAY RIMP MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_IMP",1, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUM_TEXT ::= SUM_TEXT TEXT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		if(texto_ini){texto_ini=false; RESULT=e1.toString()+e2.toString();}else{RESULT=e1.toString()+" "+e2.toString(); }
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("SUM_TEXT",29, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUM_TEXT ::= TEXT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		RESULT=e1.toString(); texto_ini=true;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("SUM_TEXT",29, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
Ventana v = new Ventana(); v.Imprimir_NodoS(e1); v.Analizar_Attributos(e1,errores); RCCSS.Ventanas.add(v);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES_VEN ::= MAY RVEN EST_VEN_COM MEN NT$0 Cuerpo_Vent MAY DIA RVEN MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).value;
		 System.out.println("llego a final ventana");
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_VEN",2, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EST_VEN_COM ::= EST_VEN_COM EST_VEN 
            {
              NodoSGxml RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		NodoSGxml e2 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		e2.listas.add(e1); RESULT=e2;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN_COM",31, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EST_VEN_COM ::= EST_VEN 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		NodoSGxml nuevo = new NodoSGxml("raiz"); nuevo.listas.add(e1);RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN_COM",31, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EST_VEN ::= RID IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="ID"; 		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",32, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EST_VEN ::= RTIP IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Tipo"; 	nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",32, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EST_VEN ::= RCOL IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Color"; 	nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",32, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EST_VEN ::= RAIN IGU MORE 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Inicial"; nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",32, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EST_VEN ::= RAFI IGU MORE 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Final"; 	nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_VEN",32, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Cuerpo_Vent ::= Cuerpo_Vent ES_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Vent",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Cuerpo_Vent ::= ES_CON 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_Vent",3, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
Contenedor v = new Contenedor(); v.Imprimir_NodoS(e1); v.Analizar_Attributos(e1,errores); Ventana actual=RCCSS.Ventanas.get(RCCSS.Ventanas.size()-1); actual.contenedores.add(v);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ES_CON ::= MAY RCON EST_CON_COM MEN NT$1 Cuerpo_CONTE MAY DIA RCON MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).value;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_CON",4, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EST_CON_COM ::= EST_CON_COM EST_CON 
            {
              NodoSGxml RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		NodoSGxml e2 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		e2.listas.add(e1); RESULT=e2;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON_COM",33, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EST_CON_COM ::= EST_CON 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		NodoSGxml nuevo = new NodoSGxml("raiz"); nuevo.listas.add(e1);RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON_COM",33, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EST_CON ::= RID IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="ID"; 			nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EST_CON ::= RX IGU NUM 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="X"; 			nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EST_CON ::= RY IGU NUM 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Y"; 			nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EST_CON ::= RALT IGU NUM 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Alto"; 		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EST_CON ::= RANC IGU NUM 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Ancho"; 		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EST_CON ::= RCOL IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Color"; 		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EST_CON ::= RBOR IGU BOL 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Borde"; 		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CON",34, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Cuerpo_CONTE ::= Cuerpo_CONTE Tipo_Conte 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CONTE",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Cuerpo_CONTE ::= Tipo_Conte 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CONTE",12, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo_Conte ::= ES_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_Conte ::= ES_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_Conte ::= ES_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_Conte ::= ES_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_Conte ::= ES_ENV 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipo_Conte",5, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
Texto v = new Texto(); v.Analizar_Attributos(e1,errores,e2); Ventana actualv=RCCSS.Ventanas.get(RCCSS.Ventanas.size()-1); Contenedor actual =actualv.contenedores.get(actualv.contenedores.size()-1); actual.Textos.add(v);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ES_TEX ::= MAY RTEX EST_TEX_COM MEN SUM_TEXT NT$2 MAY DIA RTEX MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_TEX",6, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EST_TEX_COM ::= EST_TEX_COM EST_TEX 
            {
              NodoSGxml RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).right;
		NodoSGxml e2 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		e2.listas.add(e1); RESULT=e2;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX_COM",35, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EST_TEX_COM ::= EST_TEX 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		NodoSGxml e1 = (NodoSGxml)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		NodoSGxml nuevo = new NodoSGxml("raiz"); nuevo.listas.add(e1);RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX_COM",35, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EST_TEX ::= RNOM IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Nombre"; 		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EST_TEX ::= RX IGU NUM 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="X"; 			nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EST_TEX ::= RY IGU NUM 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="Y"; 			nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EST_TEX ::= RFUE IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="fuente"; 		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EST_TEX ::= RTAM IGU NUM 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="tam";			nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EST_TEX ::= RCOL IGU CAD 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="color";		nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EST_TEX ::= RNEG IGU BOL 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="negrita"; 	nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EST_TEX ::= RCUR IGU BOL 
            {
              NodoSGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
		 NodoSGxml nuevo = new NodoSGxml(); nuevo.tipo="cursiva"; 	nuevo.val =e1.toString(); nuevo.linea=e1left+1; nuevo.columna=e1right+1; RESULT=nuevo;
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_TEX",36, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ES_CTR ::= MAY RCTR EST_CTR_COM MEN Cuerpo_CTR MAY DIA RCTR MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_CTR",7, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EST_CTR_COM ::= EST_CTR_COM EST_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR_COM",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EST_CTR_COM ::= EST_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR_COM",8, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EST_CTR ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EST_CTR ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EST_CTR ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EST_CTR ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EST_CTR ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EST_CTR ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EST_CTR ::= RFUE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EST_CTR ::= RTAM IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EST_CTR ::= RCOL IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EST_CTR ::= RNEG IGU BOL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EST_CTR ::= RCUR IGU BOL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EST_CTR ::= RMAX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EST_CTR ::= RMIN IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EST_CTR ::= RACI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_CTR",9, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Cuerpo_CTR ::= Cuerpo_CTR Tipos_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CTR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Cuerpo_CTR ::= Tipos_CTR 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_CTR",10, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tipos_CTR ::= ES_LDA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipos_CTR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Tipos_CTR ::= ES_DEF 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Tipos_CTR",11, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ES_LDA ::= MAY RLDA EST_LDA_COM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_LDA",15, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EST_LDA_COM ::= RACI IGU MORE MEN Cuerpo_LDA MAY DIA RLDA MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_LDA_COM",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EST_LDA_COM ::= MEN Cuerpo_LDA MAY DIA RLDA MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_LDA_COM",16, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Cuerpo_LDA ::= Cuerpo_LDA ES_DA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_LDA",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Cuerpo_LDA ::= ES_DA 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_LDA",17, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ES_DA ::= MAY RDAT EST_DA_COM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_DA",18, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$3 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
System.out.println("texto: "+e1);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EST_DA_COM ::= REFE IGU CAD MEN SUM_TEXT NT$3 MAY DIA RDAT MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_DA_COM",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EST_DA_COM ::= MEN SUM_TEXT MAY DIA RDAT MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_DA_COM",19, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$4 ::= 
            {
              NodoGxml RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.peek()).value;
System.out.println("texto: "+e1);
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ES_DEF ::= MAY RDEF MEN SUM_TEXT NT$4 MAY DIA RDEF MEN 
            {
              NodoGxml RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (NodoGxml) ((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-5)).value;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_DEF",20, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ES_MUL ::= MAY RMUL EST_MUL_COM MEN SUM_TEXT MAY DIA RMUL MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_MUL",13, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EST_MUL_COM ::= EST_MUL_COM EST_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL_COM",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EST_MUL_COM ::= EST_MUL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL_COM",14, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EST_MUL ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EST_MUL ::= RTIP IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EST_MUL ::= RPAT IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EST_MUL ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EST_MUL ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EST_MUL ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EST_MUL ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EST_MUL ::= RAUT IGU BOL 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_MUL",21, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ES_BOT ::= MAY RBOT EST_BOT_COM MEN Cuerpo_BOT MAY DIA RBOT MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_BOT",22, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EST_BOT_COM ::= EST_BOT_COM EST_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT_COM",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EST_BOT_COM ::= EST_BOT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT_COM",23, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EST_BOT ::= RNOM IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EST_BOT ::= RX IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EST_BOT ::= RY IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EST_BOT ::= RALT IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EST_BOT ::= RANC IGU NUM 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EST_BOT ::= REFE IGU CAD 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EST_BOT ::= RACI IGU MORE 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("EST_BOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Cuerpo_BOT ::= ES_TEX 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_BOT",25, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Cuerpo_BOT ::= SUM_TEXT 
            {
              NodoGxml RESULT =null;

              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("Cuerpo_BOT",25, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ES_ENV ::= MAY RENV EST_BOT_COM MEN Cuerpo_BOT MAY DIA RENV MEN 
            {
              NodoGxml RESULT =null;
		
              CUP$SintacticoGxml$result = parser.getSymbolFactory().newSymbol("ES_ENV",26, ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.elementAt(CUP$SintacticoGxml$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoGxml$stack.peek()), RESULT);
            }
          return CUP$SintacticoGxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoGxml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoGxml$do_action(
    int                        CUP$SintacticoGxml$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoGxml$parser,
    java.util.Stack            CUP$SintacticoGxml$stack,
    int                        CUP$SintacticoGxml$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoGxml$do_action_part00000000(
                               CUP$SintacticoGxml$act_num,
                               CUP$SintacticoGxml$parser,
                               CUP$SintacticoGxml$stack,
                               CUP$SintacticoGxml$top);
    }
}

}
