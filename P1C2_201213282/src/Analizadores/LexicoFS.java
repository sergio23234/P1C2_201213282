/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;
import java.io.Reader;
import Principal.NodoError;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexicoFs</tt>
 */
public class LexicoFS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int Stado = 2;
  public static final int LLave = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\61\1\63\1\3\1\64\1\63\1\63\16\61\4\0\1\63\1\26"+
    "\1\62\1\0\1\60\1\0\1\30\1\0\1\15\1\16\1\4\1\5"+
    "\1\23\1\6\1\22\1\2\12\1\1\25\1\24\1\12\1\7\1\11"+
    "\1\21\1\0\1\32\1\54\1\47\1\35\1\34\1\37\1\55\1\52"+
    "\1\42\1\57\1\60\1\40\1\43\1\46\1\36\1\44\1\56\1\33"+
    "\1\41\1\45\1\50\1\31\1\60\1\53\1\51\1\60\1\17\1\0"+
    "\1\20\1\10\1\60\1\0\1\32\1\54\1\47\1\35\1\34\1\37"+
    "\1\55\1\52\1\42\1\57\1\60\1\40\1\43\1\46\1\36\1\44"+
    "\1\56\1\33\1\41\1\45\1\50\1\31\1\60\1\53\1\51\1\60"+
    "\1\13\1\27\1\14\1\0\6\61\1\65\32\61\2\0\4\60\4\0"+
    "\1\60\2\0\1\61\7\0\1\60\4\0\1\60\5\0\27\60\1\0"+
    "\37\60\1\0\70\60\2\42\115\60\1\41\u0142\60\4\0\14\60\16\0"+
    "\5\60\7\0\1\60\1\0\1\60\21\0\160\61\5\60\1\0\2\60"+
    "\2\0\4\60\10\0\1\60\1\0\3\60\1\0\1\60\1\0\24\60"+
    "\1\0\123\60\1\0\213\60\1\0\5\61\2\0\236\60\11\0\46\60"+
    "\2\0\1\60\7\0\47\60\7\0\1\60\1\0\55\61\1\0\1\61"+
    "\1\0\2\61\1\0\2\61\1\0\1\61\10\0\33\60\5\0\3\60"+
    "\15\0\5\61\6\0\1\60\4\0\13\61\5\0\53\60\37\61\4\0"+
    "\2\60\1\61\143\60\1\0\1\60\10\61\1\0\6\61\2\60\2\61"+
    "\1\0\4\61\2\60\12\61\3\60\2\0\1\60\17\0\1\61\1\60"+
    "\1\61\36\60\33\61\2\0\131\60\13\61\1\60\16\0\12\61\41\60"+
    "\11\61\2\60\4\0\1\60\5\0\26\60\4\61\1\60\11\61\1\60"+
    "\3\61\1\60\5\61\22\0\31\60\3\61\104\0\1\60\1\0\13\60"+
    "\67\0\33\61\1\0\4\61\66\60\3\61\1\60\22\61\1\60\7\61"+
    "\12\60\2\61\2\0\12\61\1\0\7\60\1\0\7\60\1\0\3\61"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0\1\60"+
    "\3\0\4\60\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61"+
    "\1\60\10\0\1\61\4\0\2\60\1\0\3\60\2\61\2\0\12\61"+
    "\4\60\7\0\1\60\5\0\3\61\1\0\6\60\4\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0\2\60\2\0"+
    "\1\61\1\0\5\61\4\0\2\61\2\0\3\61\3\0\1\61\7\0"+
    "\4\60\1\0\1\60\7\0\14\61\3\60\1\61\13\0\3\61\1\0"+
    "\11\60\1\0\3\60\1\0\26\60\1\0\7\60\1\0\2\60\1\0"+
    "\5\60\2\0\1\61\1\60\10\61\1\0\3\61\1\0\3\61\2\0"+
    "\1\60\17\0\2\60\2\61\2\0\12\61\1\0\1\60\17\0\3\61"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0\2\60"+
    "\1\0\5\60\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61"+
    "\10\0\2\61\4\0\2\60\1\0\3\60\2\61\2\0\12\61\1\0"+
    "\1\60\20\0\1\61\1\60\1\0\6\60\3\0\3\60\1\0\4\60"+
    "\3\0\2\60\1\0\1\60\1\0\2\60\3\0\2\60\3\0\3\60"+
    "\3\0\14\60\4\0\5\61\3\0\3\61\1\0\4\61\2\0\1\60"+
    "\6\0\1\61\16\0\12\61\11\0\1\60\7\0\3\61\1\0\10\60"+
    "\1\0\3\60\1\0\27\60\1\0\12\60\1\0\5\60\3\0\1\60"+
    "\7\61\1\0\3\61\1\0\4\61\7\0\2\61\1\0\2\60\6\0"+
    "\2\60\2\61\2\0\12\61\22\0\2\61\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\1\61\1\60\7\61"+
    "\1\0\3\61\1\0\4\61\7\0\2\61\7\0\1\60\1\0\2\60"+
    "\2\61\2\0\12\61\1\0\2\60\17\0\2\61\1\0\10\60\1\0"+
    "\3\60\1\0\51\60\2\0\1\60\7\61\1\0\3\61\1\0\4\61"+
    "\1\60\10\0\1\61\10\0\2\60\2\61\2\0\12\61\12\0\6\60"+
    "\2\0\2\61\1\0\22\60\3\0\30\60\1\0\11\60\1\0\1\60"+
    "\2\0\7\60\3\0\1\61\4\0\6\61\1\0\1\61\1\0\10\61"+
    "\22\0\2\61\15\0\60\60\1\61\2\60\7\61\4\0\10\60\10\61"+
    "\1\0\12\61\47\0\2\60\1\0\1\60\2\0\2\60\1\0\1\60"+
    "\2\0\1\60\6\0\4\60\1\0\7\60\1\0\3\60\1\0\1\60"+
    "\1\0\1\60\2\0\2\60\1\0\4\60\1\61\2\60\6\61\1\0"+
    "\2\61\1\60\2\0\5\60\1\0\1\60\1\0\6\61\2\0\12\61"+
    "\2\0\4\60\40\0\1\60\27\0\2\61\6\0\12\61\13\0\1\61"+
    "\1\0\1\61\1\0\1\61\4\0\2\61\10\60\1\0\44\60\4\0"+
    "\24\61\1\0\2\61\5\60\13\61\1\0\44\61\11\0\1\61\71\0"+
    "\53\60\24\61\1\60\12\61\6\0\6\60\4\61\4\60\3\61\1\60"+
    "\3\61\2\60\7\61\3\60\4\61\15\60\14\61\1\60\17\61\2\0"+
    "\46\60\1\0\1\60\5\0\1\60\2\0\53\60\1\0\u014d\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0\51\60\1\0"+
    "\4\60\2\0\41\60\1\0\4\60\2\0\7\60\1\0\1\60\1\0"+
    "\4\60\2\0\17\60\1\0\71\60\1\0\4\60\2\0\103\60\2\0"+
    "\3\61\40\0\20\60\20\0\125\60\14\0\u026c\60\2\0\21\60\1\0"+
    "\32\60\5\0\113\60\3\0\3\60\17\0\15\60\1\0\4\60\3\61"+
    "\13\0\22\60\3\61\13\0\22\60\2\61\14\0\15\60\1\0\3\60"+
    "\1\0\2\61\14\0\64\60\40\61\3\0\1\60\3\0\2\60\1\61"+
    "\2\0\12\61\41\0\3\61\2\0\12\61\6\0\130\60\10\0\51\60"+
    "\1\61\1\60\5\0\106\60\12\0\35\60\3\0\14\61\4\0\14\61"+
    "\12\0\12\61\36\60\2\0\5\60\13\0\54\60\4\0\21\61\7\60"+
    "\2\61\6\0\12\61\46\0\27\60\5\61\4\0\65\60\12\61\1\0"+
    "\35\61\2\0\13\61\6\0\12\61\15\0\1\60\130\0\5\61\57\60"+
    "\21\61\7\60\4\0\12\61\21\0\11\61\14\0\3\61\36\60\15\61"+
    "\2\60\12\61\54\60\16\61\14\0\44\60\24\61\10\0\12\61\3\0"+
    "\3\60\12\61\44\60\122\0\3\61\1\0\25\61\4\60\1\61\4\60"+
    "\3\61\2\60\11\0\300\60\47\61\25\0\4\61\u0116\60\2\0\6\60"+
    "\2\0\46\60\2\0\6\60\2\0\10\60\1\0\1\60\1\0\1\60"+
    "\1\0\1\60\1\0\37\60\2\0\65\60\1\0\7\60\1\0\1\60"+
    "\3\0\3\60\1\0\7\60\3\0\4\60\2\0\6\60\4\0\15\60"+
    "\5\0\3\60\1\0\7\60\16\0\5\61\30\0\1\64\1\64\5\61"+
    "\20\0\2\60\23\0\1\60\13\0\5\61\5\0\6\61\1\0\1\60"+
    "\15\0\1\60\20\0\15\60\3\0\33\60\25\0\15\61\4\0\1\61"+
    "\3\0\14\61\21\0\1\60\4\0\1\60\2\0\12\60\1\0\1\60"+
    "\3\0\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0\4\60"+
    "\1\0\13\60\2\0\4\60\5\0\5\60\4\0\1\60\21\0\51\60"+
    "\u0a77\0\57\60\1\0\57\60\1\0\205\60\6\0\4\60\3\61\2\60"+
    "\14\0\46\60\1\0\1\60\5\0\1\60\2\0\70\60\7\0\1\60"+
    "\17\0\1\61\27\60\11\0\7\60\1\0\7\60\1\0\7\60\1\0"+
    "\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0"+
    "\40\61\57\0\1\60\u01d5\0\3\60\31\0\11\60\6\61\1\0\5\60"+
    "\2\0\5\60\4\0\126\60\2\0\2\61\2\0\3\60\1\0\132\60"+
    "\1\0\4\60\5\0\51\60\3\0\136\60\21\0\33\60\65\0\20\60"+
    "\u0200\0\u19b6\60\112\0\u51cd\60\63\0\u048d\60\103\0\56\60\2\0\u010d\60"+
    "\3\0\20\60\12\61\2\60\24\0\57\60\1\61\4\0\12\61\1\0"+
    "\31\60\7\0\1\61\120\60\2\61\45\0\11\60\2\0\147\60\2\0"+
    "\4\60\1\0\4\60\14\0\13\60\115\0\12\60\1\61\3\60\1\61"+
    "\4\60\1\61\27\60\5\61\20\0\1\60\7\0\64\60\14\0\2\61"+
    "\62\60\21\61\13\0\12\61\6\0\22\61\6\60\3\0\1\60\4\0"+
    "\12\61\34\60\10\61\2\0\27\60\15\61\14\0\35\60\3\0\4\61"+
    "\57\60\16\61\16\0\1\60\12\61\46\0\51\60\16\61\11\0\3\60"+
    "\1\61\10\60\2\61\2\0\12\61\6\0\27\60\3\0\1\60\1\61"+
    "\4\0\60\60\1\61\1\60\3\61\2\60\2\61\5\60\2\61\1\60"+
    "\1\61\1\60\30\0\3\60\2\0\13\60\5\61\2\0\3\60\2\61"+
    "\12\0\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0\7\60"+
    "\221\0\43\60\10\61\1\0\2\61\2\0\12\61\6\0\u2ba4\60\14\0"+
    "\27\60\4\0\61\60\u2104\0\u016e\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\1\60\1\61\12\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0\u016b\60\22\0"+
    "\100\60\2\0\66\60\50\0\15\60\3\0\20\61\20\0\7\61\14\0"+
    "\2\60\30\0\3\60\31\0\1\60\6\0\5\60\1\0\207\60\2\0"+
    "\1\61\4\0\1\60\13\0\12\61\7\0\32\60\4\0\1\60\1\0"+
    "\32\60\13\0\131\60\3\0\6\60\2\0\6\60\2\0\6\60\2\0"+
    "\3\60\3\0\2\60\3\0\2\60\22\0\3\61\4\0\14\60\1\0"+
    "\32\60\1\0\23\60\1\0\2\60\1\0\17\60\2\0\16\60\42\0"+
    "\173\60\105\0\65\60\210\0\1\61\202\0\35\60\3\0\61\60\57\0"+
    "\37\60\21\0\33\60\65\0\36\60\2\0\44\60\4\0\10\60\1\0"+
    "\5\60\52\0\236\60\2\0\12\61\u0356\0\6\60\2\0\1\60\1\0"+
    "\54\60\1\0\2\60\3\0\1\60\2\0\27\60\252\0\26\60\12\0"+
    "\32\60\106\0\70\60\6\0\2\60\100\0\1\60\3\61\1\0\2\61"+
    "\5\0\4\61\4\60\1\0\3\60\1\0\33\60\4\0\3\61\4\0"+
    "\1\61\40\0\35\60\203\0\66\60\12\0\26\60\12\0\23\60\215\0"+
    "\111\60\u03b7\0\3\61\65\60\17\61\37\0\12\61\20\0\3\61\55\60"+
    "\13\61\2\0\1\61\22\0\31\60\7\0\12\61\6\0\3\61\44\60"+
    "\16\61\1\0\12\61\100\0\3\61\60\60\16\61\4\60\13\0\12\61"+
    "\u04a6\0\53\60\15\61\10\0\12\61\u0936\0\u036f\60\221\0\143\60\u0b9d\0"+
    "\u042f\60\u33d1\0\u0239\60\u04c7\0\105\60\13\0\1\60\56\61\20\0\4\61"+
    "\15\60\u4060\0\2\60\u2163\0\5\61\3\0\26\61\2\0\7\61\36\0"+
    "\4\61\224\0\3\61\u01bb\0\125\60\1\0\107\60\1\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0\1\60\1\0"+
    "\7\60\1\0\101\60\1\0\4\60\2\0\10\60\1\0\7\60\1\0"+
    "\34\60\1\0\4\60\1\0\5\60\1\0\1\60\3\0\7\60\1\0"+
    "\u0154\60\2\0\31\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0\37\60\1\0"+
    "\31\60\1\0\10\60\2\0\62\61\u1600\0\4\60\1\0\33\60\1\0"+
    "\2\60\1\0\1\60\2\0\1\60\1\0\12\60\1\0\4\60\1\0"+
    "\1\60\1\0\1\60\6\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0\1\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0\2\60\1\0"+
    "\1\60\2\0\4\60\1\0\7\60\1\0\4\60\1\0\4\60\1\0"+
    "\1\60\1\0\12\60\1\0\21\60\5\0\3\60\1\0\5\60\1\0"+
    "\21\60\u1144\0\ua6d7\60\51\0\u1035\60\13\0\336\60\u3fe2\0\u021e\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\61\36\0\140\61\200\0\360\61\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\4\1\1\12\30\1\1\3\0\1\31\1\32\13\33"+
    "\1\34\1\35\10\30\1\36\4\30\1\0\1\37\1\40"+
    "\1\41\1\0\14\33\1\42\15\30\1\0\10\33\1\43"+
    "\5\33\10\30\1\44\2\30\1\45\1\46\1\30\1\47"+
    "\17\33\4\30\1\50\6\30\14\33\1\51\2\33\13\30"+
    "\2\33\1\52\1\53\1\33\1\54\16\33\1\55\2\30"+
    "\1\56\1\57\1\60\6\30\5\33\1\61\1\33\2\0"+
    "\11\33\1\30\1\62\1\63\1\30\1\64\1\65\2\30"+
    "\1\66\1\67\4\33\1\70\1\71\11\33\1\72\3\30"+
    "\3\33\1\0\11\33\1\73\2\30\3\33\1\74\1\75"+
    "\4\33\1\76\3\33\1\77\2\30\1\0\7\33\1\100"+
    "\3\33\1\101\1\30\1\102\1\0\1\33\1\103\7\33"+
    "\1\30\1\104\10\33\1\30\2\33\1\105\2\33\1\106"+
    "\2\33\1\30\5\33\1\107\1\30\1\33\1\110\1\111"+
    "\1\112\1\33\1\30\2\33\1\30\1\113\1\33\1\30"+
    "\1\33\1\30\1\114\1\30\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\u010e\0\u0144"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\u017a\0\66\0\66\0\66\0\66"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\66\0\66\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\330\0\66\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0438\0\66\0\u046e\0\66"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0252\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u0510\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u0252\0\u1440\0\u1476\0\u0252\0\u0252\0\u14ac"+
    "\0\66\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u0252\0\u18e4\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u0510"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u0510"+
    "\0\u0510\0\u1fda\0\u0510\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u0510\0\u2304\0\u233a\0\u0252\0\u0252\0\u0252\0\u2370"+
    "\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520"+
    "\0\u2556\0\u258c\0\u0510\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u0252\0\u0252\0\u2880\0\u0252\0\u0252\0\u28b6\0\u28ec\0\u0510"+
    "\0\u0510\0\u2922\0\u2958\0\u298e\0\u29c4\0\66\0\66\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa"+
    "\0\u0252\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4"+
    "\0\u2f0a\0\u0252\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\66"+
    "\0\u0510\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u0510\0\u3126\0\u315c"+
    "\0\u3192\0\u0510\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6"+
    "\0\u330c\0\u3342\0\u3378\0\u33ae\0\u0510\0\u33e4\0\u341a\0\u3450"+
    "\0\u0252\0\u3486\0\66\0\u34bc\0\u34f2\0\u0510\0\u3528\0\u355e"+
    "\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\66\0\u36d8"+
    "\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888"+
    "\0\u38be\0\u38f4\0\u0510\0\u392a\0\u3960\0\u0510\0\u3996\0\u39cc"+
    "\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u0510\0\u3b46"+
    "\0\u3b7c\0\u0510\0\u0510\0\u0510\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54"+
    "\0\u3c8a\0\u0510\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u0510\0\u3d98"+
    "\0\u0252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\34\1\36\1\34\1\37"+
    "\1\40\1\41\1\42\3\34\1\43\1\44\11\34\1\2"+
    "\1\45\1\5\71\0\1\3\20\0\1\46\45\0\1\47"+
    "\1\0\1\50\64\0\1\5\23\0\1\5\33\0\1\5"+
    "\7\0\1\51\66\0\1\52\110\0\1\53\1\54\1\55"+
    "\1\53\1\56\1\57\1\60\2\53\1\61\1\62\1\53"+
    "\1\63\1\53\1\64\4\53\1\65\4\53\10\0\1\5"+
    "\23\0\1\66\33\0\1\5\32\0\1\67\36\0\1\34"+
    "\27\0\1\34\1\70\1\34\1\71\25\34\3\0\1\34"+
    "\1\0\1\34\27\0\31\34\3\0\1\34\1\0\1\34"+
    "\27\0\3\34\1\72\25\34\3\0\1\34\1\0\1\34"+
    "\27\0\3\34\1\73\25\34\3\0\1\34\1\0\1\34"+
    "\27\0\1\34\1\74\15\34\1\75\11\34\3\0\1\34"+
    "\1\0\1\34\27\0\3\34\1\76\25\34\3\0\1\34"+
    "\1\0\1\34\27\0\3\34\1\77\5\34\1\100\17\34"+
    "\3\0\1\34\1\0\1\34\27\0\12\34\1\101\16\34"+
    "\3\0\1\34\1\0\1\34\27\0\17\34\1\102\11\34"+
    "\3\0\1\34\1\0\1\34\27\0\1\34\1\103\1\104"+
    "\26\34\3\0\1\34\62\105\1\106\3\105\1\0\1\107"+
    "\64\0\3\47\1\110\62\47\2\111\1\0\1\111\1\0"+
    "\61\111\1\0\1\53\27\0\31\53\3\0\1\53\1\0"+
    "\1\53\27\0\7\53\1\112\1\113\20\53\3\0\1\53"+
    "\1\0\1\53\27\0\3\53\1\114\25\53\3\0\1\53"+
    "\1\0\1\53\27\0\3\53\1\115\25\53\3\0\1\53"+
    "\1\0\1\53\27\0\23\53\1\116\5\53\3\0\1\53"+
    "\1\0\1\53\27\0\11\53\1\117\17\53\3\0\1\53"+
    "\1\0\1\53\27\0\15\53\1\120\13\53\3\0\1\53"+
    "\1\0\1\53\27\0\1\53\1\121\7\53\1\122\17\53"+
    "\3\0\1\53\1\0\1\53\27\0\5\53\1\123\23\53"+
    "\3\0\1\53\1\0\1\53\27\0\2\53\1\124\26\53"+
    "\3\0\1\53\1\0\1\53\27\0\17\53\1\125\11\53"+
    "\3\0\1\53\1\0\1\34\27\0\2\34\1\126\26\34"+
    "\3\0\1\34\1\0\1\34\27\0\2\34\1\127\26\34"+
    "\3\0\1\34\1\0\1\34\27\0\14\34\1\130\14\34"+
    "\3\0\1\34\1\0\1\34\27\0\6\34\1\131\5\34"+
    "\1\132\14\34\3\0\1\34\1\0\1\34\27\0\7\34"+
    "\1\133\21\34\3\0\1\34\1\0\1\34\27\0\15\34"+
    "\1\134\13\34\3\0\1\34\1\0\1\34\27\0\3\34"+
    "\1\135\25\34\3\0\1\34\1\0\1\34\27\0\7\34"+
    "\1\136\21\34\3\0\1\34\1\0\1\34\27\0\15\34"+
    "\1\137\13\34\3\0\1\34\1\0\1\34\27\0\13\34"+
    "\1\140\15\34\3\0\1\34\1\0\1\34\27\0\7\34"+
    "\1\141\21\34\3\0\1\34\1\0\1\34\27\0\10\34"+
    "\1\142\20\34\3\0\1\34\1\0\1\34\27\0\3\34"+
    "\1\143\25\34\3\0\1\34\2\111\1\0\1\111\1\144"+
    "\61\111\1\0\1\53\27\0\16\53\1\145\5\53\1\146"+
    "\4\53\3\0\1\53\1\0\1\53\27\0\16\53\1\147"+
    "\12\53\3\0\1\53\1\0\1\53\27\0\4\53\1\150"+
    "\24\53\3\0\1\53\1\0\1\53\27\0\10\53\1\151"+
    "\20\53\3\0\1\53\1\0\1\53\27\0\14\53\1\152"+
    "\14\53\3\0\1\53\1\0\1\53\27\0\7\53\1\153"+
    "\21\53\3\0\1\53\1\0\1\53\27\0\1\154\30\53"+
    "\3\0\1\53\1\0\1\53\27\0\13\53\1\155\6\53"+
    "\1\156\6\53\3\0\1\53\1\0\1\53\27\0\15\53"+
    "\1\157\13\53\3\0\1\53\1\0\1\53\27\0\4\53"+
    "\1\160\24\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\161\25\53\3\0\1\53\1\0\1\53\27\0\10\53"+
    "\1\162\20\53\3\0\1\53\1\0\1\34\27\0\4\34"+
    "\1\163\24\34\3\0\1\34\1\0\1\34\27\0\5\34"+
    "\1\164\23\34\3\0\1\34\1\0\1\34\27\0\3\34"+
    "\1\165\25\34\3\0\1\34\1\0\1\34\27\0\3\34"+
    "\1\166\25\34\3\0\1\34\1\0\1\34\27\0\10\34"+
    "\1\167\20\34\3\0\1\34\1\0\1\34\27\0\16\34"+
    "\1\170\12\34\3\0\1\34\1\0\1\34\27\0\2\34"+
    "\1\171\26\34\3\0\1\34\1\0\1\34\27\0\3\34"+
    "\1\172\25\34\3\0\1\34\1\0\1\34\27\0\5\34"+
    "\1\173\23\34\3\0\1\34\1\0\1\34\27\0\2\34"+
    "\1\174\2\34\1\175\23\34\3\0\1\34\1\0\1\34"+
    "\27\0\5\34\1\176\23\34\3\0\1\34\1\0\1\34"+
    "\27\0\5\34\1\177\23\34\3\0\1\34\1\0\1\34"+
    "\27\0\1\34\1\200\27\34\3\0\1\34\2\0\1\201"+
    "\64\0\1\53\27\0\1\53\1\202\1\53\1\203\3\53"+
    "\1\204\21\53\3\0\1\53\1\0\1\53\27\0\17\53"+
    "\1\205\11\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\206\25\53\3\0\1\53\1\0\1\53\27\0\17\53"+
    "\1\207\11\53\3\0\1\53\1\0\1\53\27\0\16\53"+
    "\1\210\12\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\211\25\53\3\0\1\53\1\0\1\53\27\0\14\53"+
    "\1\212\14\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\213\25\53\3\0\1\53\1\0\1\53\27\0\11\53"+
    "\1\214\17\53\3\0\1\53\1\0\1\53\27\0\11\53"+
    "\1\215\17\53\3\0\1\53\1\0\1\53\27\0\5\53"+
    "\1\216\23\53\3\0\1\53\1\0\1\53\27\0\1\53"+
    "\1\217\27\53\3\0\1\53\1\0\1\53\27\0\16\53"+
    "\1\220\12\53\3\0\1\53\1\0\1\34\27\0\1\34"+
    "\1\221\27\34\3\0\1\34\1\0\1\34\27\0\2\34"+
    "\1\222\26\34\3\0\1\34\1\0\1\34\27\0\16\34"+
    "\1\223\12\34\3\0\1\34\1\0\1\34\27\0\15\34"+
    "\1\224\13\34\3\0\1\34\1\0\1\34\27\0\5\34"+
    "\1\225\23\34\3\0\1\34\1\0\1\34\27\0\11\34"+
    "\1\226\17\34\3\0\1\34\1\0\1\34\27\0\24\34"+
    "\1\227\4\34\3\0\1\34\1\0\1\34\27\0\16\34"+
    "\1\230\12\34\3\0\1\34\1\0\1\34\27\0\11\34"+
    "\1\231\17\34\3\0\1\34\1\0\1\34\27\0\2\34"+
    "\1\232\26\34\3\0\1\34\1\0\1\34\27\0\2\34"+
    "\1\233\26\34\3\0\1\34\1\0\1\53\27\0\2\53"+
    "\1\234\26\53\3\0\1\53\1\0\1\53\27\0\2\53"+
    "\1\235\26\53\3\0\1\53\1\0\1\53\27\0\11\53"+
    "\1\236\17\53\3\0\1\53\1\0\1\53\27\0\15\53"+
    "\1\237\13\53\3\0\1\53\1\0\1\53\27\0\15\53"+
    "\1\240\13\53\3\0\1\53\1\0\1\53\27\0\16\53"+
    "\1\241\12\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\242\25\53\3\0\1\53\1\0\1\53\27\0\15\53"+
    "\1\243\13\53\3\0\1\53\1\0\1\53\27\0\2\53"+
    "\1\244\26\53\3\0\1\53\1\0\1\53\27\0\2\53"+
    "\1\245\26\53\3\0\1\53\1\0\1\53\27\0\12\53"+
    "\1\246\16\53\3\0\1\53\1\0\1\53\27\0\12\53"+
    "\1\247\16\53\3\0\1\53\1\0\1\53\27\0\10\53"+
    "\1\250\20\53\3\0\1\53\1\0\1\53\27\0\2\53"+
    "\1\251\26\53\3\0\1\53\1\0\1\53\27\0\1\53"+
    "\1\252\27\53\3\0\1\53\1\0\1\34\27\0\4\34"+
    "\1\253\24\34\3\0\1\34\1\0\1\34\27\0\15\34"+
    "\1\254\13\34\3\0\1\34\1\0\1\34\27\0\14\34"+
    "\1\255\14\34\3\0\1\34\1\0\1\34\27\0\3\34"+
    "\1\256\25\34\3\0\1\34\1\0\1\34\27\0\5\34"+
    "\1\257\23\34\3\0\1\34\1\0\1\34\27\0\22\34"+
    "\1\260\6\34\3\0\1\34\1\0\1\34\27\0\16\34"+
    "\1\261\12\34\3\0\1\34\1\0\1\34\27\0\12\34"+
    "\1\262\16\34\3\0\1\34\1\0\1\34\27\0\14\34"+
    "\1\263\14\34\3\0\1\34\1\0\1\34\27\0\1\264"+
    "\1\265\27\34\3\0\1\34\1\0\1\53\27\0\24\53"+
    "\1\266\4\53\3\0\1\53\1\0\1\53\27\0\2\53"+
    "\1\267\26\53\3\0\1\53\1\0\1\53\27\0\16\53"+
    "\1\270\12\53\3\0\1\53\1\0\1\53\27\0\5\53"+
    "\1\271\23\53\3\0\1\53\1\0\1\53\27\0\4\53"+
    "\1\272\24\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\273\25\53\3\0\1\53\1\0\1\53\27\0\15\53"+
    "\1\274\13\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\275\25\53\3\0\1\53\1\0\1\53\27\0\1\53"+
    "\1\276\27\53\3\0\1\53\1\0\1\53\27\0\14\53"+
    "\1\277\14\53\3\0\1\53\1\0\1\53\27\0\5\53"+
    "\1\300\23\53\3\0\1\53\1\0\1\53\27\0\5\53"+
    "\1\301\23\53\3\0\1\53\1\0\1\53\27\0\1\302"+
    "\1\303\1\304\1\53\1\305\4\53\1\306\2\53\1\307"+
    "\1\53\1\310\4\53\1\311\5\53\3\0\1\53\1\0"+
    "\1\53\27\0\2\53\1\312\26\53\3\0\1\53\1\0"+
    "\1\34\27\0\3\34\1\313\25\34\3\0\1\34\1\0"+
    "\1\34\27\0\1\34\1\314\27\34\3\0\1\34\1\0"+
    "\1\34\27\0\5\34\1\315\23\34\3\0\1\34\1\0"+
    "\1\34\27\0\2\34\1\316\26\34\3\0\1\34\1\0"+
    "\1\34\27\0\15\34\1\317\13\34\3\0\1\34\1\0"+
    "\1\34\27\0\12\34\1\320\16\34\3\0\1\34\1\0"+
    "\1\34\27\0\11\34\1\321\17\34\3\0\1\34\1\0"+
    "\1\34\27\0\11\34\1\322\17\34\3\0\1\34\1\0"+
    "\1\34\27\0\1\34\1\323\27\34\3\0\1\34\1\0"+
    "\1\34\27\0\3\34\1\324\25\34\3\0\1\34\1\0"+
    "\1\34\27\0\2\34\1\325\26\34\3\0\1\34\1\0"+
    "\1\53\27\0\1\53\1\326\27\53\3\0\1\53\1\0"+
    "\1\53\27\0\1\53\1\327\27\53\3\0\1\53\1\0"+
    "\1\53\27\0\3\53\1\330\25\53\3\0\1\53\1\0"+
    "\1\53\27\0\4\53\1\331\24\53\3\0\1\53\1\0"+
    "\1\53\27\0\2\53\1\332\26\53\3\0\1\53\1\0"+
    "\1\53\27\0\2\53\1\333\26\53\3\0\1\53\1\0"+
    "\1\53\27\0\11\53\1\334\17\53\3\0\1\53\1\0"+
    "\1\53\13\0\1\335\13\0\31\53\3\0\1\53\1\0"+
    "\1\53\13\0\1\336\13\0\31\53\3\0\1\53\1\0"+
    "\1\53\27\0\11\53\1\337\17\53\3\0\1\53\1\0"+
    "\1\53\27\0\2\53\1\340\26\53\3\0\1\53\1\0"+
    "\1\53\27\0\3\53\1\341\25\53\3\0\1\53\1\0"+
    "\1\53\27\0\3\53\1\342\25\53\3\0\1\53\1\0"+
    "\1\53\27\0\12\53\1\343\16\53\3\0\1\53\1\0"+
    "\1\53\27\0\3\53\1\344\25\53\3\0\1\53\1\0"+
    "\1\53\27\0\1\53\1\345\3\53\1\346\23\53\3\0"+
    "\1\53\1\0\1\53\27\0\5\53\1\347\23\53\3\0"+
    "\1\53\1\0\1\34\27\0\2\34\1\350\26\34\3\0"+
    "\1\34\1\0\1\34\27\0\2\34\1\351\26\34\3\0"+
    "\1\34\1\0\1\34\27\0\7\34\1\352\21\34\3\0"+
    "\1\34\1\0\1\34\27\0\5\34\1\353\23\34\3\0"+
    "\1\34\1\0\1\34\27\0\2\34\1\354\26\34\3\0"+
    "\1\34\1\0\1\34\27\0\2\34\1\355\26\34\3\0"+
    "\1\34\1\0\1\34\27\0\15\34\1\356\13\34\3\0"+
    "\1\34\1\0\1\34\27\0\2\34\1\357\26\34\3\0"+
    "\1\34\1\0\1\53\27\0\2\53\1\360\26\53\3\0"+
    "\1\53\1\0\1\53\27\0\2\53\1\361\26\53\3\0"+
    "\1\53\1\0\1\53\27\0\15\53\1\362\13\53\3\0"+
    "\1\53\1\0\1\53\27\0\3\53\1\363\25\53\3\0"+
    "\1\53\1\0\1\53\27\0\13\53\1\364\15\53\3\0"+
    "\1\53\1\0\1\53\27\0\2\53\1\365\26\53\3\0"+
    "\1\53\16\0\1\366\65\0\1\367\50\0\1\53\27\0"+
    "\4\53\1\370\24\53\3\0\1\53\1\0\1\53\27\0"+
    "\3\53\1\371\25\53\3\0\1\53\1\0\1\53\27\0"+
    "\13\53\1\372\15\53\3\0\1\53\1\0\1\53\27\0"+
    "\10\53\1\373\20\53\3\0\1\53\1\0\1\53\27\0"+
    "\1\53\1\374\27\53\3\0\1\53\1\0\1\53\27\0"+
    "\22\53\1\375\6\53\3\0\1\53\1\0\1\53\27\0"+
    "\26\53\1\376\2\53\3\0\1\53\1\0\1\53\27\0"+
    "\15\53\1\377\13\53\3\0\1\53\1\0\1\53\27\0"+
    "\14\53\1\u0100\14\53\3\0\1\53\1\0\1\34\27\0"+
    "\5\34\1\u0101\23\34\3\0\1\34\1\0\1\34\27\0"+
    "\15\34\1\u0102\13\34\3\0\1\34\1\0\1\34\27\0"+
    "\14\34\1\u0103\14\34\3\0\1\34\1\0\1\34\27\0"+
    "\1\34\1\u0104\27\34\3\0\1\34\1\0\1\53\27\0"+
    "\14\53\1\u0105\14\53\3\0\1\53\1\0\1\53\27\0"+
    "\15\53\1\u0106\13\53\3\0\1\53\1\0\1\53\27\0"+
    "\5\53\1\u0107\23\53\3\0\1\53\1\0\1\53\13\0"+
    "\1\u0108\13\0\31\53\3\0\1\53\1\0\1\53\27\0"+
    "\3\53\1\u0109\25\53\3\0\1\53\1\0\1\53\27\0"+
    "\1\53\1\u010a\27\53\3\0\1\53\1\0\1\53\27\0"+
    "\2\53\1\u010b\26\53\3\0\1\53\1\0\1\53\27\0"+
    "\13\53\1\u010c\15\53\3\0\1\53\1\0\1\53\27\0"+
    "\24\53\1\u010d\4\53\3\0\1\53\1\0\1\53\27\0"+
    "\14\53\1\u010e\14\53\3\0\1\53\1\0\1\53\27\0"+
    "\1\53\1\u010f\27\53\3\0\1\53\1\0\1\53\27\0"+
    "\14\53\1\u0110\14\53\3\0\1\53\1\0\1\53\27\0"+
    "\5\53\1\u0111\23\53\3\0\1\53\1\0\1\34\27\0"+
    "\1\34\1\u0112\27\34\3\0\1\34\1\0\1\34\27\0"+
    "\1\34\1\u0113\27\34\3\0\1\34\1\0\1\34\27\0"+
    "\20\34\1\u0114\10\34\3\0\1\34\1\0\1\53\27\0"+
    "\3\53\1\u0115\25\53\3\0\1\53\1\0\1\53\27\0"+
    "\14\53\1\u0116\14\53\3\0\1\53\1\0\1\53\27\0"+
    "\2\53\1\u0117\26\53\3\0\1\53\16\0\1\u0118\50\0"+
    "\1\53\27\0\5\53\1\u0119\23\53\3\0\1\53\1\0"+
    "\1\53\27\0\14\53\1\u011a\14\53\3\0\1\53\1\0"+
    "\1\53\27\0\5\53\1\u011b\23\53\3\0\1\53\1\0"+
    "\1\53\27\0\7\53\1\u011c\21\53\3\0\1\53\1\0"+
    "\1\53\27\0\3\53\1\u011d\25\53\3\0\1\53\1\0"+
    "\1\53\27\0\5\53\1\u011e\23\53\3\0\1\53\1\0"+
    "\1\53\27\0\14\53\1\u011f\14\53\3\0\1\53\1\0"+
    "\1\53\27\0\2\53\1\u0120\1\u0121\25\53\3\0\1\53"+
    "\1\0\1\53\27\0\15\53\1\u0122\13\53\3\0\1\53"+
    "\1\0\1\34\27\0\15\34\1\u0123\13\34\3\0\1\34"+
    "\1\0\1\34\27\0\4\34\1\u0124\24\34\3\0\1\34"+
    "\1\0\1\53\13\0\1\u0125\13\0\31\53\3\0\1\53"+
    "\1\0\1\53\27\0\3\53\1\u0126\25\53\3\0\1\53"+
    "\1\0\1\53\27\0\3\53\1\u0127\5\53\1\u0128\3\53"+
    "\1\u0129\13\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\u012a\25\53\3\0\1\53\1\0\1\53\27\0\4\53"+
    "\1\u012b\24\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\u012c\25\53\3\0\1\53\1\0\1\53\27\0\15\53"+
    "\1\u012d\13\53\3\0\1\53\1\0\1\53\27\0\3\53"+
    "\1\u012e\25\53\3\0\1\53\1\0\1\53\27\0\5\53"+
    "\1\u012f\23\53\3\0\1\53\1\0\1\53\27\0\15\53"+
    "\1\u0130\13\53\3\0\1\53\1\0\1\34\27\0\1\34"+
    "\1\u0131\27\34\3\0\1\34\1\0\1\34\27\0\3\34"+
    "\1\u0132\25\34\3\0\1\34\16\0\1\u0133\50\0\1\53"+
    "\13\0\1\u0134\13\0\31\53\3\0\1\53\1\0\1\53"+
    "\27\0\14\53\1\u0135\14\53\3\0\1\53\1\0\1\53"+
    "\27\0\4\53\1\u0136\24\53\3\0\1\53\1\0\1\53"+
    "\27\0\5\53\1\u0137\23\53\3\0\1\53\1\0\1\53"+
    "\27\0\22\53\1\u0138\6\53\3\0\1\53\1\0\1\53"+
    "\27\0\17\53\1\u0139\11\53\3\0\1\53\1\0\1\53"+
    "\27\0\24\53\1\u013a\4\53\3\0\1\53\1\0\1\53"+
    "\27\0\22\53\1\u013b\6\53\3\0\1\53\1\0\1\53"+
    "\27\0\7\53\1\u013c\21\53\3\0\1\53\1\0\1\53"+
    "\27\0\3\53\1\u013d\25\53\3\0\1\53\1\0\1\34"+
    "\27\0\10\34\1\u013e\20\34\3\0\1\34\16\0\1\u013f"+
    "\50\0\1\53\27\0\11\53\1\u0140\17\53\3\0\1\53"+
    "\1\0\1\53\27\0\12\53\1\u0141\16\53\3\0\1\53"+
    "\1\0\1\53\27\0\14\53\1\u0142\14\53\3\0\1\53"+
    "\1\0\1\53\27\0\16\53\1\u0143\12\53\3\0\1\53"+
    "\1\0\1\53\27\0\1\53\1\u0144\27\53\3\0\1\53"+
    "\1\0\1\53\27\0\14\53\1\u0145\14\53\3\0\1\53"+
    "\1\0\1\53\27\0\15\53\1\u0146\13\53\3\0\1\53"+
    "\1\0\1\53\27\0\4\53\1\u0147\24\53\3\0\1\53"+
    "\1\0\1\34\27\0\4\34\1\u0148\24\34\3\0\1\34"+
    "\1\0\1\53\27\0\25\53\1\u0149\3\53\3\0\1\53"+
    "\1\0\1\53\27\0\23\53\1\u014a\5\53\3\0\1\53"+
    "\1\0\1\53\27\0\5\53\1\u014b\23\53\3\0\1\53"+
    "\1\0\1\53\27\0\14\53\1\u014c\14\53\3\0\1\53"+
    "\1\0\1\53\27\0\23\53\1\u014d\5\53\3\0\1\53"+
    "\1\0\1\53\27\0\5\53\1\u014e\23\53\3\0\1\53"+
    "\1\0\1\53\27\0\17\53\1\u014f\11\53\3\0\1\53"+
    "\1\0\1\53\27\0\5\53\1\u0150\23\53\3\0\1\53"+
    "\1\0\1\34\27\0\3\34\1\u0151\25\34\3\0\1\34"+
    "\1\0\1\53\27\0\17\53\1\u0152\11\53\3\0\1\53"+
    "\1\0\1\53\27\0\2\53\1\u0153\26\53\3\0\1\53"+
    "\1\0\1\53\27\0\5\53\1\u0154\23\53\3\0\1\53"+
    "\1\0\1\53\27\0\7\53\1\u0155\21\53\3\0\1\53"+
    "\1\0\1\53\27\0\12\53\1\u0156\16\53\3\0\1\53"+
    "\1\0\1\53\27\0\2\53\1\u0157\26\53\3\0\1\53"+
    "\1\0\1\34\27\0\1\34\1\u0158\27\34\3\0\1\34"+
    "\1\0\1\53\27\0\3\53\1\u0159\25\53\3\0\1\53"+
    "\1\0\1\53\27\0\3\53\1\u015a\25\53\3\0\1\53"+
    "\1\0\1\53\27\0\2\53\1\u015b\26\53\3\0\1\53"+
    "\1\0\1\53\27\0\3\53\1\u015c\25\53\3\0\1\53"+
    "\1\0\1\53\27\0\3\53\1\u015d\25\53\3\0\1\53"+
    "\1\0\1\34\27\0\2\34\1\u015e\26\34\3\0\1\34"+
    "\1\0\1\53\27\0\14\53\1\u015f\14\53\3\0\1\53"+
    "\1\0\1\53\27\0\2\53\1\u0160\26\53\3\0\1\53"+
    "\1\0\1\34\27\0\16\34\1\u0161\12\34\3\0\1\34"+
    "\1\0\1\53\27\0\1\53\1\u0162\27\53\3\0\1\53"+
    "\1\0\1\53\27\0\11\53\1\u0163\17\53\3\0\1\53"+
    "\1\0\1\34\27\0\21\34\1\u0164\7\34\3\0\1\34"+
    "\1\0\1\53\27\0\16\53\1\u0165\12\53\3\0\1\53"+
    "\1\0\1\34\27\0\11\34\1\u0166\17\34\3\0\1\34"+
    "\1\0\1\53\27\0\5\53\1\u0167\23\53\3\0\1\53"+
    "\1\0\1\34\27\0\1\u0168\30\34\3\0\1\34\1\0"+
    "\1\34\27\0\5\34\1\u0169\23\34\3\0\1\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15822];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\13\11\1\1\4\11"+
    "\15\1\3\0\2\11\14\1\1\11\15\1\1\0\1\11"+
    "\1\1\1\11\1\0\32\1\1\0\34\1\1\11\133\1"+
    "\2\0\27\1\2\11\20\1\1\0\17\1\1\11\14\1"+
    "\1\0\15\1\1\11\1\0\12\1\1\11\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
 public ArrayList<NodoError> Elista = new ArrayList();
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    private void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
	   NodoError Nerror = new NodoError("lexico");
       Nerror.descripcion = "caracter no reconocido: "+error;
       Nerror.linea = String.valueOf(y);
       Nerror.columna = String.valueOf(x);
       Elista.add(Nerror);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2918) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errorLexico(yytext(),yyline,yycolumn);
            } 
            // fall through
          case 78: break;
          case 2: 
            { return new Symbol(symf.nume,yyline,yycolumn,yytext());
            } 
            // fall through
          case 79: break;
          case 3: 
            { return new Symbol(symf.div,yyline,yycolumn,yytext());
            } 
            // fall through
          case 80: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 81: break;
          case 5: 
            { return new Symbol(symf.por,yyline,yycolumn,yytext());
            } 
            // fall through
          case 82: break;
          case 6: 
            { return new Symbol(symf.mas,yyline,yycolumn,yytext());
            } 
            // fall through
          case 83: break;
          case 7: 
            { return new Symbol(symf.nos,yyline,yycolumn,yytext());
            } 
            // fall through
          case 84: break;
          case 8: 
            { return new Symbol(symf.igu,yyline,yycolumn,yytext());
            } 
            // fall through
          case 85: break;
          case 9: 
            { return new Symbol(symf.pot,yyline,yycolumn,yytext());
            } 
            // fall through
          case 86: break;
          case 10: 
            { return new Symbol(symf.may,yyline,yycolumn,yytext());
            } 
            // fall through
          case 87: break;
          case 11: 
            { return new Symbol(symf.men,yyline,yycolumn,yytext());
            } 
            // fall through
          case 88: break;
          case 12: 
            { return new Symbol(symf.ill,yyline,yycolumn,yytext());
            } 
            // fall through
          case 89: break;
          case 13: 
            { return new Symbol(symf.fll,yyline,yycolumn,yytext());
            } 
            // fall through
          case 90: break;
          case 14: 
            { return new Symbol(symf.ipa,yyline,yycolumn,yytext());
            } 
            // fall through
          case 91: break;
          case 15: 
            { return new Symbol(symf.fpa,yyline,yycolumn,yytext());
            } 
            // fall through
          case 92: break;
          case 16: 
            { return new Symbol(symf.ico,yyline,yycolumn,yytext());
            } 
            // fall through
          case 93: break;
          case 17: 
            { return new Symbol(symf.fco,yyline,yycolumn,yytext());
            } 
            // fall through
          case 94: break;
          case 18: 
            { return new Symbol(symf.fin,yyline,yycolumn,yytext());
            } 
            // fall through
          case 95: break;
          case 19: 
            { return new Symbol(symf.pun,yyline,yycolumn,yytext());
            } 
            // fall through
          case 96: break;
          case 20: 
            { return new Symbol(symf.com,yyline,yycolumn,yytext());
            } 
            // fall through
          case 97: break;
          case 21: 
            { return new Symbol(symf.pyc,yyline,yycolumn,yytext());
            } 
            // fall through
          case 98: break;
          case 22: 
            { return new Symbol(symf.dop,yyline,yycolumn,yytext());
            } 
            // fall through
          case 99: break;
          case 23: 
            { return new Symbol(symf.not,yyline,yycolumn,yytext());
            } 
            // fall through
          case 100: break;
          case 24: 
            { return new Symbol(symf.idva,yyline,yycolumn,yytext());
            } 
            // fall through
          case 101: break;
          case 25: 
            { return new Symbol(symf.dmas,yyline,yycolumn,yytext());
            } 
            // fall through
          case 102: break;
          case 26: 
            { return new Symbol(symf.dnos,yyline,yycolumn,yytext());
            } 
            // fall through
          case 103: break;
          case 27: 
            { return new Symbol(symf.idpu,yyline,yycolumn,yytext());
            } 
            // fall through
          case 104: break;
          case 28: 
            { return new Symbol(symf.Sor,yyline,yycolumn,yytext());
            } 
            // fall through
          case 105: break;
          case 29: 
            { return new Symbol(symf.and,yyline,yycolumn,yytext());
            } 
            // fall through
          case 106: break;
          case 30: 
            { return new Symbol(symf.si,yyline,yycolumn,yytext());
            } 
            // fall through
          case 107: break;
          case 31: 
            { return new Symbol(symf.cade,yyline,yycolumn,yytext());
            } 
            // fall through
          case 108: break;
          case 32: 
            { return new Symbol(symf.deci,yyline,yycolumn,yytext());
            } 
            // fall through
          case 109: break;
          case 33: 
            { /*Ignorar Comentario Simple*/
            } 
            // fall through
          case 110: break;
          case 34: 
            { return new Symbol(symf.var,yyline,yycolumn,yytext());
            } 
            // fall through
          case 111: break;
          case 35: 
            { return new Symbol(symf.map,yyline,yycolumn,yytext());
            } 
            // fall through
          case 112: break;
          case 36: 
            { return new Symbol(symf.sino,yyline,yycolumn,yytext());
            } 
            // fall through
          case 113: break;
          case 37: 
            { return new Symbol(symf.nulo,yyline,yycolumn,yytext());
            } 
            // fall through
          case 114: break;
          case 38: 
            { return new Symbol(symf.caso,yyline,yycolumn,yytext());
            } 
            // fall through
          case 115: break;
          case 39: 
            { /*Ignorar Comentario multiple*/
            } 
            // fall through
          case 116: break;
          case 40: 
            { return new Symbol(symf.fals,yyline,yycolumn,yytext());
            } 
            // fall through
          case 117: break;
          case 41: 
            { return new Symbol(symf.todo,yyline,yycolumn,yytext());
            } 
            // fall through
          case 118: break;
          case 42: 
            { return new Symbol(symf.acli,yyline,yycolumn,yytext());
            } 
            // fall through
          case 119: break;
          case 43: 
            { return new Symbol(symf.algu,yyline,yycolumn,yytext());
            } 
            // fall through
          case 120: break;
          case 44: 
            { return new Symbol(symf.redu,yyline,yycolumn,yytext());
            } 
            // fall through
          case 121: break;
          case 45: 
            { return new Symbol(symf.busc,yyline,yycolumn,yytext());
            } 
            // fall through
          case 122: break;
          case 46: 
            { return new Symbol(symf.defe,yyline,yycolumn,yytext());
            } 
            // fall through
          case 123: break;
          case 47: 
            { return new Symbol(symf.dete,yyline,yycolumn,yytext());
            } 
            // fall through
          case 124: break;
          case 48: 
            { return new Symbol(symf.func,yyline,yycolumn,yytext());
            } 
            // fall through
          case 125: break;
          case 49: 
            { return new Symbol(symf.filt,yyline,yycolumn,yytext());
            } 
            // fall through
          case 126: break;
          case 50: 
            { return new Symbol(symf.reto,yyline,yycolumn,yytext());
            } 
            // fall through
          case 127: break;
          case 51: 
            { return new Symbol(symf.lgxm,yyline,yycolumn,yytext());
            } 
            // fall through
          case 128: break;
          case 52: 
            { return new Symbol(symf.impr,yyline,yycolumn,yytext());
            } 
            // fall through
          case 129: break;
          case 53: 
            { return new Symbol(symf.impo,yyline,yycolumn,yytext());
            } 
            // fall through
          case 130: break;
          case 54: 
            { return new Symbol(symf.acar,yyline,yycolumn,yytext());
            } 
            // fall through
          case 131: break;
          case 55: 
            { return new Symbol(symf.acer,yyline,yycolumn,yytext());
            } 
            // fall through
          case 132: break;
          case 56: 
            { return new Symbol(symf.maxi,yyline,yycolumn,yytext());
            } 
            // fall through
          case 133: break;
          case 57: 
            { return new Symbol(symf.mini,yyline,yycolumn,yytext());
            } 
            // fall through
          case 134: break;
          case 58: 
            { return new Symbol(symf.verd,yyline,yycolumn,yytext());
            } 
            // fall through
          case 135: break;
          case 59: 
            { return new Symbol(symf.sele,yyline,yycolumn,yytext());
            } 
            // fall through
          case 136: break;
          case 60: 
            { return new Symbol(symf.inve,yyline,yycolumn,yytext());
            } 
            // fall through
          case 137: break;
          case 61: 
            { return new Symbol(symf.cvid,yyline,yycolumn,yytext());
            } 
            // fall through
          case 138: break;
          case 62: 
            { return new Symbol(symf.ctex,yyline,yycolumn,yytext());
            } 
            // fall through
          case 139: break;
          case 63: 
            { return new Symbol(symf.cbot,yyline,yycolumn,yytext());
            } 
            // fall through
          case 140: break;
          case 64: 
            { return new Symbol(symf.cima,yyline,yycolumn,yytext());
            } 
            // fall through
          case 141: break;
          case 65: 
            { return new Symbol(symf.cven,yyline,yycolumn,yytext());
            } 
            // fall through
          case 142: break;
          case 66: 
            { return new Symbol(symf.asce,yyline,yycolumn,yytext());
            } 
            // fall through
          case 143: break;
          case 67: 
            { return new Symbol(symf.opid,yyline,yycolumn,yytext());
            } 
            // fall through
          case 144: break;
          case 68: 
            { return new Symbol(symf.desc,yyline,yycolumn,yytext());
            } 
            // fall through
          case 145: break;
          case 69: 
            { return new Symbol(symf.cate,yyline,yycolumn,yytext());
            } 
            // fall through
          case 146: break;
          case 70: 
            { return new Symbol(symf.ccte,yyline,yycolumn,yytext());
            } 
            // fall through
          case 147: break;
          case 71: 
            { return new Symbol(symf.ccon,yyline,yycolumn,yytext());
            } 
            // fall through
          case 148: break;
          case 72: 
            { return new Symbol(symf.opno,yyline,yycolumn,yytext());
            } 
            // fall through
          case 149: break;
          case 73: 
            { return new Symbol(symf.crep,yyline,yycolumn,yytext());
            } 
            // fall through
          case 150: break;
          case 74: 
            { return new Symbol(symf.cdes,yyline,yycolumn,yytext());
            } 
            // fall through
          case 151: break;
          case 75: 
            { return new Symbol(symf.opet,yyline,yycolumn,yytext());
            } 
            // fall through
          case 152: break;
          case 76: 
            { return new Symbol(symf.ccnu,yyline,yycolumn,yytext());
            } 
            // fall through
          case 153: break;
          case 77: 
            { return new Symbol(symf.cada,yyline,yycolumn,yytext());
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
