/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java_cup.runtime.*;
import java.io.Reader;
import Principal.NodoError;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LexicoFs.txt</tt>
 */
public class LexicoFS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int Stado = 2;
  public static final int LLave = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\61\1\64\1\3\1\65\1\64\1\64\16\61\4\0\1\64\1\26"+
    "\1\62\1\0\1\60\1\0\1\30\1\63\1\15\1\16\1\4\1\5"+
    "\1\23\1\6\1\22\1\2\12\1\1\25\1\24\1\12\1\7\1\11"+
    "\1\21\1\0\1\32\1\54\1\47\1\35\1\34\1\37\1\55\1\52"+
    "\1\42\1\57\1\60\1\40\1\43\1\46\1\36\1\44\1\56\1\33"+
    "\1\41\1\45\1\50\1\31\1\60\1\53\1\51\1\60\1\17\1\0"+
    "\1\20\1\10\1\60\1\0\1\32\1\54\1\47\1\35\1\34\1\37"+
    "\1\55\1\52\1\42\1\57\1\60\1\40\1\43\1\46\1\36\1\44"+
    "\1\56\1\33\1\41\1\45\1\50\1\31\1\60\1\53\1\51\1\60"+
    "\1\13\1\27\1\14\1\0\6\61\1\66\32\61\2\0\4\60\4\0"+
    "\1\60\2\0\1\61\7\0\1\60\4\0\1\60\5\0\27\60\1\0"+
    "\37\60\1\0\70\60\2\42\115\60\1\41\u0142\60\4\0\14\60\16\0"+
    "\5\60\7\0\1\60\1\0\1\60\21\0\160\61\5\60\1\0\2\60"+
    "\2\0\4\60\10\0\1\60\1\0\3\60\1\0\1\60\1\0\24\60"+
    "\1\0\123\60\1\0\213\60\1\0\5\61\2\0\236\60\11\0\46\60"+
    "\2\0\1\60\7\0\47\60\7\0\1\60\1\0\55\61\1\0\1\61"+
    "\1\0\2\61\1\0\2\61\1\0\1\61\10\0\33\60\5\0\3\60"+
    "\15\0\5\61\6\0\1\60\4\0\13\61\5\0\53\60\37\61\4\0"+
    "\2\60\1\61\143\60\1\0\1\60\10\61\1\0\6\61\2\60\2\61"+
    "\1\0\4\61\2\60\12\61\3\60\2\0\1\60\17\0\1\61\1\60"+
    "\1\61\36\60\33\61\2\0\131\60\13\61\1\60\16\0\12\61\41\60"+
    "\11\61\2\60\4\0\1\60\5\0\26\60\4\61\1\60\11\61\1\60"+
    "\3\61\1\60\5\61\22\0\31\60\3\61\104\0\1\60\1\0\13\60"+
    "\67\0\33\61\1\0\4\61\66\60\3\61\1\60\22\61\1\60\7\61"+
    "\12\60\2\61\2\0\12\61\1\0\7\60\1\0\7\60\1\0\3\61"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0\1\60"+
    "\3\0\4\60\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61"+
    "\1\60\10\0\1\61\4\0\2\60\1\0\3\60\2\61\2\0\12\61"+
    "\4\60\7\0\1\60\5\0\3\61\1\0\6\60\4\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0\2\60\2\0"+
    "\1\61\1\0\5\61\4\0\2\61\2\0\3\61\3\0\1\61\7\0"+
    "\4\60\1\0\1\60\7\0\14\61\3\60\1\61\13\0\3\61\1\0"+
    "\11\60\1\0\3\60\1\0\26\60\1\0\7\60\1\0\2\60\1\0"+
    "\5\60\2\0\1\61\1\60\10\61\1\0\3\61\1\0\3\61\2\0"+
    "\1\60\17\0\2\60\2\61\2\0\12\61\1\0\1\60\17\0\3\61"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0\2\60"+
    "\1\0\5\60\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61"+
    "\10\0\2\61\4\0\2\60\1\0\3\60\2\61\2\0\12\61\1\0"+
    "\1\60\20\0\1\61\1\60\1\0\6\60\3\0\3\60\1\0\4\60"+
    "\3\0\2\60\1\0\1\60\1\0\2\60\3\0\2\60\3\0\3\60"+
    "\3\0\14\60\4\0\5\61\3\0\3\61\1\0\4\61\2\0\1\60"+
    "\6\0\1\61\16\0\12\61\11\0\1\60\7\0\3\61\1\0\10\60"+
    "\1\0\3\60\1\0\27\60\1\0\12\60\1\0\5\60\3\0\1\60"+
    "\7\61\1\0\3\61\1\0\4\61\7\0\2\61\1\0\2\60\6\0"+
    "\2\60\2\61\2\0\12\61\22\0\2\61\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\1\61\1\60\7\61"+
    "\1\0\3\61\1\0\4\61\7\0\2\61\7\0\1\60\1\0\2\60"+
    "\2\61\2\0\12\61\1\0\2\60\17\0\2\61\1\0\10\60\1\0"+
    "\3\60\1\0\51\60\2\0\1\60\7\61\1\0\3\61\1\0\4\61"+
    "\1\60\10\0\1\61\10\0\2\60\2\61\2\0\12\61\12\0\6\60"+
    "\2\0\2\61\1\0\22\60\3\0\30\60\1\0\11\60\1\0\1\60"+
    "\2\0\7\60\3\0\1\61\4\0\6\61\1\0\1\61\1\0\10\61"+
    "\22\0\2\61\15\0\60\60\1\61\2\60\7\61\4\0\10\60\10\61"+
    "\1\0\12\61\47\0\2\60\1\0\1\60\2\0\2\60\1\0\1\60"+
    "\2\0\1\60\6\0\4\60\1\0\7\60\1\0\3\60\1\0\1\60"+
    "\1\0\1\60\2\0\2\60\1\0\4\60\1\61\2\60\6\61\1\0"+
    "\2\61\1\60\2\0\5\60\1\0\1\60\1\0\6\61\2\0\12\61"+
    "\2\0\4\60\40\0\1\60\27\0\2\61\6\0\12\61\13\0\1\61"+
    "\1\0\1\61\1\0\1\61\4\0\2\61\10\60\1\0\44\60\4\0"+
    "\24\61\1\0\2\61\5\60\13\61\1\0\44\61\11\0\1\61\71\0"+
    "\53\60\24\61\1\60\12\61\6\0\6\60\4\61\4\60\3\61\1\60"+
    "\3\61\2\60\7\61\3\60\4\61\15\60\14\61\1\60\17\61\2\0"+
    "\46\60\1\0\1\60\5\0\1\60\2\0\53\60\1\0\u014d\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0\51\60\1\0"+
    "\4\60\2\0\41\60\1\0\4\60\2\0\7\60\1\0\1\60\1\0"+
    "\4\60\2\0\17\60\1\0\71\60\1\0\4\60\2\0\103\60\2\0"+
    "\3\61\40\0\20\60\20\0\125\60\14\0\u026c\60\2\0\21\60\1\0"+
    "\32\60\5\0\113\60\3\0\3\60\17\0\15\60\1\0\4\60\3\61"+
    "\13\0\22\60\3\61\13\0\22\60\2\61\14\0\15\60\1\0\3\60"+
    "\1\0\2\61\14\0\64\60\40\61\3\0\1\60\3\0\2\60\1\61"+
    "\2\0\12\61\41\0\3\61\2\0\12\61\6\0\130\60\10\0\51\60"+
    "\1\61\1\60\5\0\106\60\12\0\35\60\3\0\14\61\4\0\14\61"+
    "\12\0\12\61\36\60\2\0\5\60\13\0\54\60\4\0\21\61\7\60"+
    "\2\61\6\0\12\61\46\0\27\60\5\61\4\0\65\60\12\61\1\0"+
    "\35\61\2\0\13\61\6\0\12\61\15\0\1\60\130\0\5\61\57\60"+
    "\21\61\7\60\4\0\12\61\21\0\11\61\14\0\3\61\36\60\15\61"+
    "\2\60\12\61\54\60\16\61\14\0\44\60\24\61\10\0\12\61\3\0"+
    "\3\60\12\61\44\60\122\0\3\61\1\0\25\61\4\60\1\61\4\60"+
    "\3\61\2\60\11\0\300\60\47\61\25\0\4\61\u0116\60\2\0\6\60"+
    "\2\0\46\60\2\0\6\60\2\0\10\60\1\0\1\60\1\0\1\60"+
    "\1\0\1\60\1\0\37\60\2\0\65\60\1\0\7\60\1\0\1\60"+
    "\3\0\3\60\1\0\7\60\3\0\4\60\2\0\6\60\4\0\15\60"+
    "\5\0\3\60\1\0\7\60\16\0\5\61\30\0\1\65\1\65\5\61"+
    "\20\0\2\60\23\0\1\60\13\0\5\61\5\0\6\61\1\0\1\60"+
    "\15\0\1\60\20\0\15\60\3\0\33\60\25\0\15\61\4\0\1\61"+
    "\3\0\14\61\21\0\1\60\4\0\1\60\2\0\12\60\1\0\1\60"+
    "\3\0\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0\4\60"+
    "\1\0\13\60\2\0\4\60\5\0\5\60\4\0\1\60\21\0\51\60"+
    "\u0a77\0\57\60\1\0\57\60\1\0\205\60\6\0\4\60\3\61\2\60"+
    "\14\0\46\60\1\0\1\60\5\0\1\60\2\0\70\60\7\0\1\60"+
    "\17\0\1\61\27\60\11\0\7\60\1\0\7\60\1\0\7\60\1\0"+
    "\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0"+
    "\40\61\57\0\1\60\u01d5\0\3\60\31\0\11\60\6\61\1\0\5\60"+
    "\2\0\5\60\4\0\126\60\2\0\2\61\2\0\3\60\1\0\132\60"+
    "\1\0\4\60\5\0\51\60\3\0\136\60\21\0\33\60\65\0\20\60"+
    "\u0200\0\u19b6\60\112\0\u51cd\60\63\0\u048d\60\103\0\56\60\2\0\u010d\60"+
    "\3\0\20\60\12\61\2\60\24\0\57\60\1\61\4\0\12\61\1\0"+
    "\31\60\7\0\1\61\120\60\2\61\45\0\11\60\2\0\147\60\2\0"+
    "\4\60\1\0\4\60\14\0\13\60\115\0\12\60\1\61\3\60\1\61"+
    "\4\60\1\61\27\60\5\61\20\0\1\60\7\0\64\60\14\0\2\61"+
    "\62\60\21\61\13\0\12\61\6\0\22\61\6\60\3\0\1\60\4\0"+
    "\12\61\34\60\10\61\2\0\27\60\15\61\14\0\35\60\3\0\4\61"+
    "\57\60\16\61\16\0\1\60\12\61\46\0\51\60\16\61\11\0\3\60"+
    "\1\61\10\60\2\61\2\0\12\61\6\0\27\60\3\0\1\60\1\61"+
    "\4\0\60\60\1\61\1\60\3\61\2\60\2\61\5\60\2\61\1\60"+
    "\1\61\1\60\30\0\3\60\2\0\13\60\5\61\2\0\3\60\2\61"+
    "\12\0\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0\7\60"+
    "\221\0\43\60\10\61\1\0\2\61\2\0\12\61\6\0\u2ba4\60\14\0"+
    "\27\60\4\0\61\60\u2104\0\u016e\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\1\60\1\61\12\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0\u016b\60\22\0"+
    "\100\60\2\0\66\60\50\0\15\60\3\0\20\61\20\0\7\61\14\0"+
    "\2\60\30\0\3\60\31\0\1\60\6\0\5\60\1\0\207\60\2\0"+
    "\1\61\4\0\1\60\13\0\12\61\7\0\32\60\4\0\1\60\1\0"+
    "\32\60\13\0\131\60\3\0\6\60\2\0\6\60\2\0\6\60\2\0"+
    "\3\60\3\0\2\60\3\0\2\60\22\0\3\61\4\0\14\60\1\0"+
    "\32\60\1\0\23\60\1\0\2\60\1\0\17\60\2\0\16\60\42\0"+
    "\173\60\105\0\65\60\210\0\1\61\202\0\35\60\3\0\61\60\57\0"+
    "\37\60\21\0\33\60\65\0\36\60\2\0\44\60\4\0\10\60\1\0"+
    "\5\60\52\0\236\60\2\0\12\61\u0356\0\6\60\2\0\1\60\1\0"+
    "\54\60\1\0\2\60\3\0\1\60\2\0\27\60\252\0\26\60\12\0"+
    "\32\60\106\0\70\60\6\0\2\60\100\0\1\60\3\61\1\0\2\61"+
    "\5\0\4\61\4\60\1\0\3\60\1\0\33\60\4\0\3\61\4\0"+
    "\1\61\40\0\35\60\203\0\66\60\12\0\26\60\12\0\23\60\215\0"+
    "\111\60\u03b7\0\3\61\65\60\17\61\37\0\12\61\20\0\3\61\55\60"+
    "\13\61\2\0\1\61\22\0\31\60\7\0\12\61\6\0\3\61\44\60"+
    "\16\61\1\0\12\61\100\0\3\61\60\60\16\61\4\60\13\0\12\61"+
    "\u04a6\0\53\60\15\61\10\0\12\61\u0936\0\u036f\60\221\0\143\60\u0b9d\0"+
    "\u042f\60\u33d1\0\u0239\60\u04c7\0\105\60\13\0\1\60\56\61\20\0\4\61"+
    "\15\60\u4060\0\2\60\u2163\0\5\61\3\0\26\61\2\0\7\61\36\0"+
    "\4\61\224\0\3\61\u01bb\0\125\60\1\0\107\60\1\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0\1\60\1\0"+
    "\7\60\1\0\101\60\1\0\4\60\2\0\10\60\1\0\7\60\1\0"+
    "\34\60\1\0\4\60\1\0\5\60\1\0\1\60\3\0\7\60\1\0"+
    "\u0154\60\2\0\31\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0\37\60\1\0"+
    "\31\60\1\0\10\60\2\0\62\61\u1600\0\4\60\1\0\33\60\1\0"+
    "\2\60\1\0\1\60\2\0\1\60\1\0\12\60\1\0\4\60\1\0"+
    "\1\60\1\0\1\60\6\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0\1\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0\2\60\1\0"+
    "\1\60\2\0\4\60\1\0\7\60\1\0\4\60\1\0\4\60\1\0"+
    "\1\60\1\0\12\60\1\0\21\60\5\0\3\60\1\0\5\60\1\0"+
    "\21\60\u1144\0\ua6d7\60\51\0\u1035\60\13\0\336\60\u3fe2\0\u021e\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\61\36\0\140\61\200\0\360\61\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\4\1\1\12\30\2\1\15\0\1\31\1\32\10\30"+
    "\1\33\4\30\2\0\1\34\1\35\15\0\1\36\15\30"+
    "\2\37\1\40\10\0\1\41\5\0\10\30\1\42\2\30"+
    "\1\43\1\44\1\30\17\0\4\30\1\45\6\30\14\0"+
    "\1\46\2\0\13\30\2\0\1\47\1\50\1\0\1\51"+
    "\16\0\1\52\2\30\1\53\1\54\1\55\6\30\5\0"+
    "\1\56\14\0\1\30\1\57\1\60\1\30\1\61\1\62"+
    "\2\30\1\63\1\64\4\0\1\65\1\66\11\0\1\67"+
    "\3\30\15\0\1\70\2\30\3\0\1\71\1\72\4\0"+
    "\1\73\3\0\1\74\2\30\10\0\1\75\3\0\1\76"+
    "\1\30\1\77\2\0\1\100\7\0\1\30\1\101\10\0"+
    "\1\30\2\0\1\102\2\0\1\103\2\0\1\30\5\0"+
    "\1\104\1\30\1\0\1\105\1\106\1\107\1\0\1\30"+
    "\2\0\1\30\1\110\1\0\1\30\1\0\1\30\1\111"+
    "\1\30\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\u0113\0\67\0\67\0\67\0\67"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\334\0\67\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u044c\0\67\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u01ef\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0"+
    "\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\u0faf\0\67\0\u0a19\0\67\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\67\0\u119e\0\u11d5\0\u120c"+
    "\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u01ef\0\u1469\0\u14a0\0\u01ef\0\u01ef\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u01ef\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\67\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\67\0\67"+
    "\0\u203a\0\67\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\67\0\u2373\0\u23aa\0\u01ef\0\u01ef\0\u01ef\0\u23e1\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\67\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u01ef"+
    "\0\u01ef\0\u2909\0\u01ef\0\u01ef\0\u2940\0\u2977\0\67\0\67"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\67\0\67\0\u2a8a\0\u2ac1"+
    "\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u01ef"+
    "\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa"+
    "\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2"+
    "\0\u01ef\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\67\0\67"+
    "\0\u30fc\0\u3133\0\u316a\0\u31a1\0\67\0\u31d8\0\u320f\0\u3246"+
    "\0\67\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u33fe\0\u3435\0\u346c\0\67\0\u34a3\0\u34da\0\u3511\0\u01ef"+
    "\0\u3548\0\67\0\u357f\0\u35b6\0\67\0\u35ed\0\u3624\0\u365b"+
    "\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\67\0\u37a5\0\u37dc"+
    "\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994"+
    "\0\u39cb\0\67\0\u3a02\0\u3a39\0\67\0\u3a70\0\u3aa7\0\u3ade"+
    "\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1\0\67\0\u3c28\0\u3c5f"+
    "\0\67\0\67\0\67\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72"+
    "\0\67\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\67\0\u3e85\0\u01ef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\34\1\36\1\34\1\37"+
    "\1\40\1\41\1\42\3\34\1\43\1\44\11\34\1\2"+
    "\1\45\1\46\1\5\72\0\1\3\20\0\1\47\46\0"+
    "\1\50\1\0\1\51\65\0\1\5\23\0\1\5\34\0"+
    "\1\5\34\0\1\52\1\53\1\0\1\54\1\55\1\56"+
    "\2\0\1\57\1\60\1\0\1\61\1\0\1\62\4\0"+
    "\1\63\15\0\1\5\23\0\1\64\34\0\1\5\32\0"+
    "\1\65\37\0\1\34\27\0\1\34\1\66\1\34\1\67"+
    "\25\34\4\0\1\34\1\0\1\34\27\0\31\34\4\0"+
    "\1\34\1\0\1\34\27\0\3\34\1\70\25\34\4\0"+
    "\1\34\1\0\1\34\27\0\3\34\1\71\25\34\4\0"+
    "\1\34\1\0\1\34\27\0\1\34\1\72\15\34\1\73"+
    "\11\34\4\0\1\34\1\0\1\34\27\0\3\34\1\74"+
    "\25\34\4\0\1\34\1\0\1\34\27\0\3\34\1\75"+
    "\5\34\1\76\17\34\4\0\1\34\1\0\1\34\27\0"+
    "\12\34\1\77\16\34\4\0\1\34\1\0\1\34\27\0"+
    "\17\34\1\100\11\34\4\0\1\34\1\0\1\34\27\0"+
    "\1\34\1\101\1\102\26\34\4\0\1\34\62\103\1\0"+
    "\4\103\62\104\1\0\4\104\1\0\1\105\65\0\3\50"+
    "\1\106\63\50\2\51\1\0\1\51\1\107\62\51\40\0"+
    "\1\110\1\111\61\0\1\112\66\0\1\113\106\0\1\114"+
    "\54\0\1\115\72\0\1\116\52\0\1\117\7\0\1\120"+
    "\62\0\1\121\63\0\1\122\103\0\1\123\17\0\1\34"+
    "\27\0\2\34\1\124\26\34\4\0\1\34\1\0\1\34"+
    "\27\0\2\34\1\125\26\34\4\0\1\34\1\0\1\34"+
    "\27\0\14\34\1\126\14\34\4\0\1\34\1\0\1\34"+
    "\27\0\6\34\1\127\5\34\1\130\14\34\4\0\1\34"+
    "\1\0\1\34\27\0\7\34\1\131\21\34\4\0\1\34"+
    "\1\0\1\34\27\0\15\34\1\132\13\34\4\0\1\34"+
    "\1\0\1\34\27\0\3\34\1\133\25\34\4\0\1\34"+
    "\1\0\1\34\27\0\7\34\1\134\21\34\4\0\1\34"+
    "\1\0\1\34\27\0\15\34\1\135\13\34\4\0\1\34"+
    "\1\0\1\34\27\0\13\34\1\136\15\34\4\0\1\34"+
    "\1\0\1\34\27\0\7\34\1\137\21\34\4\0\1\34"+
    "\1\0\1\34\27\0\10\34\1\140\20\34\4\0\1\34"+
    "\1\0\1\34\27\0\3\34\1\141\25\34\4\0\1\34"+
    "\62\103\1\142\4\103\62\104\1\0\1\143\3\104\2\0"+
    "\1\144\133\0\1\145\5\0\1\146\60\0\1\147\54\0"+
    "\1\150\72\0\1\151\72\0\1\152\61\0\1\153\57\0"+
    "\1\154\101\0\1\155\6\0\1\156\61\0\1\157\55\0"+
    "\1\160\65\0\1\161\73\0\1\162\26\0\1\34\27\0"+
    "\4\34\1\163\24\34\4\0\1\34\1\0\1\34\27\0"+
    "\5\34\1\164\23\34\4\0\1\34\1\0\1\34\27\0"+
    "\3\34\1\165\25\34\4\0\1\34\1\0\1\34\27\0"+
    "\3\34\1\166\25\34\4\0\1\34\1\0\1\34\27\0"+
    "\10\34\1\167\20\34\4\0\1\34\1\0\1\34\27\0"+
    "\16\34\1\170\12\34\4\0\1\34\1\0\1\34\27\0"+
    "\2\34\1\171\26\34\4\0\1\34\1\0\1\34\27\0"+
    "\3\34\1\172\25\34\4\0\1\34\1\0\1\34\27\0"+
    "\5\34\1\173\23\34\4\0\1\34\1\0\1\34\27\0"+
    "\2\34\1\174\2\34\1\175\23\34\4\0\1\34\1\0"+
    "\1\34\27\0\5\34\1\176\23\34\4\0\1\34\1\0"+
    "\1\34\27\0\5\34\1\177\23\34\4\0\1\34\1\0"+
    "\1\34\27\0\1\34\1\200\27\34\4\0\1\34\32\0"+
    "\1\201\1\0\1\202\3\0\1\203\76\0\1\204\52\0"+
    "\1\205\102\0\1\206\65\0\1\207\53\0\1\210\77\0"+
    "\1\211\55\0\1\212\74\0\1\213\66\0\1\214\62\0"+
    "\1\215\62\0\1\216\103\0\1\217\20\0\1\34\27\0"+
    "\1\34\1\220\27\34\4\0\1\34\1\0\1\34\27\0"+
    "\2\34\1\221\26\34\4\0\1\34\1\0\1\34\27\0"+
    "\16\34\1\222\12\34\4\0\1\34\1\0\1\34\27\0"+
    "\15\34\1\223\13\34\4\0\1\34\1\0\1\34\27\0"+
    "\5\34\1\224\23\34\4\0\1\34\1\0\1\34\27\0"+
    "\11\34\1\225\17\34\4\0\1\34\1\0\1\34\27\0"+
    "\24\34\1\226\4\34\4\0\1\34\1\0\1\34\27\0"+
    "\16\34\1\227\12\34\4\0\1\34\1\0\1\34\27\0"+
    "\11\34\1\230\17\34\4\0\1\34\1\0\1\34\27\0"+
    "\2\34\1\231\26\34\4\0\1\34\1\0\1\34\27\0"+
    "\2\34\1\232\26\34\4\0\1\34\33\0\1\233\66\0"+
    "\1\234\75\0\1\235\72\0\1\236\66\0\1\237\67\0"+
    "\1\240\53\0\1\241\100\0\1\242\53\0\1\243\66\0"+
    "\1\244\76\0\1\245\66\0\1\246\64\0\1\247\60\0"+
    "\1\250\65\0\1\251\35\0\1\34\27\0\4\34\1\252"+
    "\24\34\4\0\1\34\1\0\1\34\27\0\15\34\1\253"+
    "\13\34\4\0\1\34\1\0\1\34\27\0\14\34\1\254"+
    "\14\34\4\0\1\34\1\0\1\34\27\0\3\34\1\255"+
    "\25\34\4\0\1\34\1\0\1\34\27\0\5\34\1\256"+
    "\23\34\4\0\1\34\1\0\1\34\27\0\22\34\1\257"+
    "\6\34\4\0\1\34\1\0\1\34\27\0\16\34\1\260"+
    "\12\34\4\0\1\34\1\0\1\34\27\0\12\34\1\261"+
    "\16\34\4\0\1\34\1\0\1\34\27\0\14\34\1\262"+
    "\14\34\4\0\1\34\1\0\1\34\27\0\1\263\1\264"+
    "\27\34\4\0\1\34\55\0\1\265\44\0\1\266\102\0"+
    "\1\267\55\0\1\270\65\0\1\271\65\0\1\272\100\0"+
    "\1\273\54\0\1\274\64\0\1\275\101\0\1\276\57\0"+
    "\1\277\66\0\1\300\61\0\1\301\1\302\1\303\1\0"+
    "\1\304\4\0\1\305\2\0\1\306\1\0\1\307\4\0"+
    "\1\310\45\0\1\311\34\0\1\34\27\0\3\34\1\312"+
    "\25\34\4\0\1\34\1\0\1\34\27\0\1\34\1\313"+
    "\27\34\4\0\1\34\1\0\1\34\27\0\5\34\1\314"+
    "\23\34\4\0\1\34\1\0\1\34\27\0\2\34\1\315"+
    "\26\34\4\0\1\34\1\0\1\34\27\0\15\34\1\316"+
    "\13\34\4\0\1\34\1\0\1\34\27\0\12\34\1\317"+
    "\16\34\4\0\1\34\1\0\1\34\27\0\11\34\1\320"+
    "\17\34\4\0\1\34\1\0\1\34\27\0\11\34\1\321"+
    "\17\34\4\0\1\34\1\0\1\34\27\0\1\34\1\322"+
    "\27\34\4\0\1\34\1\0\1\34\27\0\3\34\1\323"+
    "\25\34\4\0\1\34\1\0\1\34\27\0\2\34\1\324"+
    "\26\34\4\0\1\34\32\0\1\325\66\0\1\326\70\0"+
    "\1\327\67\0\1\330\64\0\1\331\66\0\1\332\75\0"+
    "\1\333\41\0\1\334\66\0\1\335\113\0\1\336\57\0"+
    "\1\337\67\0\1\340\66\0\1\341\75\0\1\342\57\0"+
    "\1\343\64\0\1\344\3\0\1\345\66\0\1\346\31\0"+
    "\1\34\27\0\2\34\1\347\26\34\4\0\1\34\1\0"+
    "\1\34\27\0\2\34\1\350\26\34\4\0\1\34\1\0"+
    "\1\34\27\0\7\34\1\351\21\34\4\0\1\34\1\0"+
    "\1\34\27\0\5\34\1\352\23\34\4\0\1\34\1\0"+
    "\1\34\27\0\2\34\1\353\26\34\4\0\1\34\1\0"+
    "\1\34\27\0\2\34\1\354\26\34\4\0\1\34\1\0"+
    "\1\34\27\0\15\34\1\355\13\34\4\0\1\34\1\0"+
    "\1\34\27\0\2\34\1\356\26\34\4\0\1\34\33\0"+
    "\1\357\66\0\1\360\101\0\1\361\54\0\1\362\76\0"+
    "\1\363\55\0\1\364\51\0\1\365\66\0\1\366\105\0"+
    "\1\367\65\0\1\370\76\0\1\371\63\0\1\372\57\0"+
    "\1\373\107\0\1\374\72\0\1\375\55\0\1\376\65\0"+
    "\1\377\22\0\1\34\27\0\5\34\1\u0100\23\34\4\0"+
    "\1\34\1\0\1\34\27\0\15\34\1\u0101\13\34\4\0"+
    "\1\34\1\0\1\34\27\0\14\34\1\u0102\14\34\4\0"+
    "\1\34\1\0\1\34\27\0\1\34\1\u0103\27\34\4\0"+
    "\1\34\45\0\1\u0104\67\0\1\u0105\56\0\1\u0106\45\0"+
    "\1\u0107\105\0\1\u0108\64\0\1\u0109\67\0\1\u010a\77\0"+
    "\1\u010b\77\0\1\u010c\56\0\1\u010d\53\0\1\u010e\101\0"+
    "\1\u010f\57\0\1\u0110\31\0\1\34\27\0\1\34\1\u0111"+
    "\27\34\4\0\1\34\1\0\1\34\27\0\1\34\1\u0112"+
    "\27\34\4\0\1\34\1\0\1\34\27\0\20\34\1\u0113"+
    "\10\34\4\0\1\34\34\0\1\u0114\77\0\1\u0115\54\0"+
    "\1\u0116\51\0\1\u0117\106\0\1\u0118\75\0\1\u0119\57\0"+
    "\1\u011a\70\0\1\u011b\62\0\1\u011c\70\0\1\u011d\75\0"+
    "\1\u011e\54\0\1\u011f\1\u0120\100\0\1\u0121\21\0\1\34"+
    "\27\0\15\34\1\u0122\13\34\4\0\1\34\1\0\1\34"+
    "\27\0\4\34\1\u0123\24\34\4\0\1\34\15\0\1\u0124"+
    "\105\0\1\u0125\66\0\1\u0126\5\0\1\u0127\3\0\1\u0128"+
    "\54\0\1\u0129\67\0\1\u012a\65\0\1\u012b\100\0\1\u012c"+
    "\54\0\1\u012d\70\0\1\u012e\76\0\1\u012f\21\0\1\34"+
    "\27\0\1\34\1\u0130\27\34\4\0\1\34\1\0\1\34"+
    "\27\0\3\34\1\u0131\25\34\4\0\1\34\16\0\1\u0132"+
    "\65\0\1\u0133\116\0\1\u0134\56\0\1\u0135\67\0\1\u0136"+
    "\103\0\1\u0137\63\0\1\u0138\73\0\1\u0139\64\0\1\u013a"+
    "\53\0\1\u013b\62\0\1\u013c\33\0\1\34\27\0\10\34"+
    "\1\u013d\20\34\4\0\1\34\16\0\1\u013e\112\0\1\u013f"+
    "\67\0\1\u0140\70\0\1\u0141\70\0\1\u0142\51\0\1\u0143"+
    "\101\0\1\u0144\67\0\1\u0145\55\0\1\u0146\32\0\1\34"+
    "\27\0\4\34\1\u0147\24\34\4\0\1\34\56\0\1\u0148"+
    "\64\0\1\u0149\50\0\1\u014a\75\0\1\u014b\75\0\1\u014c"+
    "\50\0\1\u014d\100\0\1\u014e\54\0\1\u014f\31\0\1\34"+
    "\27\0\3\34\1\u0150\25\34\4\0\1\34\50\0\1\u0151"+
    "\51\0\1\u0152\71\0\1\u0153\70\0\1\u0154\71\0\1\u0155"+
    "\56\0\1\u0156\34\0\1\34\27\0\1\34\1\u0157\27\34"+
    "\4\0\1\34\34\0\1\u0158\66\0\1\u0159\65\0\1\u015a"+
    "\67\0\1\u015b\66\0\1\u015c\33\0\1\34\27\0\2\34"+
    "\1\u015d\26\34\4\0\1\34\45\0\1\u015e\54\0\1\u015f"+
    "\34\0\1\34\27\0\16\34\1\u0160\12\34\4\0\1\34"+
    "\32\0\1\u0161\76\0\1\u0162\25\0\1\34\27\0\21\34"+
    "\1\u0163\7\34\4\0\1\34\47\0\1\u0164\20\0\1\34"+
    "\27\0\11\34\1\u0165\17\34\4\0\1\34\36\0\1\u0166"+
    "\31\0\1\34\27\0\1\u0167\30\34\4\0\1\34\1\0"+
    "\1\34\27\0\5\34\1\u0168\23\34\4\0\1\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16060];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\16\11\1\1\4\11\16\1\15\0"+
    "\1\1\1\11\15\1\2\0\1\1\1\11\15\0\16\1"+
    "\1\11\1\1\1\11\10\0\1\11\5\0\16\1\17\0"+
    "\13\1\14\0\1\11\2\0\13\1\2\0\2\11\1\0"+
    "\1\11\16\0\1\11\13\1\5\0\1\11\14\0\10\1"+
    "\2\11\4\0\2\11\11\0\4\1\15\0\3\1\3\0"+
    "\2\11\4\0\1\11\3\0\1\11\2\1\10\0\1\11"+
    "\3\0\2\1\1\11\2\0\1\11\7\0\1\1\1\11"+
    "\10\0\1\1\2\0\1\11\2\0\1\11\2\0\1\1"+
    "\5\0\1\11\1\1\1\0\3\11\1\0\1\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
 public ArrayList<NodoError> Elista = new ArrayList();
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    private void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
	   NodoError Nerror = new NodoError("lexico");
       Nerror.descripcion = "caracter no reconocido: "+error;
       Nerror.linea = String.valueOf(y);
       Nerror.columna = String.valueOf(x);
       Elista.add(Nerror);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2918) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errorLexico(yytext(),yyline,yycolumn);
            }
          case 75: break;
          case 2: 
            { return new Symbol(symf.nume,yyline,yycolumn,yytext());
            }
          case 76: break;
          case 3: 
            { return new Symbol(symf.div,yyline,yycolumn,yytext());
            }
          case 77: break;
          case 4: 
            { /*Ignore*/
            }
          case 78: break;
          case 5: 
            { return new Symbol(symf.por,yyline,yycolumn,yytext());
            }
          case 79: break;
          case 6: 
            { return new Symbol(symf.mas,yyline,yycolumn,yytext());
            }
          case 80: break;
          case 7: 
            { return new Symbol(symf.nos,yyline,yycolumn,yytext());
            }
          case 81: break;
          case 8: 
            { return new Symbol(symf.igu,yyline,yycolumn,yytext());
            }
          case 82: break;
          case 9: 
            { return new Symbol(symf.pot,yyline,yycolumn,yytext());
            }
          case 83: break;
          case 10: 
            { return new Symbol(symf.may,yyline,yycolumn,yytext());
            }
          case 84: break;
          case 11: 
            { return new Symbol(symf.men,yyline,yycolumn,yytext());
            }
          case 85: break;
          case 12: 
            { return new Symbol(symf.ill,yyline,yycolumn,yytext());
            }
          case 86: break;
          case 13: 
            { return new Symbol(symf.fll,yyline,yycolumn,yytext());
            }
          case 87: break;
          case 14: 
            { return new Symbol(symf.ipa,yyline,yycolumn,yytext());
            }
          case 88: break;
          case 15: 
            { return new Symbol(symf.fpa,yyline,yycolumn,yytext());
            }
          case 89: break;
          case 16: 
            { return new Symbol(symf.ico,yyline,yycolumn,yytext());
            }
          case 90: break;
          case 17: 
            { return new Symbol(symf.fco,yyline,yycolumn,yytext());
            }
          case 91: break;
          case 18: 
            { return new Symbol(symf.fin,yyline,yycolumn,yytext());
            }
          case 92: break;
          case 19: 
            { return new Symbol(symf.pun,yyline,yycolumn,yytext());
            }
          case 93: break;
          case 20: 
            { return new Symbol(symf.com,yyline,yycolumn,yytext());
            }
          case 94: break;
          case 21: 
            { return new Symbol(symf.pyc,yyline,yycolumn,yytext());
            }
          case 95: break;
          case 22: 
            { return new Symbol(symf.dop,yyline,yycolumn,yytext());
            }
          case 96: break;
          case 23: 
            { return new Symbol(symf.not,yyline,yycolumn,yytext());
            }
          case 97: break;
          case 24: 
            { return new Symbol(symf.idva,yyline,yycolumn,yytext());
            }
          case 98: break;
          case 25: 
            { return new Symbol(symf.or,yyline,yycolumn,yytext());
            }
          case 99: break;
          case 26: 
            { return new Symbol(symf.and,yyline,yycolumn,yytext());
            }
          case 100: break;
          case 27: 
            { return new Symbol(symf.si,yyline,yycolumn,yytext());
            }
          case 101: break;
          case 28: 
            { return new Symbol(symf.deci,yyline,yycolumn,yytext());
            }
          case 102: break;
          case 29: 
            { /*Ignorar Comentario Simple*/
            }
          case 103: break;
          case 30: 
            { return new Symbol(symf.var,yyline,yycolumn,yytext());
            }
          case 104: break;
          case 31: 
            { return new Symbol(symf.cade,yyline,yycolumn,yytext());
            }
          case 105: break;
          case 32: 
            { /*Ignorar Comentario multiple*/
            }
          case 106: break;
          case 33: 
            { return new Symbol(symf.map,yyline,yycolumn,yytext());
            }
          case 107: break;
          case 34: 
            { return new Symbol(symf.sino,yyline,yycolumn,yytext());
            }
          case 108: break;
          case 35: 
            { return new Symbol(symf.nulo,yyline,yycolumn,yytext());
            }
          case 109: break;
          case 36: 
            { return new Symbol(symf.caso,yyline,yycolumn,yytext());
            }
          case 110: break;
          case 37: 
            { return new Symbol(symf.fals,yyline,yycolumn,yytext());
            }
          case 111: break;
          case 38: 
            { return new Symbol(symf.todo,yyline,yycolumn,yytext());
            }
          case 112: break;
          case 39: 
            { return new Symbol(symf.acli,yyline,yycolumn,yytext());
            }
          case 113: break;
          case 40: 
            { return new Symbol(symf.algu,yyline,yycolumn,yytext());
            }
          case 114: break;
          case 41: 
            { return new Symbol(symf.redu,yyline,yycolumn,yytext());
            }
          case 115: break;
          case 42: 
            { return new Symbol(symf.busc,yyline,yycolumn,yytext());
            }
          case 116: break;
          case 43: 
            { return new Symbol(symf.defe,yyline,yycolumn,yytext());
            }
          case 117: break;
          case 44: 
            { return new Symbol(symf.dete,yyline,yycolumn,yytext());
            }
          case 118: break;
          case 45: 
            { return new Symbol(symf.func,yyline,yycolumn,yytext());
            }
          case 119: break;
          case 46: 
            { return new Symbol(symf.filt,yyline,yycolumn,yytext());
            }
          case 120: break;
          case 47: 
            { return new Symbol(symf.reto,yyline,yycolumn,yytext());
            }
          case 121: break;
          case 48: 
            { return new Symbol(symf.lgxm,yyline,yycolumn,yytext());
            }
          case 122: break;
          case 49: 
            { return new Symbol(symf.impr,yyline,yycolumn,yytext());
            }
          case 123: break;
          case 50: 
            { return new Symbol(symf.impo,yyline,yycolumn,yytext());
            }
          case 124: break;
          case 51: 
            { return new Symbol(symf.acar,yyline,yycolumn,yytext());
            }
          case 125: break;
          case 52: 
            { return new Symbol(symf.acer,yyline,yycolumn,yytext());
            }
          case 126: break;
          case 53: 
            { return new Symbol(symf.maxi,yyline,yycolumn,yytext());
            }
          case 127: break;
          case 54: 
            { return new Symbol(symf.mini,yyline,yycolumn,yytext());
            }
          case 128: break;
          case 55: 
            { return new Symbol(symf.verd,yyline,yycolumn,yytext());
            }
          case 129: break;
          case 56: 
            { return new Symbol(symf.sele,yyline,yycolumn,yytext());
            }
          case 130: break;
          case 57: 
            { return new Symbol(symf.inve,yyline,yycolumn,yytext());
            }
          case 131: break;
          case 58: 
            { return new Symbol(symf.cvid,yyline,yycolumn,yytext());
            }
          case 132: break;
          case 59: 
            { return new Symbol(symf.ctex,yyline,yycolumn,yytext());
            }
          case 133: break;
          case 60: 
            { return new Symbol(symf.cbot,yyline,yycolumn,yytext());
            }
          case 134: break;
          case 61: 
            { return new Symbol(symf.cima,yyline,yycolumn,yytext());
            }
          case 135: break;
          case 62: 
            { return new Symbol(symf.cven,yyline,yycolumn,yytext());
            }
          case 136: break;
          case 63: 
            { return new Symbol(symf.asce,yyline,yycolumn,yytext());
            }
          case 137: break;
          case 64: 
            { return new Symbol(symf.opid,yyline,yycolumn,yytext());
            }
          case 138: break;
          case 65: 
            { return new Symbol(symf.desc,yyline,yycolumn,yytext());
            }
          case 139: break;
          case 66: 
            { return new Symbol(symf.cate,yyline,yycolumn,yytext());
            }
          case 140: break;
          case 67: 
            { return new Symbol(symf.ccte,yyline,yycolumn,yytext());
            }
          case 141: break;
          case 68: 
            { return new Symbol(symf.ccon,yyline,yycolumn,yytext());
            }
          case 142: break;
          case 69: 
            { return new Symbol(symf.opno,yyline,yycolumn,yytext());
            }
          case 143: break;
          case 70: 
            { return new Symbol(symf.crep,yyline,yycolumn,yytext());
            }
          case 144: break;
          case 71: 
            { return new Symbol(symf.cdes,yyline,yycolumn,yytext());
            }
          case 145: break;
          case 72: 
            { return new Symbol(symf.opet,yyline,yycolumn,yytext());
            }
          case 146: break;
          case 73: 
            { return new Symbol(symf.ccnu,yyline,yycolumn,yytext());
            }
          case 147: break;
          case 74: 
            { return new Symbol(symf.cada,yyline,yycolumn,yytext());
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
